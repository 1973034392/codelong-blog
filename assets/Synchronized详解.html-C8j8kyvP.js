import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as s,b as t,r as l,o}from"./app-D1r3k4w5.js";const r={};function h(d,i){const n=l("Mermaid");return o(),a("div",null,[i[0]||(i[0]=s(`<h1 id="深入解析synchronized-从互斥锁到锁升级与jvm优化" tabindex="-1"><a class="header-anchor" href="#深入解析synchronized-从互斥锁到锁升级与jvm优化"><span>深入解析Synchronized：从互斥锁到锁升级与JVM优化</span></a></h1><p><code>Synchronized</code> 是Java中用于解决多线程并发问题最基本也是最重要的关键字之一。它为并发编程提供了原子性、可见性和有序性的保证，是构建线程安全程序的基石。本文将详细阐述 <code>Synchronized</code> 的核心概念、锁升级的详细过程以及JVM为了提升其性能而采用的各种优化技术。</p><h2 id="synchronized的核心作用与用法" tabindex="-1"><a class="header-anchor" href="#synchronized的核心作用与用法"><span>Synchronized的核心作用与用法</span></a></h2><p><code>Synchronized</code> 的核心在于提供了一种内置的锁机制，也称为“监视器锁”（Monitor Lock）。当一个线程访问一个对象的 <code>synchronized</code> 方法或代码块时，它必须首先获得该对象的锁。如果锁已被其他线程持有，则该线程将被阻塞，直到锁被释放。</p><p>这带来了三个关键的并发特性：</p><ol><li><strong>互斥性 (Mutual Exclusion)</strong>：确保在同一时刻，只有一个线程可以执行被 <code>synchronized</code> 保护的代码块或方法。这有效防止了多个线程同时修改共享数据而导致的数据竞争和状态不一致问题。</li><li><strong>可见性 (Visibility)</strong>：当一个线程释放锁时，JMM（Java内存模型）会强制将该线程工作内存中对共享变量的所有修改都刷新到主内存中。而当另一个线程获取同一个锁时，它会强制从主内存中重新读取共享变量的值。这就保证了线程之间对共享变量状态的可见性。</li><li><strong>有序性 (Ordering)</strong>：<code>Synchronized</code> 能够禁止指令重排序。在 <code>synchronized</code> 块内的代码，其执行顺序在单个线程内看起来是有序的，并且其操作结果对其他获取该锁的线程来说也是有序的。</li></ol><p><strong>主要用法：</strong></p><ul><li><p><strong>修饰实例方法</strong>：锁是当前方法所属的实例对象（<code>this</code>）。</p><p>Java</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> instanceMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 临界区</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>修饰静态方法</strong>：锁是当前类的 <code>Class</code> 对象。由于一个类只有一个 <code>Class</code> 对象，因此可以控制对类级别静态资源的并发访问。</p><p>Java</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> staticMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 临界区</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>修饰代码块</strong>：可以显式指定任何对象作为锁对象，提供了比方法级别更细粒度的控制。</p><p>Java</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> blockMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 也可以是其他任何对象</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 临界区</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="从偏向锁到重量级锁-synchronized的锁升级之路" tabindex="-1"><a class="header-anchor" href="#从偏向锁到重量级锁-synchronized的锁升级之路"><span>从偏向锁到重量级锁：Synchronized的锁升级之路</span></a></h2><p>在早期版本的JVM中，<code>Synchronized</code> 直接依赖于操作系统的互斥量（Mutex）来实现，这种锁被称为“重量级锁”，因为它涉及用户态到内核态的切换，开销较大。为了在不同并发场景下都能提供高效的性能，从JDK 1.6开始，JVM引入了锁升级的概念，将锁的状态分为：<strong>无锁、偏向锁、轻量级锁和重量级锁</strong>。锁的状态会根据竞争情况动态地升级，但通常不会降级。</p><h3 id="_1-偏向锁-biased-locking" tabindex="-1"><a class="header-anchor" href="#_1-偏向锁-biased-locking"><span>1. 偏向锁 (Biased Locking)</span></a></h3><p><strong>核心思想</strong>：在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一个线程多次获得。为了让该线程获得锁的代价更低，引入了偏向锁。</p><ul><li><strong>升级过程</strong>： <ol><li>当一个线程首次访问同步代码块时，会在对象头（Object Header）和栈帧的锁记录（Lock Record）中记录下当前线程的ID。</li><li>此后，当该线程再次进入和退出这个同步块时，将不再需要进行任何CAS（比较并交换）操作来加锁和解锁，只需简单地测试对象头中是否保存着指向自己的偏向锁。</li></ol></li><li><strong>适用场景</strong>：锁竞争极少，且基本由固定线程获取的场景。</li><li><strong>撤销</strong>：当有另一个线程尝试获取这个偏向锁时，偏向模式才会结束。虚拟机会根据锁对象目前是否处于被锁定的状态，决定是撤销偏向（偏向锁的持有者已经执行完毕）并恢复到无锁或轻量级锁状态，还是将锁升级为轻量级锁。</li></ul><h3 id="_2-轻量级锁-lightweight-locking" tabindex="-1"><a class="header-anchor" href="#_2-轻量级锁-lightweight-locking"><span>2. 轻量级锁 (Lightweight Locking)</span></a></h3><p><strong>核心思想</strong>：如果偏向锁被撤销，说明存在竞争。轻量级锁认为这种竞争在短期内可以通过自旋（Spinning）的方式等待锁释放，从而避免将线程挂起和唤醒的重量级操作。</p><ul><li><strong>升级过程</strong>： <ol><li>线程在进入同步块时，JVM会先在当前线程的栈帧中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中（称为Displaced Mark Word）。</li><li>然后，线程尝试使用CAS操作将对象头中的Mark Word替换为指向锁记录的指针。</li><li>如果成功，当前线程获得锁。如果失败，表示其他线程已经持有了该锁。</li></ol></li><li><strong>自旋等待</strong>：获取锁失败的线程并不会立即被挂起，而是会进行自旋（执行一段无意义的循环），在循环中不断尝试获取锁。</li><li><strong>适用场景</strong>：锁的持有时间非常短，且线程交替执行同步块的场景。自旋可以避免线程上下文切换的开销。</li></ul><h3 id="_3-重量级锁-heavyweight-locking" tabindex="-1"><a class="header-anchor" href="#_3-重量级锁-heavyweight-locking"><span>3. 重量级锁 (Heavyweight Locking)</span></a></h3><p><strong>核心思想</strong>：如果自旋了一定次数后（自适应自旋，由JVM动态决定），或者已经有其他线程在自旋等待同一个锁，锁就会膨胀为重量级锁。</p><ul><li><strong>升级过程</strong>： <ol><li>当轻量级锁的竞争加剧，自旋无法很快获得锁时，锁会升级为重量级锁。</li><li>此时，对象头中的指针将指向一个真正的监视器对象（Monitor），该监视器对象内部会维护一个等待队列。</li><li>未能获取到锁的线程将被阻塞，并放入等待队列中，不再消耗CPU。当持有锁的线程释放锁后，会唤醒等待队列中的一个或多个线程。</li></ol></li><li><strong>适用场景</strong>：锁的竞争激烈，或者锁的持有时间较长，自旋等待不划算的场景。</li></ul><p><strong>锁升级过程图示</strong>：</p><p>代码段</p>`,21)),t(n,{code:"eJxlkMtOwkAUhvc8RV+AhT6ACXcRXOmuYeFKl8YtIaHRUq5SDVDkKgpKUC4mpCIV+zI905mVr+BkpkAjs5pkvu8//5nzq7PLC+E06BHo8YlIeyQVyc7rKC0lBK/3QPAn7aVpDwt7eGISbZJioJ89BUSQyqDeUUPwCngyg1XVgYVoMMHIACOD6xDIlNB7zx0V5FEuOJQEWbeMGldoMr/su60QI8NJ9JxG3YETjupTUF9gXEdzw1pUoDUEtYjGA2hr1mLMxTAVBQoyPyJCSbGXr9ZiiVcGUcr0TpfhzRlJ8xh5KKL7PqmkNwv/fheR9AT9EnX5p6FsbTckwuyos/4+STewqQR8JzBr42kV335CuUZh3i3KumVVyHeZdiQ6GipKqJXbTWcC9D/wfMCE2HoOVkZIK9jjHPzIPDvG0NaQv5AHFbI6ZGT3tC2HdZnWdKN0OdoANefQb/AZ9lvHWuaYGd9+I1FK/zrGGXKcRK0Rvl5tNrYbNzwHm02QB7wqqXchq8GXTuoG9Dopj+cPEOFeiw=="}),i[1]||(i[1]=s('<h2 id="jvm对synchronized的优化" tabindex="-1"><a class="header-anchor" href="#jvm对synchronized的优化"><span>JVM对Synchronized的优化</span></a></h2><p>除了锁升级，JVM还采用了一些其他的优化技术来进一步减少锁操作带来的性能开销。</p><h3 id="_1-自适应自旋-adaptive-spinning" tabindex="-1"><a class="header-anchor" href="#_1-自适应自旋-adaptive-spinning"><span>1. 自适应自旋 (Adaptive Spinning)</span></a></h3><p>在轻量级锁状态下，自旋的次数不再是固定的，而是由前一次在同一个锁上的自旋时间以及锁的拥有者的状态来决定。如果对于某个锁，自旋等待刚刚成功获得过，那么JVM就会认为这次自旋也很可能再次成功，进而它将允许自旋等待持续相对更长的时间。反之，如果对于某个锁，自旋很少成功，那么在以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。</p><h3 id="_2-锁消除-lock-elision" tabindex="-1"><a class="header-anchor" href="#_2-锁消除-lock-elision"><span>2. 锁消除 (Lock Elision)</span></a></h3><p>这是一种更为激进的优化。在JIT（Just-In-Time）编译期间，通过对代码进行逃逸分析（Escape Analysis），如果JVM能够证明一个对象不会被发布到它被创建的线程之外（即不可能被其他线程访问），那么对这个对象的所有同步操作都可以被安全地消除。</p><p>例如，在一个方法内部创建的 <code>StringBuffer</code> 对象，如果它只在该方法内被使用，那么JIT编译器就可以判断出它不存在线程安全问题，从而将 <code>StringBuffer</code> 内部的 <code>append</code> 方法（这是一个<code>synchronized</code>方法）的锁操作给消除掉。</p><h3 id="_3-锁粗化-lock-coarsening" tabindex="-1"><a class="header-anchor" href="#_3-锁粗化-lock-coarsening"><span>3. 锁粗化 (Lock Coarsening)</span></a></h3><p>原则上，我们总是推荐将同步块的作用范围限制得尽可能小，以减少不必要的阻塞。但如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。</p><p>锁粗化就是将多个连续的、针对同一个锁对象的加锁解锁操作，合并成一个更大范围的锁。例如，在循环中反复获取同一个锁，JIT编译器可能会将锁的范围扩大到整个循环之外，使得整个循环只进行一次加锁和一次解锁。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><code>Synchronized</code> 关键字是Java并发编程的基石，它通过内置的监视器锁机制保证了多线程环境下的数据安全。为了平衡安全性和性能，现代JVM对其进行了深度优化。从最初简单的重量级锁，演进到了包含无锁、偏向锁、轻量级锁和重量级锁的动态升级路径。这一智能的锁升级策略，结合自适应自旋、锁消除和锁粗化等JIT编译优化技术，使得 <code>Synchronized</code> 在绝大多数场景下都能提供非常出色的性能，不再是过去人们印象中的“性能瓶颈”。理解其背后的原理，有助于我们编写出更高效、更健壮的并发程序。</p>',12))])}const g=e(r,[["render",h]]),k=JSON.parse('{"path":"/8gu/Synchronized%E8%AF%A6%E8%A7%A3.html","title":"深入解析Synchronized：从互斥锁到锁升级与JVM优化","lang":"zh-CN","frontmatter":{"description":"深入解析Synchronized：从互斥锁到锁升级与JVM优化 Synchronized 是Java中用于解决多线程并发问题最基本也是最重要的关键字之一。它为并发编程提供了原子性、可见性和有序性的保证，是构建线程安全程序的基石。本文将详细阐述 Synchronized 的核心概念、锁升级的详细过程以及JVM为了提升其性能而采用的各种优化技术。 Sync...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入解析Synchronized：从互斥锁到锁升级与JVM优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-14T03:48:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/8gu/Synchronized%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"深入解析Synchronized：从互斥锁到锁升级与JVM优化"}],["meta",{"property":"og:description","content":"深入解析Synchronized：从互斥锁到锁升级与JVM优化 Synchronized 是Java中用于解决多线程并发问题最基本也是最重要的关键字之一。它为并发编程提供了原子性、可见性和有序性的保证，是构建线程安全程序的基石。本文将详细阐述 Synchronized 的核心概念、锁升级的详细过程以及JVM为了提升其性能而采用的各种优化技术。 Sync..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T03:48:22.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-14T03:48:22.000Z"}]]},"git":{"createdTime":1755143302000,"updatedTime":1755143302000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":1,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":8.37,"words":2510},"filePathRelative":"8gu/Synchronized详解.md","autoDesc":true}');export{g as comp,k as data};
