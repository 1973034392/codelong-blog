import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as i,b as n,r as t,o as h}from"./app-K9aAqEZ1.js";const p={};function k(r,s){const a=t("Mermaid");return h(),e("div",null,[s[0]||(s[0]=i('<h1 id="easypass项目api接口定制化防刷与数据存储策略详解" tabindex="-1"><a class="header-anchor" href="#easypass项目api接口定制化防刷与数据存储策略详解"><span>easypass项目API接口定制化防刷与数据存储策略详解</span></a></h1><h2 id="一、业务背景与挑战-为什么需要防刷" tabindex="-1"><a class="header-anchor" href="#一、业务背景与挑战-为什么需要防刷"><span>一、业务背景与挑战：为什么需要防刷？</span></a></h2><p>在当今的互联网应用中，特别是像电商秒杀、在线票务、稀缺医疗资源挂号等高并发、高热度的业务场景下，系统面临着一个严峻的挑战——<strong>防刷</strong>。</p><p>“防刷”指的是采取一系列技术手段，防止恶意用户或自动化脚本（即“黄牛”或“爬虫”）对应用程序的API接口进行大规模、高频率的恶意请求。这种行为不仅会抢占正常用户的资源，破坏业务公平性，还可能耗尽服务器资源，导致服务瘫痪，甚至引发数据泄露等安全问题。</p><p>因此，建立一套高效、灵活且可动态配置的防刷体系至关重要。它的核心目的在于：</p><ol><li><strong>保护服务器资源</strong>：防止因恶意请求消耗大量带宽、CPU和内存，保障正常用户的访问速度和体验。</li><li><strong>维护业务公平与经济利益</strong>：在票务、电商等领域，防止通过技术手段进行不公平的抢购，保护普通用户的权益和企业的商业利益。</li><li><strong>保障数据安全</strong>：防止恶意用户通过刷接口的方式批量抓取、泄露用户数据或其他敏感信息。</li><li><strong>确保服务可用性</strong>：避免因API被滥用导致服务达到限流阈值，影响服务的正常提供。</li><li><strong>增强系统安全性</strong>：高频请求往往是攻击的前奏，有效的防刷能抵御一部分探测性攻击，为系统安全筑起第一道防线。</li></ol><h3 id="防刷策略与微服务熔断的区别" tabindex="-1"><a class="header-anchor" href="#防刷策略与微服务熔断的区别"><span>防刷策略与微服务熔断的区别</span></a></h3><p>在微服务架构中，我们常常会使用 Hystrix 或 Sentinel 这样的熔断组件来保护系统。很多开发者容易将业务防刷与服务熔断混为一谈，但它们的定位和目标截然不同。</p><ul><li><strong>服务熔断</strong>：这是一种<strong>后端服务的自我保护机制</strong>。它的核心思想是“防止雪崩”，当某个下游服务出现故障或响应过慢时，为了避免整个系统的调用链路被拖垮，会暂时“熔断”对该服务的调用，快速失败并返回错误响应。它保护的是<strong>服务与服务之间的稳定性</strong>，是系统架构的最后一道防线，好比电路中的保险丝。</li><li><strong>业务防刷</strong>：这是一种<strong>面向业务逻辑的流量甄别与控制机制</strong>。它关注的是请求的“意图”和“行为模式”，旨在识别并拦截非法的、恶意的业务请求。它的策略通常更复杂、更灵活，例如：可以根据用户ID、IP地址、设备指纹等多个维度，在特定的时间窗口内（如“1分钟内请求超过20次”或“在某个特定活动期间，触发A行为的次数超过B次”）进行限制。</li></ul><p>简单来说，<strong>业务防刷是在“入口”处拦截坏人，而服务熔断是在“内部”防止一个环节的故障扩散到全局</strong>。我们需要的，正是一个能够在请求入口处就进行精细化、动态化管理的防刷系统。</p><h2 id="二、架构设计与技术选型" tabindex="-1"><a class="header-anchor" href="#二、架构设计与技术选型"><span>二、架构设计与技术选型</span></a></h2><p>经过深入分析，我们决定将防刷的核心逻辑部署在**API网关（Gateway）**层，并采用 <strong>Redis + Lua</strong> 的技术组合来实现。</p><h3 id="思考过程与选型理由" tabindex="-1"><a class="header-anchor" href="#思考过程与选型理由"><span>思考过程与选型理由</span></a></h3><ol><li><strong>为什么选择API网关？</strong> 网关是所有外部请求进入系统的唯一入口。在网关层实施防刷，可以将恶意流量在第一时间拦截在外，避免其穿透到后端的业务服务，从而极大地减轻了后端服务的压力。如果请求在网关层就被拒绝，它将不会消耗任何业务服务的计算资源，这是最理想的防护位置。</li><li><strong>为什么选择Redis？</strong> 防刷逻辑的核心是高频的读写和计数。我们需要一个性能极高的存储系统来实时记录和查询每个用户的请求频率。关系型数据库（如MySQL）显然无法承受如此高的QPS，而Redis基于内存的操作，具有纳秒级的响应速度，是实现高性能计数器的完美选择。即使在集群环境下，主从同步可能存在的微小数据延迟或丢失，对于防刷这种允许极小误差率的场景来说，是完全可以接受的。</li><li><strong>为什么结合使用Lua脚本？</strong> 防刷的判断逻辑通常不是单一的“读取-比较-写入”，而是一系列复合操作。例如，“读取当前请求次数，加一，判断是否超限，如果超限则设置一个锁定标记”。如果将这些操作通过多个Redis命令从客户端发送，会产生多次网络I/O，并且无法保证操作的原子性。在高并发下，可能会出现数据不一致的问题。 而将这一系列逻辑封装在一个Lua脚本中，发送给Redis执行，可以确保所有操作在Redis服务端<strong>原子性地</strong>完成。这不仅消除了多次网络往返的开销，极大地提升了性能，也保证了在高并发场景下逻辑的正确性。</li></ol><h3 id="整体实现方案" tabindex="-1"><a class="header-anchor" href="#整体实现方案"><span>整体实现方案</span></a></h3><p>我们的防刷体系分为策略执行和数据存储两大部分，通过RocketMQ进行解耦，确保了高性能和高可用性。</p><ol><li><strong>策略配置与同步</strong>：在<code>easypass-customize</code>服务中提供管理界面，用于配置普通防刷规则和深度防刷规则。这些规则被持久化到数据库中，并在任何更新后，实时同步到Redis的Hash结构中，供网关层读取。</li><li><strong>网关层策略执行</strong>： <ul><li>在<code>easypass-gateway</code>服务中，配置需要进行防刷的API路径。</li><li>当一个请求到达网关时，检查其URL是否在受保护的路径列表中。</li><li>如果是，则从Redis中获取该URL对应的防刷规则。</li><li>根据规则类型（普通/深度），构建参数并调用Lua脚本在Redis中执行判断。</li></ul></li><li><strong>异步数据记录</strong>： <ul><li>如果Lua脚本判断请求触发了限制，网关会立即拒绝该请求，并向RocketMQ发送一条消息，记录下这次被拦截的请求详情。</li><li>这个过程是异步的，发送消息的成败不影响对用户的快速响应。</li></ul></li><li><strong>后端数据消费与存储</strong>： <ul><li><code>easypass-customize</code>服务作为消费者，订阅RocketMQ中的防刷记录主题。</li><li>消费到消息后，将其解析并存入数据库。为了防止消息重复消费导致的数据冗余，我们引入了幂等性控制机制。</li></ul></li></ol><p>下面是此方案的整体架构图：</p>',18)),n(a,{code:"eJyNlG9P2kAcx5/7Ki6YLCUZkImbkQdL/JMtS1yyOfeoMabQIo0IDS06Z5aggYlTECcaVObi/2UKuOlEZcQ3412Pd7Frr4WCmnlP6N39Pl9+971vOxrhpAAY6m8DZMhRL53b1OwPlCyrRyWbvqGNvqAohBQWFnfojgvNnKP4Eo5voPzxsF4mhPi2FqGeN6/U6jJMnAJG4OQpiZNlxyinCJPclL1VGzgcwAaXlvGfMsFwqYx+zQIXJ4kuiVMCNrL9HLykbJ005jr6xAnQbgx9338/OIByJZg5qOVjtdxvmCxTuC8g+MYGo0FhGh/GYXKdVn9qtGHu63IdTnBTSQ8KvCjjUgUurVGISunLLKP/2Onpbyu4SUPzh3h7cSDKUZ/w9SaZwuQeWitYhOq8PtPZTifA11m4uUWL1coK2soDphbbwNdzLrTwVa18s7cc6542qJN454hSFOoNhn1j03TFsPoRgCspeJWtZddxqXSfLbSY9kGlXoQjk1yEZ3H1WLu9uVOYSZOAoHwKftlueKP/oy7x1Ang31lU2CfltdgMWjhAyZ+4eAKrq4YppFJQXr9lGZv5CIbCkujzAJmbEEZIJkZ4TuFshvV3BM/aQyNoRqvUAY4oh/h3QmRC9AnszcUGKW1tuiFIg6QWt9XM55uLNFo9QakiLbdk2xeVlfC4+FGwpFsbPfy4GGIpDZdzw7oPtURKrRapsDVcPZKo2d0XDvnFUYa8C7QQpYlhu/ZmXWupLoo2z9DaiVWuv5dlaLvwasUS1rt5mFkkN3Mr601U/VI04BlJ+XkSn13ef49EXo6OCxHGXKAAjiWaT9Nar+t3kbRczqqFebgX19zLpGEhBxP79SOZp6xLaXFojoUyRdJrfiv8YjDoafd3+x/LSiQ8Jnja3W638eyYFHkl4OmQPlhA+lYamL+bjAeTplEm7HV3dj0U7u81MK/3P63+Ayh8Txg="}),s[1]||(s[1]=i(`<h2 id="三、核心实现-api接口防刷策略" tabindex="-1"><a class="header-anchor" href="#三、核心实现-api接口防刷策略"><span>三、核心实现：API接口防刷策略</span></a></h2><h3 id="_1-规则检查与参数构建" tabindex="-1"><a class="header-anchor" href="#_1-规则检查与参数构建"><span>1. 规则检查与参数构建</span></a></h3><p>当一个受保护的API请求进入网关时，<code>ApiRestrictService#apiRestrict</code>方法会被触发。它的核心职责是：从Redis中加载规则，构建执行Lua脚本所需的参数，然后调用脚本并处理其返回结果。</p><h4 id="规则参数查询与构建流程" tabindex="-1"><a class="header-anchor" href="#规则参数查询与构建流程"><span>规则参数查询与构建流程</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>graph TD</span></span>
<span class="line"><span>    A[请求进入网关] --&gt; B{检查URL是否在防刷列表?};</span></span>
<span class="line"><span>    B -- 否 --&gt; C[放行];</span></span>
<span class="line"><span>    B -- 是 --&gt; D[获取客户端IP和用户ID];</span></span>
<span class="line"><span>    D --&gt; E[构建通用Key (IP_UserID_URL)];</span></span>
<span class="line"><span>    E --&gt; F[从Redis HASH中查询普通规则和深度规则];</span></span>
<span class="line"><span>    F --&gt; G{规则是否存在?};</span></span>
<span class="line"><span>    G -- 否 --&gt; C;</span></span>
<span class="line"><span>    G -- 是 --&gt; H[构建普通规则参数(JSONObject)];</span></span>
<span class="line"><span>    H --&gt; I{是否存在深度规则?};</span></span>
<span class="line"><span>    I -- 否 --&gt; K[调用Lua脚本(仅普通规则)];</span></span>
<span class="line"><span>    I -- 是 --&gt; J[追加深度规则参数到JSONObject];</span></span>
<span class="line"><span>    J --&gt; L[调用Lua脚本(普通+深度规则)];</span></span>
<span class="line"><span>    K --&gt; M{Lua返回结果: 是否触发限制?};</span></span>
<span class="line"><span>    L --&gt; M;</span></span>
<span class="line"><span>    M -- 是 --&gt; N[抛出异常, 拒绝请求, 异步记录日志];</span></span>
<span class="line"><span>    M -- 否 --&gt; C;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="java核心代码" tabindex="-1"><a class="header-anchor" href="#java核心代码"><span>Java核心代码</span></a></h4><p>（此部分代码与之前版本相同，保持不变）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>// com.easypass.service.ApiRestrictService#apiRestrict</span></span>
<span class="line"><span>public void apiRestrict(String id, String url, ServerHttpRequest request) {</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-原子化规则判断-lua脚本详解" tabindex="-1"><a class="header-anchor" href="#_2-原子化规则判断-lua脚本详解"><span>2. 原子化规则判断：Lua脚本详解</span></a></h3><p>（此部分Lua脚本与之前版本相同，保持不变）</p><h4 id="lua脚本执行流程" tabindex="-1"><a class="header-anchor" href="#lua脚本执行流程"><span>Lua脚本执行流程</span></a></h4>`,11)),n(a,{code:"eJx1VNtOGlEUffcrTnhqE32wrw2aivcLWLEP7cQYKhM0odpwSdoQE2qpQpRLowLKVIoXIFWQWoPKpf4M+8zwFz1zzsAcRztvs2df1l57rXF5HB+X0fxwDyKP1/+evZum/Q4ldIilC2gEobBtop/V55WAY2d4rzppt1khvoH3K3BXVQon+CixgPr6BtCQAJd3+KDcDh4qhRCED+TDkFLOkcQp8TNCOFJQcjsTVsvc0FvUv/Cy23iIVlsCOH0JiXw7n8QXOVY3iJbW/Ks+ZDaj/nW9wEIKEMmmdcNC67bWHaOU/8rNsnK/haUsTlXbqWtuEK0jI2jdiB4fNgZGAtDchUiUtYVgg0FDA2bE9munwyTagUfCvmWP6F1eczvXaa9RvdcoD3Ys0D5IQLiqEsJ6ws0VlNIgFQe5Bcd4oOMChDNQr3UrVdofrYl6EQv6PCsul+hZXHK43Yt2n8Nn7u9FUNkkF1V5LeQh/l0pV6C5D+GKfc3jE53ILvo4muj0DuIJQm8U70ZbTYlLGWffDFt2EHPxCRqYFB5iI1z53RSYkivKpzVCAgPGdtQGiavOHoM48c1vqOWZuiB8ipMl9AzyG/hIYiQ+1+U6SSdPaZfsko2lCC9RNpDnforffk6QM9dE9sr9HmSOCI8E6PH54wYcNbS+w8S00P4ShdgmjgTVwRx6rmKaps50kNJzanilIs4m+DJiKZYg/0pB/AQ2v/HYZ3jsVkJ6Ti6ncOnU0EGuZ1Vl0z7KzlfI8Cax0mKb0Grey3vFdxbbG+s8zp4pl8e6WMjdYjcQT6qtuS4EjdH+9KpEd8RG3AwbnTEb4D9zFqNoNYtx283y273WXKEld7xhdIGutMe+eKEmq0b4IHq9Dpe4uLLqFD/1IjlUhURMPt+G6B92eA46BdE9r4H6J+LqcZGJqUCu7+IfWRNT1v81LgXlepgN1uU8JxAPP9zqiZ3kUgTi6fZWHP9sQCMOO0nyc6Q/7FJKvsi3bq+0hbrD/wGz/sSH"}),s[2]||(s[2]=i(`<h4 id="lua脚本代码" tabindex="-1"><a class="header-anchor" href="#lua脚本代码"><span>Lua脚本代码</span></a></h4><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-lua"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- Lua脚本接收一个包含所有参数的JSON字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> apiRule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cjson</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">decode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KEYS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- ...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 最终返回JSON格式的结果</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> string.format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;{&quot;triggerResult&quot;:%d,&quot;triggerCallStat&quot;:%d,&quot;apiCount&quot;:%d,&quot;threshold&quot;:%d,&quot;messageIndex&quot;:%d}&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">trigger_result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">trigger_call_Stat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">api_count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">threshold</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">message_index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、异步解耦-防刷数据的存储策略-rocketmq实现" tabindex="-1"><a class="header-anchor" href="#四、异步解耦-防刷数据的存储策略-rocketmq实现"><span>四、异步解耦：防刷数据的存储策略 (RocketMQ实现)</span></a></h2><p>当网关成功拦截一个恶意请求后，我们需要将这次事件记录下来用于后续的审计和分析。如果同步写入数据库，会严重影响网关的响应性能。因此，我们采用<strong>RocketMQ消息队列</strong>来实现<strong>异步解耦</strong>。</p><h3 id="_1-生产者-gateway" tabindex="-1"><a class="header-anchor" href="#_1-生产者-gateway"><span>1. 生产者（Gateway）</span></a></h3><p>网关作为生产者，在确认一个请求被拦截后，会构建一个包含详细信息的DTO对象，并将其序列化为JSON字符串，通过<code>RocketMQTemplate</code>发送到指定的Topic。</p><h4 id="依赖引入-pom-xml" tabindex="-1"><a class="header-anchor" href="#依赖引入-pom-xml"><span>依赖引入 (pom.xml)</span></a></h4><p>首先，需要引入RocketMQ的Spring Boot Starter。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.apache.rocketmq&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;rocketmq-spring-boot-starter&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.2.2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rocketmq生产者配置-easypass-gateway-service" tabindex="-1"><a class="header-anchor" href="#rocketmq生产者配置-easypass-gateway-service"><span>RocketMQ生产者配置 (<code>easypass-gateway-service</code>)</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rocketmq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">127.0.0.1:9876</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # RocketMQ NameServer地址</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">easypass-gateway-producer-group</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 生产者组名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 自定义Topic配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">easypass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  rocketmq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    topic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">save_api_data_topic</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 定义Topic名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="消息发送逻辑" tabindex="-1"><a class="header-anchor" href="#消息发送逻辑"><span>消息发送逻辑</span></a></h4><p>消息发送的逻辑需要适配<code>RocketMQTemplate</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// com.easypass.gateway.config.MessageProducerConfig.java</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当配置文件中存在rocketmq.name-server时，此配置类生效</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ConditionalOnProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rocketmq.name-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MessageProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ApiDataMessageSend</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> apiDataMessageSend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RocketMQTemplate</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> rocketMQTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                 @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${easypass.rocketmq.topic}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> topic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ApiDataMessageSend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rocketMQTemplate, topic);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// com.easypass.gateway.message.ApiDataMessageSend.java</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">AllArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ApiDataMessageSend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RocketMQTemplate</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rocketMQTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> topic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sendMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sendMessage via RocketMQ, topic: {}, message : {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, topic, message);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用convertAndSend发送普通消息</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        rocketMQTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">convertAndSend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(topic, message);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// com.easypass.gateway.service.impl.ApiRestrictServiceImpl#saveApiData</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 此方法保持不变，它会调用注入的ApiDataMessageSend实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> saveApiData</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServerHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> apiUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> type){</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ApiDataDto</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> apiDataDto </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ApiDataDto</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    apiDataDto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">uidGenerator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getUid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ... (DTO属性设置与之前相同)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 通过注入的发送器实例发送消息</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ofNullable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(apiDataMessageSend).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ifPresent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(send </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sendMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toJSONString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(apiDataDto))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-消费者-customize-service-与幂等性保证" tabindex="-1"><a class="header-anchor" href="#_2-消费者-customize-service-与幂等性保证"><span>2. 消费者（Customize Service）与幂等性保证</span></a></h3><p><code>easypass-customize-service</code>作为消费者，通过实现<code>RocketMQListener</code>接口来监听<code>save_api_data_topic</code>主题。保证幂等性的逻辑与之前相同，依然是在消费方法上使用自定义的<code>@RepeatExecuteLimit</code>注解。</p><h4 id="rocketmq消费者配置-easypass-customize-service" tabindex="-1"><a class="header-anchor" href="#rocketmq消费者配置-easypass-customize-service"><span>RocketMQ消费者配置 (<code>easypass-customize-service</code>)</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rocketmq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">127.0.0.1:9876</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # RocketMQ NameServer地址</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  consumer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 注意：具体的消费者组和Topic在监听器注解中指定</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 这里可以留空或配置默认值</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">easypass-customize-consumer-group-default</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="消息消费与幂等处理" tabindex="-1"><a class="header-anchor" href="#消息消费与幂等处理"><span>消息消费与幂等处理</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// com.easypass.customize.consumer.ApiDataMessageConsumer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 配置RocketMQ监听器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RocketMQMessageListener</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    topic</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;\${easypass.rocketmq.topic:save_api_data_topic}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 监听的Topic</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    consumerGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;easypass-customize-consumer-group&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 消费者组</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ApiDataMessageConsumer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RocketMQListener</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ApiDataService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> apiDataService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;onMessage from RocketMQ: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, message);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            ApiData</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> apiData</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(message, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ApiData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 调用带有幂等控制的Service方法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            apiDataService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">saveApiData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(apiData);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;consumerApiDataMessage from RocketMQ error&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, e);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 这里可以根据业务需求决定是否抛出异常以触发重试</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// com.easypass.customize.service.impl.ApiDataServiceImpl</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 此方法保持不变，幂等逻辑与消息中间件无关</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RepeatExecuteLimit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> RepeatExecuteLimitConstants</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONSUMER_API_DATA_MESSAGE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> keys</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#apiData.id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> saveApiData</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ApiData</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> apiData){</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ApiData</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dbApiData </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> apiDataMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">selectById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">apiData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isNull</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dbApiData)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;saveApiData apiData:{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toJSONString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(apiData));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        apiDataMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(apiData);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-数据表结构" tabindex="-1"><a class="header-anchor" href="#_3-数据表结构"><span>3. 数据表结构</span></a></h3><p>（数据表结构与之前版本相同，保持不变）</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">api_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\` (</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  \`id\`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bigint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;主键id (由分布式ID生成器提供)&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  -- ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">InnoDB </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">utf8mb4 COMMENT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;API防刷拦截记录表&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、方案亮点总结" tabindex="-1"><a class="header-anchor" href="#五、方案亮点总结"><span>五、方案亮点总结</span></a></h2><p>本套API接口定制化防刷策略，通过精心设计和技术整合，实现了高性能、高灵活性和高可用性的目标。其核心亮点包括：</p><ul><li><strong>极致的性能</strong>：防刷核心逻辑前置于API网关，并利用Redis的高速读写能力和Lua脚本的原子化执行，将性能损耗降到最低，确保对正常业务请求的影响微乎其微。</li><li><strong>灵活的规则配置</strong>：支持普通规则（单一时间窗口计数）和深度规则（基于普通规则触发频率的复合时间窗口计数）的组合，可以应对从简单到复杂的各种防刷场景，并且规则修改后能实时生效。</li><li><strong>异步化与系统解耦</strong>：通过引入<strong>RocketMQ</strong>消息队列，将防刷日志的记录与核心的拦截逻辑解耦。这不仅提升了网关的响应速度和健壮性，也为后续扩展数据处理（如实时监控、数据分析）提供了可能。</li><li><strong>高可靠性保证</strong>：在数据消费端，通过自定义幂等组件和数据库查询的双重保障，有效防止了重复消费问题，确保了数据的一致性和准确性。</li><li><strong>先进的技术栈应用</strong>：综合运用了Redis的多种数据结构（Hash、String、Sorted Set）、Lua脚本编程、RocketMQ消息队列以及自定义AOP等多种技术，是微服务架构下解决同类问题的优秀实践。</li></ul>`,26))])}const A=l(p,[["render",k]]),c=JSON.parse('{"path":"/projects/easypass/API%E6%8E%A5%E5%8F%A3%E5%AE%9A%E5%88%B6%E5%8C%96%E9%98%B2%E5%88%B7%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3.html","title":"easypass项目API接口定制化防刷与数据存储策略详解","lang":"zh-CN","frontmatter":{"description":"easypass项目API接口定制化防刷与数据存储策略详解 一、业务背景与挑战：为什么需要防刷？ 在当今的互联网应用中，特别是像电商秒杀、在线票务、稀缺医疗资源挂号等高并发、高热度的业务场景下，系统面临着一个严峻的挑战——防刷。 “防刷”指的是采取一系列技术手段，防止恶意用户或自动化脚本（即“黄牛”或“爬虫”）对应用程序的API接口进行大规模、高频率的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"easypass项目API接口定制化防刷与数据存储策略详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-14T02:11:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/projects/easypass/API%E6%8E%A5%E5%8F%A3%E5%AE%9A%E5%88%B6%E5%8C%96%E9%98%B2%E5%88%B7%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"easypass项目API接口定制化防刷与数据存储策略详解"}],["meta",{"property":"og:description","content":"easypass项目API接口定制化防刷与数据存储策略详解 一、业务背景与挑战：为什么需要防刷？ 在当今的互联网应用中，特别是像电商秒杀、在线票务、稀缺医疗资源挂号等高并发、高热度的业务场景下，系统面临着一个严峻的挑战——防刷。 “防刷”指的是采取一系列技术手段，防止恶意用户或自动化脚本（即“黄牛”或“爬虫”）对应用程序的API接口进行大规模、高频率的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T02:11:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-14T02:11:18.000Z"}]]},"git":{"createdTime":1755137478000,"updatedTime":1755137478000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":1,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":12.93,"words":3880},"filePathRelative":"projects/easypass/API接口定制化防刷与数据存储策略详解.md","autoDesc":true}');export{A as comp,c as data};
