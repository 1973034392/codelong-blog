import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-XFWbsyPu.js";const e={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="系统分库分表策略" tabindex="-1"><a class="header-anchor" href="#系统分库分表策略"><span>系统分库分表策略</span></a></h1><h2 id="_1-核心思想" tabindex="-1"><a class="header-anchor" href="#_1-核心思想"><span>1. 核心思想</span></a></h2><p>为了应对高并发和海量数据存储的挑战，我们引入了数据库分库分表机制。通过将数据水平拆分到不同的数据库和表中，可以有效分散系统负载，提高查询效率和系统的可扩展性。本项目采用 <code>ShardingSphere</code> 作为分库分表的中间件，根据不同业务服务的特点，设计了定制化的分片策略。</p><h2 id="_2-用户服务分库分表策略" tabindex="-1"><a class="header-anchor" href="#_2-用户服务分库分表策略"><span>2. 用户服务分库分表策略</span></a></h2><p>用户服务是系统的核心，其分库分表策略需要同时兼顾用户ID查询和通过手机号/邮箱登录的场景。为此，我们采用了 <strong>“主表分片 + 辅助表路由”</strong> 的方案。</p><h3 id="_2-1-shardingsphere-配置-shardingsphere-user-yaml" tabindex="-1"><a class="header-anchor" href="#_2-1-shardingsphere-配置-shardingsphere-user-yaml"><span>2.1. ShardingSphere 配置 (<code>shardingsphere-user.yaml</code>)</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 分库分表规则</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!SHARDING</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tables</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 用户主表: 按 id 取模分片</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      d_user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        actualDataNodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ds_\${0..1}.d_user_\${0..1}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        databaseStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">databaseUserModModel</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        tableStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tableUserModModel</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 用户手机号辅助表: 按 mobile 哈希取模分片</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      d_user_mobile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        actualDataNodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ds_\${0..1}.d_user_mobile_\${0..1}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        databaseStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">mobile</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">databaseUserMobileHashModModel</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        tableStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">mobile</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tableUserMobileHashMod</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 购票人表: 按 user_id 取模分片，与用户表保持数据亲和性</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      d_ticket_user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        actualDataNodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ds_\${0..1}.d_ticket_user_\${0..1}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        databaseStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">user_id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">databaseTicketUserModModel</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        tableStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">user_id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tableTicketUserModModel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 具体的算法定义</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    shardingAlgorithms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # d_user 和 d_ticket_user 使用 MOD 算法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      databaseUserModModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">MOD</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      tableUserModModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">MOD</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      databaseTicketUserModModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">MOD</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      tableTicketUserModModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">MOD</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # d_user_mobile 使用 HASH_MOD 算法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      databaseUserMobileHashModModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HASH_MOD</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      tableUserMobileHashMod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HASH_MOD</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-策略详解" tabindex="-1"><a class="header-anchor" href="#_2-2-策略详解"><span>2.2. 策略详解</span></a></h3><ul><li><strong>核心表分片</strong>: <ul><li><strong><code>d_user</code> (用户主表)</strong>: 使用 <code>id</code> 作为分片键，并采用 <code>MOD</code> (取模) 算法。这保证了基于用户ID的查询能够被精确定位到单个库和表，性能极高。</li><li><strong><code>d_ticket_user</code> (购票人表)</strong>: 使用 <code>user_id</code> 作为分片键和 <code>MOD</code> 算法。这确保了同一用户及其所有购票人的数据被存储在同一分片上，便于进行关联查询，实现了数据亲和性。</li></ul></li><li><strong>辅助表路由方案</strong>: <ul><li><strong>问题</strong>: 如果直接使用 <code>mobile</code> 或 <code>email</code> 查询以 <code>id</code> 分片的 <code>d_user</code> 表，ShardingSphere无法定位数据，将触发 <strong>“全路由”</strong>（扫描所有分片），导致性能灾难。</li><li><strong>解决方案</strong>: 创建 <code>d_user_mobile</code> 和 <code>d_user_email</code> 辅助表。 <ul><li>这两张表分别使用 <code>mobile</code> 和 <code>email</code> 作为分片键，并采用 <code>HASH_MOD</code> 算法。<code>HASH_MOD</code> 能将字符串类型的分片键（如手机号）均匀地散列到各个分片，避免数据倾斜。</li><li><strong>工作流程</strong>: 登录时，先根据 <code>mobile</code> 精准查询 <code>d_user_mobile</code> 表得到 <code>user_id</code>，再用 <code>user_id</code> 精准查询 <code>d_user</code> 表，从而避免了全路由。</li></ul></li><li><strong>代价</strong>: 这种方案以增加一次查询和额外的存储为代价，换取了核心登录业务的高性能和系统的可扩展性。</li></ul></li></ul><h2 id="_3-节目服务分库分表策略" tabindex="-1"><a class="header-anchor" href="#_3-节目服务分库分表策略"><span>3. 节目服务分库分表策略</span></a></h2><p>节目服务的数据具有明显的聚合性，即场次、座位等信息都围绕“节目”这一核心实体。策略核心是保证与同一节目相关的数据存储在一起。</p><h3 id="_3-1-shardingsphere-配置-shardingsphere-program-yaml" tabindex="-1"><a class="header-anchor" href="#_3-1-shardingsphere-配置-shardingsphere-program-yaml"><span>3.1. ShardingSphere 配置 (<code>shardingsphere-program.yaml</code>)</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!SHARDING</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tables</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 节目主表: 按 id 分片</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      d_program</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        actualDataNodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ds_\${0..1}.d_program_\${0..1}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        databaseStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">databaseProgramModModel</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        tableStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tableProgramModModel</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 节目相关表: 按 program_id 分片</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      d_seat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        actualDataNodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ds_\${0..1}.d_seat_\${0..1}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        databaseStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">program_id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">databaseSeatModModel</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        tableStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">program_id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tableSeatModModel</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 广播表: 在所有库中都有一份完整数据</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    broadcastTables</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">d_program_category</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    shardingAlgorithms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      databaseProgramModModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">MOD</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # ... 其他表的算法定义类似</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-策略详解" tabindex="-1"><a class="header-anchor" href="#_3-2-策略详解"><span>3.2. 策略详解</span></a></h3><ul><li><strong>关联分片</strong>: <code>d_program</code> 表使用其主键 <code>id</code> 分片，而其所有附属表（如 <code>d_program_show_time</code>, <code>d_seat</code> 等）都使用外键 <code>program_id</code> 作为分片键。所有表都使用相同的 <code>MOD</code> 算法。这确保了查询某一节目及其所有相关信息时，所有SQL操作都会被路由到同一个物理分片，避免了跨库<code>JOIN</code>，性能极佳。</li><li><strong>广播表</strong>: <code>d_program_category</code> (节目分类表) 数据量小、变动少且被频繁引用。将其设为广播表，会在每个物理库中都冗余一份全量数据。这样，任何分片在需要关联分类信息时，都可以在本地库完成，极大地提升了查询效率。</li></ul><h2 id="_4-订单服务分库分表策略-分片基因法" tabindex="-1"><a class="header-anchor" href="#_4-订单服务分库分表策略-分片基因法"><span>4. 订单服务分库分表策略 (分片基因法)</span></a></h2><p>订单服务需要同时支持通过 <code>order_number</code> (订单号) 和 <code>user_id</code> (用户ID) 进行高效查询。为解决此问题，我们采用了创新的 <strong>“分片基因法”</strong>，无需引入辅助表。</p><h3 id="_4-1-shardingsphere-配置-shardingsphere-order-yaml" tabindex="-1"><a class="header-anchor" href="#_4-1-shardingsphere-配置-shardingsphere-order-yaml"><span>4.1. ShardingSphere 配置 (<code>shardingsphere-order.yaml</code>)</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!SHARDING</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tables</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 订单表: 采用复合分片键和自定义算法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      d_order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        actualDataNodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ds_\${0..1}.d_order_\${0..3}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        databaseStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          complex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">order_number,user_id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">databaseOrderComplexGeneArithmetic</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        tableStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          complex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">order_number,user_id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tableOrderComplexGeneArithmetic</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 绑定表: d_order 和 d_order_ticket_user 使用完全相同的分片逻辑</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    bindingTables</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">d_order,d_order_ticket_user</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    shardingAlgorithms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 分库算法: 自定义CLASS_BASED类型</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      databaseOrderComplexGeneArithmetic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">CLASS_BASED</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          table-sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">complex</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          algorithmClassName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">com.codelong.shardingsphere.DatabaseOrderComplexGeneArithmetic</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 分表算法: 自定义CLASS_BASED类型</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      tableOrderComplexGeneArithmetic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">CLASS_BASED</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">complex</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          algorithmClassName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">com.codelong.shardingsphere.TableOrderComplexGeneArithmetic</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-算法详解" tabindex="-1"><a class="header-anchor" href="#_4-2-算法详解"><span>4.2. 算法详解</span></a></h3><p><strong>核心思想</strong>: 在生成 <code>order_number</code> 时，将 <code>user_id</code> 对分表数取模的结果（即“基因”）嵌入到 <code>order_number</code> 的低位。这样 <code>order_number</code> 就携带了 <code>user_id</code> 的分片信息。</p><h4 id="_4-2-1-分表算法-tableordercomplexgenearithmetic-java" tabindex="-1"><a class="header-anchor" href="#_4-2-1-分表算法-tableordercomplexgenearithmetic-java"><span>4.2.1. 分表算法 (<code>TableOrderComplexGeneArithmetic.java</code>)</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TableOrderComplexGeneArithmetic</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ComplexKeysShardingAlgorithm</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> shardingCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 分表数量, e.g., 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Properties</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        shardingCount </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sharding-count&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doSharding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">allActualSplitTableNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ComplexKeysShardingValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">complexKeysShardingValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Collection</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">columnNameAndShardingValuesMap</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> complexKeysShardingValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getColumnNameAndShardingValuesMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Collection</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">orderNumberValues</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> columnNameAndShardingValuesMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;order_number&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Collection</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">userIdValues</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> columnNameAndShardingValuesMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user_id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> shardingValue</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CollectionUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isNotEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(orderNumberValues)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            shardingValue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> orderNumberValues</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findFirst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CollectionUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isNotEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(userIdValues)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            shardingValue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> userIdValues</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findFirst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nonNull</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(shardingValue)) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // (shardingCount - 1) &amp; shardingValue 是 value % shardingCount 的高效写法</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 由于基因法的设计，order_number 和 user_id 计算出的结果是相同的</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tableName</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> complexKeysShardingValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getLogicTableName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;_&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((shardingCount </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> shardingValue);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Collections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">singletonList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tableName);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 如果没有分片键，则全路由</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> allActualSplitTableNames;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>逻辑剖析</strong>:</p><ol><li>算法检查查询条件中是提供了 <code>order_number</code> 还是 <code>user_id</code>。</li><li>无论使用哪个值，都对其进行取模运算 <code>value % 4</code> 来确定分表索引。</li><li>因为 <code>order_number</code> 中已嵌入了 <code>user_id</code> 的分片信息，所以 <code>order_number % 4</code> 的结果与 <code>user_id % 4</code> 恒等，从而总能定位到正确的物理表。</li></ol><h4 id="_4-2-2-分库算法-databaseordercomplexgenearithmetic-java" tabindex="-1"><a class="header-anchor" href="#_4-2-2-分库算法-databaseordercomplexgenearithmetic-java"><span>4.2.2. 分库算法 (<code>DatabaseOrderComplexGeneArithmetic.java</code>)</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DatabaseOrderComplexGeneArithmetic</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ComplexKeysShardingAlgorithm</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> databaseCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 分库数量, e.g., 2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tableShardingCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 分表数量, e.g., 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ... init a an doSharding methods are similar to table sharding ...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // The core logic is in calculateDatabaseIndex</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculateDatabaseIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> databaseCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> splicingKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> tableCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 1. 将分片键 (order_number 或 user_id) 转为二进制</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> splicingKeyBinary</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toBinaryString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(splicingKey);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 2. 计算基因长度 (分表数需要多少个二进制位来表示)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // e.g., 4个表需要 log2(4) = 2位</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> replacementLength</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tableCount) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 3. 从二进制字符串的末尾截取基因</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // e.g., 截取最后2位</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> geneBinaryStr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> splicingKeyBinary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">substring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">splicingKeyBinary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) replacementLength);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">StringUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isNotEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(geneBinaryStr)) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 4. 对基因字符串进行高质量哈希，使其分布更均匀</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> geneOptimizeHashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> geneBinaryStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 5. 对分库数取模，得到分库索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (databaseCount </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> geneOptimizeHashCode;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FrameException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">BaseCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">NOT_FOUND_GENE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>逻辑剖析</strong>:</p><ol><li><strong>提取基因</strong>: 算法从分片键的二进制表示中，提取出代表分表信息的“基因”（即末尾的几位）。</li><li><strong>哈希基因</strong>: 对提取出的基因字符串进行哈希处理。这里借鉴了 <code>HashMap</code> 的思想，通过 <code>^ (h &gt;&gt;&gt; 16)</code> 操作（高16位与低16位异或），让哈希值分布更均匀，避免数据倾斜。</li><li><strong>定位分库</strong>: 将哈希后的值对分库数取模，最终确定数据所在的物理库。这个方法保证了同一个用户的订单大概率会落入同一个库中，同时通过订单号也能直接定位。</li></ol><h2 id="_5-支付服务分库分表策略" tabindex="-1"><a class="header-anchor" href="#_5-支付服务分库分表策略"><span>5. 支付服务分库分表策略</span></a></h2><p>支付服务的业务逻辑相对直接，核心是围绕唯一的外部订单号进行操作。</p><h3 id="_5-1-shardingsphere-配置-shardingsphere-pay-yaml" tabindex="-1"><a class="header-anchor" href="#_5-1-shardingsphere-配置-shardingsphere-pay-yaml"><span>5.1. ShardingSphere 配置 (<code>shardingsphere-pay.yaml</code>)</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!SHARDING</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tables</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:    </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      d_pay_bill</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        actualDataNodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ds_\${0..1}.d_pay_bill_\${0..1}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        databaseStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">out_order_no</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">databasePayHashModModel</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        tableStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingColumn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">out_order_no</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            shardingAlgorithmName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tablePayHashModModel</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    shardingAlgorithms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      databasePayHashModModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HASH_MOD</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      tablePayHashModModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HASH_MOD</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          sharding-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-策略详解" tabindex="-1"><a class="header-anchor" href="#_5-2-策略详解"><span>5.2. 策略详解</span></a></h3><ul><li><strong><code>d_pay_bill</code> (支付流水表)</strong> 和 <strong><code>d_refund_bill</code> (退款流水表)</strong> 都使用 <code>out_order_no</code> (外部订单号) 作为分片键。</li><li><strong><code>HASH_MOD</code> 算法</strong>: 由于订单号通常是字符串且不具备连续性，使用 <code>HASH_MOD</code> 算法可以将其哈希后均匀地分布到各个分片，是处理此类字符串键的理想选择。该策略简单、高效，完全满足支付业务的需求。</li></ul><h1 id="深度解析-分片基因法" tabindex="-1"><a class="header-anchor" href="#深度解析-分片基因法"><span>深度解析：分片基因法</span></a></h1><h2 id="_1-问题的根源-无法兼得的查询维度" tabindex="-1"><a class="header-anchor" href="#_1-问题的根源-无法兼得的查询维度"><span>1. 问题的根源：无法兼得的查询维度</span></a></h2><p>在设计订单这类核心系统时，一个经典的数据库挑战浮出水面：系统必须同时高效地支持两种关键查询。</p><ol><li><strong>按 <code>order_number</code> 查询</strong>：这是单点查询，要求毫秒级响应，常见于支付回调、客服查找等场景。</li><li><strong>按 <code>user_id</code> 查询</strong>：这是列表查询，用于“我的订单”页面，要求快速返回一个用户的所有订单。</li></ol><p>传统的单一分片键策略在这里会“失灵”。</p><ul><li><strong>若以 <code>user_id</code> 分片</strong>：按 <code>order_number</code> 查询时，系统不知道订单在哪，只能扫描所有分片（即“全路由”），引发性能灾难。</li><li><strong>若以 <code>order_number</code> 分片</strong>：按 <code>user_id</code> 查询时，同样会触发“全路由”。</li></ul><p>“分片基因法”提供了一种不依赖额外辅助表，却能优雅解决此问题的创新方案。</p><h2 id="_2-核心思想-让id-开口说话" tabindex="-1"><a class="header-anchor" href="#_2-核心思想-让id-开口说话"><span>2. 核心思想：让ID“开口说话”</span></a></h2><p>分片基因法的哲学思想是：<strong>与其通过外部映射查找路由信息，不如让ID本身就携带路由信息。</strong></p><p>我们可以将此过程类比为生物遗传学：</p><ul><li><strong>“基因” (Gene)</strong>：我们将 <code>user_id</code> 经过特定算法计算出的 <strong>分表位置信息</strong>，视为一段“基因”。</li><li><strong>“注入” (Injection)</strong>：在订单创建、生成 <code>order_number</code> 的那一刻，我们通过精巧的位运算，将这段“基因”<strong>无缝地嵌入</strong>到 <code>order_number</code> 的二进制结构中。</li><li><strong>“表达” (Expression)</strong>：如此一来，<code>order_number</code> 就不再是一个无意义的数字，而是一个“活”的ID。只要拿到它，分片算法就能从中“读取”出与它关联的 <code>user_id</code> 的分片信息，从而实现精准路由。</li></ul><h2 id="_3-实现全景剖析" tabindex="-1"><a class="header-anchor" href="#_3-实现全景剖析"><span>3. 实现全景剖析</span></a></h2><p>我们以 <strong>2个数据库分库</strong>、<strong>4个订单表分表</strong> (<code>d_order_0</code> 至 <code>d_order_3</code>) 的场景为例，完整地走一遍流程。</p><h3 id="第-1-步-基因的注入-id生成时" tabindex="-1"><a class="header-anchor" href="#第-1-步-基因的注入-id生成时"><span>第 1 步：基因的注入（ID生成时）</span></a></h3><p>这是整个魔法的起点，发生在订单服务生成 <code>order_number</code> 的瞬间。</p><ol><li><p><strong>获取用户ID</strong>: 假设用户 <code>user_id = 1001</code> 正在下单。</p></li><li><p><strong>计算分表基因</strong>: 基因的本质就是该用户数据应落在哪张分表上。</p><ul><li><code>分表索引 (基因) = user_id % 分表总数</code></li><li><code>1001 % 4 = 1</code>。因此，该用户所有订单的“分表基因”就是 <code>1</code>。</li></ul></li><li><p><strong>构造订单号</strong>: <code>order_number</code> 的生成算法必须确保将这个“基因”包含进去。一种典型的实现方式是利用位运算：</p><ul><li><code>order_number = (业务ID部分) &lt;&lt; 基因位宽 | 分表基因</code></li><li><strong>业务ID部分</strong>: 可以由 <code>时间戳</code>、<code>机器码</code>、<code>自增序列</code> 等组合而成，确保唯一性。</li><li><strong>基因位宽</strong>: 指存储“基因”需要多少个二进制位。我们有4张表，<code>2^2 = 4</code>，所以需要 <strong>2位</strong> 来存储从0到3的基因。</li><li><strong><code>&lt;&lt;</code> (左移)</strong>: 将业务ID部分的二进制值向左移动2位，腾出最低2位给基因。</li><li><strong><code>|</code> (按位或)</strong>: 将计算出的基因 <code>1</code> (二进制为<code>01</code>) 填充到腾出的最低2位上。</li></ul><p>经过这个过程，任何为用户<code>1001</code>生成的订单号，其二进制末尾两位必然是 <code>01</code>，这导致它对4取模的结果永远是 <code>1</code>。</p></li></ol><h3 id="第-2-步-基因的读取-查询路由时" tabindex="-1"><a class="header-anchor" href="#第-2-步-基因的读取-查询路由时"><span>第 2 步：基因的读取（查询路由时）</span></a></h3><p>当携带分片键的SQL到达ShardingSphere时，我们自定义的复合分片算法 (<code>ComplexKeysShardingAlgorithm</code>) 开始工作。</p><h4 id="分表路由-简单而精准" tabindex="-1"><a class="header-anchor" href="#分表路由-简单而精准"><span>分表路由：简单而精准</span></a></h4><p>分表逻辑非常直观，因为它直接利用了基因注入的结果。</p><ul><li><strong>当按 <code>user_id = 1001</code> 查询时</strong>: <ul><li>算法获取到值 <code>1001</code>。</li><li>计算路由：<code>1001 % 4 = 1</code>。</li><li><strong>决策</strong>: 路由到 <code>d_order_1</code>。</li></ul></li><li><strong>当按 <code>order_number = ...01</code> (二进制) 查询时</strong>: <ul><li>算法获取到订单号。</li><li>计算路由：<code>order_number % 4 = 1</code>。</li><li><strong>决策</strong>: 同样路由到 <code>d_order_1</code>。</li></ul></li></ul><p><strong>结论</strong>：通过ID注入的基因，分表逻辑被完美统一。</p><h4 id="分库路由-基于基因的二次路由" tabindex="-1"><a class="header-anchor" href="#分库路由-基于基因的二次路由"><span>分库路由：基于基因的二次路由</span></a></h4><p>分库的逻辑更为精妙，它不关心完整的ID，<strong>只关心ID中携带的“基因”</strong>，并以此为依据进行二次路由。</p><p>我们来剖析 <code>DatabaseOrderComplexGeneArithmetic</code> 算法的核心步骤：</p><ol><li><strong>提取基因</strong>: <ul><li><code>long replacementLength = log2(tableCount);</code><ul><li>计算基因的二进制位宽。<code>log2(4) = 2</code>。</li></ul></li><li><code>String geneBinaryStr = splicingKeyBinary.substring(splicingKeyBinary.length() - (int) replacementLength);</code><ul><li>无论传入的是 <code>user_id</code> 还是 <code>order_number</code>，都将其转换为二进制字符串，并从<strong>末尾截取</strong>2位。由于基因注入机制，从两者中截取出的结果是等价的，都代表了分表索引。例如，都会得到字符串 <code>&quot;01&quot;</code>。</li></ul></li></ul></li><li><strong>优化基因分布</strong>: <ul><li><code>int geneOptimizeHashCode = (h = geneBinaryStr.hashCode()) ^ (h &gt;&gt;&gt; 16);</code><ul><li>这是整个分库算法的精髓，是直接借鉴自Java <code>HashMap</code> 的<strong>扰动函数</strong>。</li><li><strong>目的</strong>: 防止数据倾斜。直接使用字符串的 <code>hashCode()</code> 可能会因为计算方式的局限性，导致不同的基因（如&quot;01&quot;, &quot;10&quot;）哈希后的结果不够离散，容易碰撞。</li><li><strong>原理</strong>: <code>h &gt;&gt;&gt; 16</code> 将哈希值的高16位移到低16位，再与原哈希值进行<code>^</code>(异或)运算。这使得高位的特征也参与到最终结果中，让哈希值分布得更均匀、更随机。</li></ul></li></ul></li><li><strong>定位分库</strong>: <ul><li><code>return (databaseCount - 1) &amp; geneOptimizeHashCode;</code><ul><li>使用高效的位运算<code>&amp;</code>替代取模<code>%</code>。当分库数<code>databaseCount</code>是2的幂（如2, 4, 8）时，<code>X &amp; (N-1)</code> 的结果与 <code>X % N</code> 完全相同，但计算速度更快。</li><li>最终，通过这个高度离散化的哈希值来决定数据应落入哪个库。</li></ul></li></ul></li></ol><p><strong>分库策略总结</strong>：分库决策完全依赖于从ID中提取出的“分表基因”。这确保了拥有相同基因（即落在同一张分表）的数据，大概率也会被路由到同一个物理库中，实现了<strong>用户维度的数据在库级别的聚合</strong>。</p><h2 id="_4-权衡与取舍" tabindex="-1"><a class="header-anchor" href="#_4-权衡与取舍"><span>4. 权衡与取舍</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li><strong>极致性能</strong>: 完美解决了多维查询下的全路由问题，无需任何额外的网络或磁盘I/O。</li><li><strong>资源节约</strong>: 相比辅助表方案，节省了大量的存储空间和维护成本。</li><li><strong>业务透明</strong>: 路由逻辑被封装在底层，对上层业务代码完全无感。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ul><li><strong>高耦合与低扩展性</strong>: 这是它最大的弊端。ID生成规则与分表数量（<code>tableCount</code>）被写死在了一起。如果未来需要将4张表扩容到8张，意味着“基因位宽”要从2位变成3位。所有历史订单号中的2位旧基因将全部失效，导致数据无法被正确路由。解决这个问题通常需要复杂且风险极高的数据迁移和重写。</li></ul><p><strong>最终结论</strong>：分片基因法是一种用<strong>牺牲水平扩展的灵活性</strong>，来换取<strong>极致查询性能和资源节约</strong>的高级分片策略。它极其适合那些业务模型稳定、分片规则一经确立便极少变更的核心业务场景，例如订单、流水等。系统分库分表策略综合说明</p>`,68)]))}const d=i(e,[["render",h]]),r=JSON.parse('{"path":"/projects/easypass/%E7%B3%BB%E7%BB%9F%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%AF%A6%E8%A7%A3.html","title":"系统分库分表策略","lang":"zh-CN","frontmatter":{"description":"系统分库分表策略 1. 核心思想 为了应对高并发和海量数据存储的挑战，我们引入了数据库分库分表机制。通过将数据水平拆分到不同的数据库和表中，可以有效分散系统负载，提高查询效率和系统的可扩展性。本项目采用 ShardingSphere 作为分库分表的中间件，根据不同业务服务的特点，设计了定制化的分片策略。 2. 用户服务分库分表策略 用户服务是系统的核心...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统分库分表策略\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-14T02:11:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/projects/easypass/%E7%B3%BB%E7%BB%9F%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"系统分库分表策略"}],["meta",{"property":"og:description","content":"系统分库分表策略 1. 核心思想 为了应对高并发和海量数据存储的挑战，我们引入了数据库分库分表机制。通过将数据水平拆分到不同的数据库和表中，可以有效分散系统负载，提高查询效率和系统的可扩展性。本项目采用 ShardingSphere 作为分库分表的中间件，根据不同业务服务的特点，设计了定制化的分片策略。 2. 用户服务分库分表策略 用户服务是系统的核心..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T02:11:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-14T02:11:18.000Z"}]]},"git":{"createdTime":1755137478000,"updatedTime":1755137478000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":1,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":12.71,"words":3813},"filePathRelative":"projects/easypass/系统分库分表详解.md","autoDesc":true}');export{d as comp,r as data};
