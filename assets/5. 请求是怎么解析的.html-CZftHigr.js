import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,b as t,e as h,r as l,o as k}from"./app-C56THzd1.js";const p={};function d(r,i){const s=l("Mermaid");return k(),e("div",null,[i[0]||(i[0]=a('<h1 id="请求是怎么解析的" tabindex="-1"><a class="header-anchor" href="#请求是怎么解析的"><span>请求是怎么解析的</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>本系统采用<strong>多级缓存策略</strong>实现高效的请求解析，结合内存缓存和Redis缓存快速获取接口配置信息。该机制确保在毫秒级别内完成接口路由和参数解析，为后续处理流程提供基础支撑。</p><h2 id="请求解析流程图" tabindex="-1"><a class="header-anchor" href="#请求解析流程图"><span>请求解析流程图</span></a></h2>',4)),t(s,{code:"eJxLL0osyFAIceFSAALH6Gd9S59N2fZi/fZnG5tiFXR17RScop/1T3jaPw0iFhrkGQtW6gSWdK5+2tb6dO2M53smA8lnM9Y/nbAMyHg6Z0UtWJUzSFUNULxGwSX6xf4pT2fPQ9bwsrX3+d51EAMhSoH6axRco5/NX/pi/aKg1JTMYohKiBpXsKVu1WAJTNvcELa5Rz+b1/J09y6IDU/X73yxcSHEDIgisD0eUCc9XwlVB1HhDrbFMxpkdOtSZPdC5D3B8l5Qzag2AADInqPk"}),i[1]||(i[1]=a(`<h2 id="核心解析流程" tabindex="-1"><a class="header-anchor" href="#核心解析流程"><span>核心解析流程</span></a></h2><h3 id="_1-请求uri提取" tabindex="-1"><a class="header-anchor" href="#_1-请求uri提取"><span>1. 请求URI提取</span></a></h3><ul><li>从HTTP请求中提取请求路径</li><li>过滤特殊请求（如<code>/favicon.ico</code>）</li><li>规范化URI格式（去除查询参数）</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 从请求中获取URI</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> uri </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> RequestParameterUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">trace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;解析请求URI: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, uri);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-内存缓存查询" tabindex="-1"><a class="header-anchor" href="#_2-内存缓存查询"><span>2. 内存缓存查询</span></a></h3><ul><li>首先查询内存中的配置缓存</li><li>使用ConcurrentHashMap实现线程安全访问</li><li>缓存命中率直接影响系统性能</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 先从内存缓存中查找</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpStatement</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> httpStatement </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getHttpStatementMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (httpStatement </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;从内存缓存中获取到接口配置&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> httpStatement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-redis缓存查询" tabindex="-1"><a class="header-anchor" href="#_3-redis缓存查询"><span>3. Redis缓存查询</span></a></h3><ul><li>构建Redis Key：<code>URL:服务名:请求路径</code></li><li>使用Hash数据结构存储配置信息</li><li>避免直接访问数据库减轻后端压力</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 从Redis中获取</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;URL:%s:%s&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getServerName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), url);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> entries </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> redisTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">opsForHash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-配置对象构建" tabindex="-1"><a class="header-anchor" href="#_4-配置对象构建"><span>4. 配置对象构建</span></a></h3><ul><li>将Redis中的Hash数据转换为Java对象</li><li>处理类型转换和数据验证</li><li>支持多种配置属性</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 3. 构建HttpStatement对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpStatement</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> statement </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> HttpStatement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">interfaceName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((String) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;interfaceName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">methodName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((String) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;methodName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parameterType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(((String) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;parameterType&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;,&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isAuth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;isAuth&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isHttp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;isHttp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">httpType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">HTTPTypeEnum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((String) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;httpType&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-内存缓存更新" tabindex="-1"><a class="header-anchor" href="#_5-内存缓存更新"><span>5. 内存缓存更新</span></a></h3><ul><li>将Redis获取的配置存入内存缓存</li><li>使用LRU策略管理内存缓存</li><li>减少后续相同请求的Redis访问</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 4. 放入内存缓存</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getHttpStatementMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url, statement);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;接口配置已缓存到内存&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核心数据结构" tabindex="-1"><a class="header-anchor" href="#核心数据结构"><span>核心数据结构</span></a></h2><h3 id="httpstatement对象属性" tabindex="-1"><a class="header-anchor" href="#httpstatement对象属性"><span>HttpStatement对象属性</span></a></h3><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>interfaceName</td><td>String</td><td>Dubbo接口全限定名</td></tr><tr><td>methodName</td><td>String</td><td>目标方法名</td></tr><tr><td>parameterType</td><td>String[]</td><td>方法参数类型数组</td></tr><tr><td>isAuth</td><td>boolean</td><td>是否需要认证</td></tr><tr><td>isHttp</td><td>boolean</td><td>是否为HTTP服务</td></tr><tr><td>httpType</td><td>HTTPTypeEnum</td><td>HTTP请求类型(GET/POST等)</td></tr></tbody></table><h3 id="redis存储结构" tabindex="-1"><a class="header-anchor" href="#redis存储结构"><span>Redis存储结构</span></a></h3><ul><li><strong>Key格式</strong>：<code>URL:&lt;服务名&gt;:&lt;请求路径&gt;</code></li><li><strong>Value类型</strong>：Hash</li><li><strong>字段映射</strong>：</li></ul><table><thead><tr><th>Hash字段</th><th>数据类型</th><th>对应Java属性</th></tr></thead><tbody><tr><td>interfaceName</td><td>String</td><td>interfaceName</td></tr><tr><td>methodName</td><td>String</td><td>methodName</td></tr><tr><td>parameterType</td><td>String</td><td>parameterType</td></tr><tr><td>isAuth</td><td>Integer</td><td>isAuth (1=true)</td></tr><tr><td>isHttp</td><td>Integer</td><td>isHttp (1=true)</td></tr><tr><td>httpType</td><td>String</td><td>httpType</td></tr></tbody></table><h2 id="性能优化策略" tabindex="-1"><a class="header-anchor" href="#性能优化策略"><span>性能优化策略</span></a></h2><h3 id="_1-双缓存设计" tabindex="-1"><a class="header-anchor" href="#_1-双缓存设计"><span>1. 双缓存设计</span></a></h3><ul><li><strong>内存缓存</strong>：纳秒级访问速度</li><li><strong>Redis缓存</strong>：毫秒级访问速度</li><li><strong>组合优势</strong>：90%以上请求命中内存缓存</li></ul><h3 id="_2-缓存预热机制" tabindex="-1"><a class="header-anchor" href="#_2-缓存预热机制"><span>2. 缓存预热机制</span></a></h3><blockquote><p>TODO</p></blockquote><ul><li>服务启动时加载热点接口配置</li><li>定时任务刷新变更配置</li><li>基于请求频率动态调整缓存策略</li></ul>`,28)),t(s,{code:"eJxLL0osyFDwCeJSAALH6Gdzep92LXw6Yf3TrhWxCrq6dgpO0U+7FrzYu/d589rnTTuf9S192r84FqzaOfrpulnPpm97sns3UA9EtUv0047tz6ZteNo/49nsLS9be5/vXQdR7Rr9Yv32Zxubns+e+KxvOUS1G9DsFc8aGl9saH42dcvzPZOfrp0RywUAOkVM/w=="}),i[2]||(i[2]=a(`<h3 id="_3-分布式缓存同步" tabindex="-1"><a class="header-anchor" href="#_3-分布式缓存同步"><span>3. 分布式缓存同步</span></a></h3><ul><li>通过Redis Pub/Sub同步配置变更</li><li>集群环境下保证缓存一致性</li><li>减少无效缓存占用内存空间</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 缓存变更通知示例</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">redisTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">convertAndSend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cache-update&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;URL:/api/user&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常处理机制" tabindex="-1"><a class="header-anchor" href="#异常处理机制"><span>异常处理机制</span></a></h2><h3 id="_1-接口不存在处理" tabindex="-1"><a class="header-anchor" href="#_1-接口不存在处理"><span>1. 接口不存在处理</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">warn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;未找到URL对应的接口配置: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, url);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-错误处理流程" tabindex="-1"><a class="header-anchor" href="#_2-错误处理流程"><span>2. 错误处理流程</span></a></h3>`,7)),t(s,{code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBIFZ4XEYoWn6xY969j+fPV6DGl3kPTzvROftm7GkAsCyQWlpmQWg6XAhLOunZ27lcKL9dufbWxS0E8syNQvLU4tAsu5Q+SetrU+XTvj+Z7JQPLZ/KUv1i+CywZZKWCIB+lCjdw/5ensec9X7nq+e/KzeXOQTXw+Zf6zjgkmBiZPJ/c+3TUFLuUM0/VyyswX69c/2b/wWeN6LgCYDnLE"}),i[3]||(i[3]=h("p",null,"该请求解析机制通过精心设计的缓存策略和数据结构，实现了高并发场景下的高效请求路由，为系统提供了稳定可靠的基础支撑能力。",-1))])}const B=n(p,[["render",d]]),o=JSON.parse('{"path":"/projects/gateway/%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1/5.%20%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A7%A3%E6%9E%90%E7%9A%84.html","title":"请求是怎么解析的","lang":"zh-CN","frontmatter":{"description":"请求是怎么解析的 概述 本系统采用多级缓存策略实现高效的请求解析，结合内存缓存和Redis缓存快速获取接口配置信息。该机制确保在毫秒级别内完成接口路由和参数解析，为后续处理流程提供基础支撑。 请求解析流程图 核心解析流程 1. 请求URI提取 从HTTP请求中提取请求路径 过滤特殊请求（如/favicon.ico） 规范化URI格式（去除查询参数） 2...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"请求是怎么解析的\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-29T15:05:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/projects/gateway/%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1/5.%20%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A7%A3%E6%9E%90%E7%9A%84.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"请求是怎么解析的"}],["meta",{"property":"og:description","content":"请求是怎么解析的 概述 本系统采用多级缓存策略实现高效的请求解析，结合内存缓存和Redis缓存快速获取接口配置信息。该机制确保在毫秒级别内完成接口路由和参数解析，为后续处理流程提供基础支撑。 请求解析流程图 核心解析流程 1. 请求URI提取 从HTTP请求中提取请求路径 过滤特殊请求（如/favicon.ico） 规范化URI格式（去除查询参数） 2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-29T15:05:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-29T15:05:32.000Z"}]]},"git":{"createdTime":1751209532000,"updatedTime":1751209532000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":1,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":3.34,"words":1001},"filePathRelative":"projects/gateway/项目文档/核心服务/5. 请求是怎么解析的.md","autoDesc":true}');export{B as comp,o as data};
