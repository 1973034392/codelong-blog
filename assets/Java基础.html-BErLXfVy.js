import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as l,e as d,d as e,b as i,w as r,r as a,o as c}from"./app-BVKbj-ZH.js";const g={};function p(h,t){const n=a("font");return c(),s("div",null,[t[5]||(t[5]=l(`<h1 id="java基础" tabindex="-1"><a class="header-anchor" href="#java基础"><span>Java基础</span></a></h1><h2 id="反射相关" tabindex="-1"><a class="header-anchor" href="#反射相关"><span>反射相关</span></a></h2><p>反射机制指的是程序在<strong>运行时</strong>能够获取自身的信息。</p><p>反射操作的<strong>目标对象</strong>（实例）是从<strong>堆（Heap）<strong>中获得的，而类的</strong>元数据</strong>（如方法、字段、构造方法等结构信息）是从<strong>方法区（Method Area）或元空间（Metaspace）</strong> 中获得的。</p><p><strong>为什么反射慢?</strong></p><ul><li>由于反射涉及动态解析的类型，<strong>因此不能执行某些Java虚拟机优化</strong>，如JIT优化。</li><li>在使用反射时，参数需要包装（<strong>boxing</strong>)成Object[] 类型，但是真正方法执行的时候，又需要再拆包（<strong>unboxing</strong>)成真正的类型，这些动作不仅消耗时间，而且过程中也会产生很多对象，对象一多就容易导致GC，GC也会导致应用变慢。</li><li>反射调用方法时会从方法数组中遍历查找，并且会检查可见性。这些动作都是耗时的。</li></ul><h2 id="a-a-b-与-a-b-的区别" tabindex="-1"><a class="header-anchor" href="#a-a-b-与-a-b-的区别"><span>a=a+b 与 a+=b 的区别</span></a></h2><p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // error : cannot convert from int to byte</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // ok</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// (因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="finalize是什么" tabindex="-1"><a class="header-anchor" href="#finalize是什么"><span>finalize是什么</span></a></h2><p>Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的，但是什么时候调用 finalize 没有保证。</p><h2 id="为什么不能用bigdecimal的equals方法做等值比较" tabindex="-1"><a class="header-anchor" href="#为什么不能用bigdecimal的equals方法做等值比较"><span>为什么不能用BigDecimal的equals方法做等值比较？</span></a></h2><p>因为BigDecimal的equals方法和compareTo并不一样，equals方法会比较两部分内容，分别是值（value）和标度（scale），而对于0.1和0.10这两个数字，他们的值虽然一样，但是精度是不一样的，所以在使用equals比较的时候会返回false。</p><h2 id="string、stringbuilder和stringbuffer" tabindex="-1"><a class="header-anchor" href="#string、stringbuilder和stringbuffer"><span>String、StringBuilder和StringBuffer</span></a></h2><p><strong>Java中的+对字符串的拼接，其实现原理是使用StringBuilder.append。</strong></p><p>StringBuilder<strong>线程不安全</strong> StringBuffer<strong>线程安全</strong></p><h2 id="jdk动态代理和cglib动态代理的区别" tabindex="-1"><a class="header-anchor" href="#jdk动态代理和cglib动态代理的区别"><span>JDK动态代理和Cglib动态代理的区别</span></a></h2><p>JDK 动态代理是基于接口的，所以要求代理类一定是有定义接口的。</p><p>CGLIB 基于 ASM 字节码生成工具，它是通过继承的方式生成目标类的子类来实现代理类，所以 要注意 final 方法。</p><blockquote><p>它们之间的性能随着 JDK 版本的不同而不同</p><ul><li>jdk6 下，在运行次数较少的情况下，jdk动态代理与 cglib 差距不明显，甚至更快一 些；而当调用次数增加之后， cglib 表现稍微更快一些</li><li>jdk7 下，情况发生了逆转！在运行次数较少（1,000,000）的情况下，jdk动态代理比 cglib 快了差不多30%；而当调用次数增加之后(50,000,000)， 动态代理比 cglib 快了 接近1倍</li><li>jdk8 表现和 jdk7 基本一致</li></ul></blockquote><h2 id="finally中代码一定会执行吗" tabindex="-1"><a class="header-anchor" href="#finally中代码一定会执行吗"><span>finally中代码一定会执行吗？</span></a></h2><p>如果没有符合这两个条件的话，finally中的代码就无法被执行，如发生以下情况，都会导致finally不会执行：</p><p>1、System.exit()方法被执行</p><p>2、Runtime.getRuntime().halt()方法被执行</p><p>3、try或者catch中有死循环</p><p>4、操作系统强制杀掉了JVM进程，如执行了kill -9</p><p>5、其他原因导致的虚拟机崩溃了</p><p>6、虚拟机所运行的环境挂了，如计算机电源断了</p><p>7、如果一个finally是由守护线程执行的，那么是不保证一定能执行的，如果这时候JVM要退出，JVM会检查其他非守护线程，如果都执行完了，那么就直接退出了。这时候finally可能就没办法执行完。</p><h2 id="什么是aio、bio和nio" tabindex="-1"><a class="header-anchor" href="#什么是aio、bio和nio"><span>什么是AIO、BIO和NIO？</span></a></h2><p>BIO （Blocking I/O）：<strong>同步阻塞I/O</strong>，是JDK1.4之前的传统IO模型。 线程发起IO请求后，一直阻塞，直到缓冲区数据就绪后，再进入下一步操作。</p>`,31)),d("p",null,[t[1]||(t[1]=e("NIO （")),i(n,{style:{color:"rgb(37, 41, 51)"}},{default:r(()=>t[0]||(t[0]=[e("Non-Blocking")])),_:1,__:[0]}),t[2]||(t[2]=e(" I/O）：")),t[3]||(t[3]=d("strong",null,"同步非阻塞IO",-1)),t[4]||(t[4]=e("，线程发起IO请求后，不需要阻塞，立即返回。用户线程不原地等待IO缓冲区，可以先做一些其他操作，只需要定时轮询检查IO缓冲区数据是否就绪即可。"))]),t[6]||(t[6]=l('<p>AIO （ Asynchronous I/O）：<strong>异步非阻塞I/O模型</strong>。线程发起IO请求后，不需要阻塞，立即返回，也不需要定时轮询检查结果，异步IO操作之后会回调通知调用方。</p><figure><img src="https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1705133708567-49955e01-446a-4fef-b441-4356180eac5c-289154.png" alt="1705133708567-49955e01-446a-4fef-b441-4356180eac5c.png" tabindex="0" loading="lazy"><figcaption>1705133708567-49955e01-446a-4fef-b441-4356180eac5c.png</figcaption></figure><h2 id="copyonwritearraylist是如何实现线程安全的" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist是如何实现线程安全的"><span>CopyonWriteArraylist是如何实现线程安全的</span></a></h2><p>CopyOnWriteArrayList底层也是通过一个数组保存数据，使用volatile关键字修饰数组，保证当前线程对数组对象重新赋值后，其他线程可以及时感知到。</p><p>在写入操作时，加了一把互斥锁ReentrantLock以保证线程安全。</p><p>看到源码可以知道写入新元素时，首先会先将原来的数组拷贝一份并且让原来数组的长度+1后就得到了一个新数组，新数组里的元素和旧数组的元素一样并且长度比旧数组多一个长度，然后将新加入的元素放置都在新数组最后一个位置后，用新数组的地址替换掉老数组的地址就能得到最新的数据了。</p><p>在我们执行替换地址操作之前，读取的是老数组的数据，数据是有效数据；执行替换地址操作之后，读取的是新数组的数据，同样也是有效数据，而且使用该方式能比读写都加锁要更加的效率。</p><p>现在我们来看读操作，读是没有加锁的，所以读是一直都能读</p><h2 id="hashmap的大小为什么是2的n次方" tabindex="-1"><a class="header-anchor" href="#hashmap的大小为什么是2的n次方"><span>HashMap的大小为什么是2的n次方？</span></a></h2><p>在 JDK1.7 中，HashMap 整个扩容过程就是分别取出数组元素，一般该元素是最后一个放入链表中的元素，然后遍历以该元素为头的单向链表元素，依据每个被遍历元素的 hash 值计算其在新数组中的下标，然后进行交换。这样的扩容方式会将原来哈希冲突的单向链表尾部变成扩容后单向链表的头部。</p><p>而在 JDK 1.8 中，HashMap 对扩容操作做了优化。由于扩容数组的长度是 2 倍关系，所以对于假设初始 tableSize = 4 要扩容到 8 来说就是 0100 到 1000 的变化（左移一位就是 2 倍），在扩容中只用判断原来的 hash 值和左移动的一位（newtable 的值）按位与操作是 0 或 1 就行，0 的话索引不变，1 的话索引变成原索引加上扩容前数组。</p><p>之所以能通过这种“与运算“来重新分配索引，是因为 hash 值本来就是随机的，而 hash 按位与上 newTable 得到的 0（扩容前的索引位置）和 1（扩容前索引位置加上扩容前数组长度的数值索引处）就是随机的，所以扩容的过程就能把之前哈希冲突的元素再随机分布到不同的索引中去。</p><h2 id="concurrenthashmap怎么实现的" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap怎么实现的"><span>ConcurrentHashMap怎么实现的？</span></a></h2><blockquote><p>JDK 1.7 ConcurrentHashMap</p></blockquote><p>在 JDK 1.7 中它使用的是数组加链表的形式实现的，而数组又分为：大数组 Segment 和小数组 HashEntry。 Segment 是一种可重入锁（ReentrantLock），在 ConcurrentHashMap 里扮演锁的角色；HashEntry 则用于存储键值对数据。一个 ConcurrentHashMap 里包含一个 Segment 数组，一个 Segment 里包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素。</p><figure><img src="https://cdn.xiaolincoding.com//picgo/1721807523151-41ad316a-6264-48e8-9704-5b362bc0083c.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>JDK 1.7 ConcurrentHashMap 分段锁技术将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。</p><blockquote><p>JDK 1.8 ConcurrentHashMap</p></blockquote><p>在 JDK 1.7 中，ConcurrentHashMap 虽然是线程安全的，但因为它的底层实现是数组 + 链表的形式，所以在数据比较多的情况下访问是很慢的，因为要遍历整个链表，而 JDK 1.8 则使用了数组 + 链表/红黑树的方式优化了 ConcurrentHashMap 的实现，具体实现结构如下：</p><figure><img src="https://cdn.xiaolincoding.com//picgo/1721807523128-7b1419e7-e6ba-47e6-aba0-8b29423a8ce7.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>JDK 1.8 ConcurrentHashMap JDK 1.8 ConcurrentHashMap 主要通过 volatile + CAS 或者 synchronized 来实现的线程安全的。添加元素时首先会判断容器是否为空：</p><ul><li>如果为空则使用 volatile 加 CAS 来初始化</li><li>如果容器不为空，则根据存储的元素计算该位置是否为空。 <ul><li>如果根据存储的元素计算结果为空，则利用 CAS 设置该节点；</li><li>如果根据存储的元素计算结果不为空，则使用 synchronized ，然后，遍历桶中的数据，并替换或新增节点到桶中，最后再判断是否需要转为红黑树，这样就能保证并发访问时的线程安全了。</li></ul></li></ul><p>如果把上面的执行用一句话归纳的话，就相当于是ConcurrentHashMap通过对头结点加锁来保证线程安全的，锁的粒度相比 Segment 来说更小了，发生冲突和加锁的频率降低了，并发操作的性能就提高了。</p><p>而且 JDK 1.8 使用的是红黑树优化了之前的固定链表，那么当数据量比较大的时候，查询性能也得到了很大的提升，从之前的 O(n) 优化到了 O(logn) 的时间复杂度。</p><h2 id="linux常用的命令有哪些" tabindex="-1"><a class="header-anchor" href="#linux常用的命令有哪些"><span>Linux常用的命令有哪些</span></a></h2><p>以下是一份<strong>Linux常用命令速查表</strong>，涵盖文件操作、系统管理、网络工具等核心场景：</p><hr><h3 id="📂文件与目录操作" tabindex="-1"><a class="header-anchor" href="#📂文件与目录操作"><span>📂文件与目录操作</span></a></h3><table><thead><tr><th style="text-align:center;"><strong>命令</strong></th><th style="text-align:center;"><strong>作用</strong></th><th style="text-align:center;"><strong>常用示例</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>ls</code></td><td style="text-align:center;">列出目录内容</td><td style="text-align:center;"><code>ls -alh</code>（详细列表含隐藏文件）</td></tr><tr><td style="text-align:center;"><code>cd</code></td><td style="text-align:center;">切换目录</td><td style="text-align:center;"><code>cd ~</code>（返回家目录）</td></tr><tr><td style="text-align:center;"><code>pwd</code></td><td style="text-align:center;">显示当前路径</td><td style="text-align:center;"><code>pwd</code></td></tr><tr><td style="text-align:center;"><code>mkdir</code></td><td style="text-align:center;">创建目录</td><td style="text-align:center;"><code>mkdir -p dir1/dir2</code>（递归创建）</td></tr><tr><td style="text-align:center;"><code>rmdir</code></td><td style="text-align:center;">删除空目录</td><td style="text-align:center;"><code>rmdir empty_dir</code></td></tr><tr><td style="text-align:center;"><code>cp</code></td><td style="text-align:center;">复制文件</td><td style="text-align:center;"><code>cp -r dir1/ dir2/</code>（递归复制目录）</td></tr><tr><td style="text-align:center;"><code>mv</code></td><td style="text-align:center;">移动/重命名文件</td><td style="text-align:center;"><code>mv old.txt new.txt</code></td></tr><tr><td style="text-align:center;"><code>rm</code></td><td style="text-align:center;">删除文件</td><td style="text-align:center;"><code>rm -rf dir/</code>（⚠️强制递归删除）</td></tr><tr><td style="text-align:center;"><code>touch</code></td><td style="text-align:center;">创建空文件/更新时间戳</td><td style="text-align:center;"><code>touch file.txt</code></td></tr><tr><td style="text-align:center;"><code>cat</code></td><td style="text-align:center;">显示文件内容</td><td style="text-align:center;"><code>cat file.txt</code></td></tr><tr><td style="text-align:center;"><code>less</code> / <code>more</code></td><td style="text-align:center;">分页查看文件</td><td style="text-align:center;"><code>less -N log.log</code>（显示行号）</td></tr><tr><td style="text-align:center;"><code>head</code> / <code>tail</code></td><td style="text-align:center;">查看文件头部/尾部</td><td style="text-align:center;"><code>tail -f app.log</code>（实时追踪日志）</td></tr><tr><td style="text-align:center;"><code>find</code></td><td style="text-align:center;">搜索文件</td><td style="text-align:center;"><code>find /home -name &quot;*.conf&quot;</code></td></tr><tr><td style="text-align:center;"><code>grep</code></td><td style="text-align:center;">文本搜索</td><td style="text-align:center;"><code>grep -r &quot;error&quot; /var/log/</code></td></tr><tr><td style="text-align:center;"><code>chmod</code></td><td style="text-align:center;">修改权限</td><td style="text-align:center;"><code>chmod 755 script.sh</code></td></tr><tr><td style="text-align:center;"><code>chown</code></td><td style="text-align:center;">修改所有者</td><td style="text-align:center;"><code>chown user:group file.txt</code></td></tr></tbody></table><hr><h3 id="💻系统与进程管理" tabindex="-1"><a class="header-anchor" href="#💻系统与进程管理"><span>💻系统与进程管理</span></a></h3><table><thead><tr><th style="text-align:center;"><strong>命令</strong></th><th style="text-align:center;"><strong>作用</strong></th><th style="text-align:center;"><strong>常用示例</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>ps</code></td><td style="text-align:center;">查看进程</td><td style="text-align:center;">`ps -ef</td></tr><tr><td style="text-align:center;"><code>top</code> / <code>htop</code></td><td style="text-align:center;">动态监控进程资源</td><td style="text-align:center;"><code>top -u mysql</code>（按用户过滤）</td></tr><tr><td style="text-align:center;"><code>kill</code></td><td style="text-align:center;">终止进程</td><td style="text-align:center;"><code>kill -9 12345</code>（强制终止）</td></tr><tr><td style="text-align:center;"><code>systemctl</code></td><td style="text-align:center;">系统服务管理</td><td style="text-align:center;"><code>systemctl restart apache2</code></td></tr><tr><td style="text-align:center;"><code>df</code></td><td style="text-align:center;">磁盘空间统计</td><td style="text-align:center;"><code>df -hT</code>（人类可读+文件系统类型）</td></tr><tr><td style="text-align:center;"><code>du</code></td><td style="text-align:center;">目录空间占用</td><td style="text-align:center;"><code>du -sh /var/</code>（汇总大小）</td></tr><tr><td style="text-align:center;"><code>free</code></td><td style="text-align:center;">内存使用情况</td><td style="text-align:center;"><code>free -m</code>（以MB显示）</td></tr><tr><td style="text-align:center;"><code>uname</code></td><td style="text-align:center;">系统信息</td><td style="text-align:center;"><code>uname -a</code>（内核版本等）</td></tr><tr><td style="text-align:center;"><code>uptime</code></td><td style="text-align:center;">系统运行时间</td><td style="text-align:center;"><code>uptime</code>（负载情况）</td></tr></tbody></table><hr><h3 id="🌐网络工具" tabindex="-1"><a class="header-anchor" href="#🌐网络工具"><span>🌐网络工具</span></a></h3><table><thead><tr><th style="text-align:center;"><strong>命令</strong></th><th style="text-align:center;"><strong>作用</strong></th><th style="text-align:center;"><strong>常用示例</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>ping</code></td><td style="text-align:center;">测试网络连通性</td><td style="text-align:center;"><code>ping -c 4 google.com</code></td></tr><tr><td style="text-align:center;"><code>ifconfig</code> / <code>ip</code></td><td style="text-align:center;">网络接口配置</td><td style="text-align:center;"><code>ip addr show</code>（查看IP地址）</td></tr><tr><td style="text-align:center;"><code>netstat</code></td><td style="text-align:center;">网络连接状态</td><td style="text-align:center;"><code>netstat -tulpn</code>（监听端口）</td></tr><tr><td style="text-align:center;"><code>ss</code></td><td style="text-align:center;">更高效的socket统计</td><td style="text-align:center;"><code>ss -ltn</code>（监听TCP端口）</td></tr><tr><td style="text-align:center;"><code>curl</code></td><td style="text-align:center;">网络数据传输</td><td style="text-align:center;"><code>curl -I https://example.com</code></td></tr><tr><td style="text-align:center;"><code>wget</code></td><td style="text-align:center;">下载文件</td><td style="text-align:center;"><code>wget -c http://file.zip</code></td></tr><tr><td style="text-align:center;"><code>ssh</code></td><td style="text-align:center;">远程登录</td><td style="text-align:center;"><code>ssh user@192.168.1.100</code></td></tr><tr><td style="text-align:center;"><code>scp</code></td><td style="text-align:center;">安全传输文件</td><td style="text-align:center;"><code>scp file.txt user@host:/tmp/</code></td></tr><tr><td style="text-align:center;"><code>traceroute</code></td><td style="text-align:center;">路由追踪</td><td style="text-align:center;"><code>traceroute example.com</code></td></tr></tbody></table><hr><h3 id="📦压缩与解压" tabindex="-1"><a class="header-anchor" href="#📦压缩与解压"><span>📦压缩与解压</span></a></h3><table><thead><tr><th style="text-align:center;"><strong>命令</strong></th><th style="text-align:center;"><strong>作用</strong></th><th style="text-align:center;"><strong>常用示例</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>tar</code></td><td style="text-align:center;">打包/解包</td><td style="text-align:center;"><code>tar -czvf backup.tar.gz dir/</code>（压缩） <code>tar -xzvf backup.tar.gz</code>（解压）</td></tr><tr><td style="text-align:center;"><code>gzip</code> / <code>gunzip</code></td><td style="text-align:center;">.gz压缩/解压</td><td style="text-align:center;"><code>gzip file.txt</code> → file.txt.gz</td></tr><tr><td style="text-align:center;"><code>zip</code> / <code>unzip</code></td><td style="text-align:center;">.zip压缩/解压</td><td style="text-align:center;"><code>unzip archive.zip -d target/</code></td></tr></tbody></table><h2 id="bio-nio-aio的区别和特点" tabindex="-1"><a class="header-anchor" href="#bio-nio-aio的区别和特点"><span>Bio Nio Aio的区别和特点</span></a></h2><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">BIO (阻塞 I/O)</th><th style="text-align:left;">NIO (非阻塞 I/O / 新 I/O)</th><th style="text-align:left;">AIO (异步 I/O)</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>阻塞性</strong></td><td style="text-align:left;"><strong>阻塞</strong></td><td style="text-align:left;"><strong>非阻塞</strong></td><td style="text-align:left;"><strong>非阻塞</strong></td></tr><tr><td style="text-align:left;"><strong>同步/异步</strong></td><td style="text-align:left;"><strong>同步</strong></td><td style="text-align:left;"><strong>同步</strong></td><td style="text-align:left;"><strong>异步</strong></td></tr><tr><td style="text-align:left;"><strong>线程模型</strong></td><td style="text-align:left;">1 连接 : 1 线程</td><td style="text-align:left;">多连接 : 1 线程 (Selector)</td><td style="text-align:left;">发起 I/O : 0 线程阻塞</td></tr><tr><td style="text-align:left;"><strong>工作方式</strong></td><td style="text-align:left;">调用后阻塞，等待操作完成</td><td style="text-align:left;">调用立即返回，需轮询或 Selector 等待事件</td><td style="text-align:left;">调用立即返回，内核完成后回调</td></tr><tr><td style="text-align:left;"><strong>复杂度</strong></td><td style="text-align:left;"><strong>简单</strong></td><td style="text-align:left;"><strong>复杂</strong> (Selector, Buffer, 状态管理)</td><td style="text-align:left;"><strong>中等</strong> (回调/Future)</td></tr><tr><td style="text-align:left;"><strong>性能</strong></td><td style="text-align:left;">低 (线程开销大)</td><td style="text-align:left;">高 (单线程处理多连接)</td><td style="text-align:left;"><strong>理论上最高</strong> (线程零阻塞)</td></tr><tr><td style="text-align:left;"><strong>可伸缩性</strong></td><td style="text-align:left;">差</td><td style="text-align:left;">好</td><td style="text-align:left;">好</td></tr><tr><td style="text-align:left;"><strong>内核角色</strong></td><td style="text-align:left;">完成操作后唤醒线程</td><td style="text-align:left;">通知事件就绪，应用负责读写</td><td style="text-align:left;"><strong>负责整个操作并通知完成</strong></td></tr><tr><td style="text-align:left;"><strong>代表实现</strong></td><td style="text-align:left;">Java <code>java.io.*</code></td><td style="text-align:left;">Java <code>java.nio.*</code>, Netty, epoll</td><td style="text-align:left;">Java <code>java.nio.channels.Asynchronous*</code>, Windows IOCP, Linux io_uring</td></tr><tr><td style="text-align:left;"><strong>适用场景</strong></td><td style="text-align:left;">低并发、简单应用</td><td style="text-align:left;">高并发网络应用</td><td style="text-align:left;">极致性能、特定平台、简化异步编程</td></tr></tbody></table><h2 id="binlog的格式有哪几种" tabindex="-1"><a class="header-anchor" href="#binlog的格式有哪几种"><span>Binlog的格式有哪几种?</span></a></h2><h3 id="statement-基于语句的复制-sbr" tabindex="-1"><a class="header-anchor" href="#statement-基于语句的复制-sbr"><span>STATEMENT (基于语句的复制 - SBR)</span></a></h3><ul><li><strong>记录内容：</strong> 记录的是实际执行的 <strong>SQL 语句本身</strong>（如 <code>UPDATE users SET name=&#39;Alice&#39; WHERE id=1;</code>）。</li><li>优点： <ul><li><strong>日志文件小：</strong> 因为只记录 SQL 语句，对于影响大量行的操作（如 <code>UPDATE ... WHERE ...</code> 匹配很多行），日志量远小于 ROW 模式。</li><li><strong>可读性强：</strong> 直接查看 binlog 文件或使用 <code>mysqlbinlog</code> 工具可以清晰地看到执行过的 SQL，便于人工审计和理解。</li><li><strong>历史悠久：</strong> 是最早的 binlog 格式，兼容性好。</li></ul></li><li>缺点： <ul><li><strong>主从不一致风险 (最主要缺点)：</strong> 某些 SQL 语句的执行结果可能依赖于上下文（如使用了 <code>NOW()</code>, <code>RAND()</code>, <code>USER()</code>, <code>UUID()</code>, 存储过程/函数、触发器、使用了不同索引等），导致在主库和从库上执行相同的 SQL 语句可能产生不同的结果，造成数据不一致。</li><li><strong>锁竞争可能更严重：</strong> 某些需要在从库上重放的语句（如 <code>UPDATE ... WHERE ...</code> 没有使用索引）可能在从库上造成全表扫描和锁表。</li></ul></li><li><strong>适用场景：</strong> 对数据一致性要求不是极其严格，且 SQL 模式简单（避免使用不确定函数、存储过程等）的场景；或者需要节省磁盘空间和网络带宽的场景（需谨慎评估不一致风险）。</li></ul><h3 id="row-基于行的复制-rbr" tabindex="-1"><a class="header-anchor" href="#row-基于行的复制-rbr"><span>ROW (基于行的复制 - RBR)</span></a></h3><ul><li><strong>记录内容：</strong> 记录的是<strong>每一行数据在修改前和修改后的内容</strong>（或仅修改后的内容）。对于 <code>UPDATE</code>，记录被修改行的主键（或唯一标识）以及所有列的新值（或仅被修改列的新值）；对于 <code>INSERT</code>，记录新行的所有列值；对于 <code>DELETE</code>，记录被删除行的主键（或唯一标识）和所有列值。</li><li>优点： <ul><li><strong>数据一致性高 (最主要优点)：</strong> 由于记录的是实际行的变化，而不是 SQL 语句，因此复制过程与 SQL 语句的执行上下文无关，能最大程度保证主从数据的一致性。解决了 <code>STATEMENT</code> 模式下不确定函数等问题。</li><li><strong>减少锁竞争：</strong> 在从库应用更改时，通常是基于行 ID 操作，可以减少锁的粒度（行锁），降低锁竞争。</li><li><strong>更安全的复制：</strong> 对存储过程、触发器、不确定函数等更友好。</li></ul></li><li>缺点： <ul><li><strong>日志文件大：</strong> 对于影响大量行的操作（如批量更新、删除），每条被修改的行都会产生一条记录，日志量会非常大，占用更多磁盘空间和网络带宽（尤其是在主从同步时）。</li><li><strong>可读性差：</strong> 使用 <code>mysqlbinlog</code> 查看时，看到的是行的二进制数据或 Base64 编码（除非使用 <code>-v</code> 或 <code>--verbose</code> 选项解析），不如 SQL 语句直观。</li><li><strong>生成日志慢：</strong> 写入每行变更通常比记录一条 SQL 语句开销更大。</li></ul></li><li><strong>适用场景：</strong> <strong>推荐默认使用</strong>，尤其是在对数据一致性要求极高的场景（如金融交易）、使用了不确定函数、存储过程、触发器，或者主从表结构不完全一致（但需注意列映射）的情况。MySQL 5.7.7 及以后版本的默认 binlog 格式就是 <code>ROW</code>。</li></ul><h3 id="mixed-混合模式复制" tabindex="-1"><a class="header-anchor" href="#mixed-混合模式复制"><span>MIXED (混合模式复制)</span></a></h3><ul><li><p>记录内容：</p><p>结合了 <code>STATEMENT</code> 和 <code>ROW</code> 两种模式。</p><p>MySQL 会根据执行的 SQL 语句动态决定使用哪种格式记录 binlog。</p><ul><li>对于<strong>安全</strong>的、可以确定在主从库上执行结果一致的语句（如不包含不确定函数的简单 CRUD），使用 <code>STATEMENT</code> 格式记录（节省空间）。</li><li>对于<strong>不安全</strong>的、可能导致主从不一致的语句（如包含 <code>NOW()</code>, <code>UUID()</code>, 用户自定义函数 UDF 等），则自动切换到 <code>ROW</code> 格式记录（保证一致性）。</li></ul></li><li><p>优点：</p><ul><li><strong>兼顾空间和一致性：</strong> 试图在 <code>STATEMENT</code> 的空间效率和 <code>ROW</code> 的数据一致性之间取得平衡。</li><li><strong>灵活性：</strong> 自动选择最优（或最安全）的记录方式。</li></ul></li><li><p>缺点：</p><ul><li><strong>规则复杂：</strong> 需要理解 MySQL 判断“安全”和“不安全”的内部规则。</li><li><strong>仍有小概率不一致风险：</strong> 虽然减少了 <code>STATEMENT</code> 的风险，但理论上如果 MySQL 错误地将一个“不安全”的语句判断为“安全”并用 <code>STATEMENT</code> 记录，仍可能导致不一致（不过这种情况较少）。</li><li><strong>日志大小不确定：</strong> 日志大小取决于实际执行的语句类型，不如单一模式可预测。</li></ul></li><li><p><strong>适用场景：</strong> 希望在一定程度上平衡日志大小和数据一致性风险的场景。在 MySQL 5.7.7 之前是默认格式。</p></li></ul><h2 id="select-poll-epoll的区别和特点" tabindex="-1"><a class="header-anchor" href="#select-poll-epoll的区别和特点"><span>select poll epoll的区别和特点</span></a></h2><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;"><code>select</code></th><th style="text-align:left;"><code>poll</code></th><th style="text-align:left;"><code>epoll</code></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>基本原理</strong></td><td style="text-align:left;">遍历+条件触发</td><td style="text-align:left;">遍历+条件触发</td><td style="text-align:left;">回调+事件触发</td></tr><tr><td style="text-align:left;"><strong>时间复杂 (检查就绪)</strong></td><td style="text-align:left;">O(n)</td><td style="text-align:left;">O(n)</td><td style="text-align:left;">O(1) (就绪数目)</td></tr><tr><td style="text-align:left;"><strong>fd 数量限制</strong></td><td style="text-align:left;">有 (通常 1024)</td><td style="text-align:left;">无 (由系统资源限制)</td><td style="text-align:left;">无 (由系统资源限制)</td></tr><tr><td style="text-align:left;"><strong>数据结构</strong></td><td style="text-align:left;"><code>fd_set</code> (位图)</td><td style="text-align:left;"><code>struct pollfd</code> 数组</td><td style="text-align:left;">内核红黑树 + 就绪链表</td></tr><tr><td style="text-align:left;"><strong>内核/用户空间交互</strong></td><td style="text-align:left;">每次调用拷贝 <code>fd_set</code></td><td style="text-align:left;">每次调用拷贝 <code>pollfd</code> 数组</td><td style="text-align:left;">使用 <code>mmap</code> 共享内存</td></tr><tr><td style="text-align:left;"><strong>工作模式</strong></td><td style="text-align:left;">条件触发 (LT)</td><td style="text-align:left;">条件触发 (LT)</td><td style="text-align:left;">支持条件触发 (LT) 和边缘触发 (ET)</td></tr><tr><td style="text-align:left;"><strong>性能 (fd 多且活跃少时)</strong></td><td style="text-align:left;">低</td><td style="text-align:left;">低</td><td style="text-align:left;"><strong>高</strong></td></tr><tr><td style="text-align:left;"><strong>跨平台</strong></td><td style="text-align:left;">广泛支持 (POSIX)</td><td style="text-align:left;">多数 UNIX</td><td style="text-align:left;">Linux 特有 (内核2.5.44+)</td></tr><tr><td style="text-align:left;"><strong>API 使用复杂度</strong></td><td style="text-align:left;">中等</td><td style="text-align:left;">中等</td><td style="text-align:left;">较高</td></tr><tr><td style="text-align:left;"><strong>适用场景</strong></td><td style="text-align:left;">低并发/跨平台要求</td><td style="text-align:left;">稍高并发/需突破 <code>select</code> 限制</td><td style="text-align:left;">高并发/高性能服务器</td></tr></tbody></table><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>select</span></a></h3><ul><li><p>特点与原理：</p><ul><li><code>select</code> 使用三个位图集合 (<code>fd_set</code>) 来分别表示需要监视的<strong>可读、可写、异常</strong>文件描述符。</li><li>调用时，用户态将这三个集合传递给内核。内核<strong>遍历</strong>所有传入的 fd，检查它们的状态。</li><li><code>select</code> 会阻塞（直到有 fd 就绪或超时），或者非阻塞轮询。</li><li>当 <code>select</code> 返回时，它会修改传入的 <code>fd_set</code>，标识哪些 fd 已经就绪，同时返回就绪的 fd 总数。</li><li>用户程序需要<strong>再次遍历</strong>自己之前传入的所有 fd，找到那些被 <code>select</code> 标记为就绪的 fd 进行处理。</li></ul></li><li><p>优点:</p><ul><li><strong>跨平台：</strong> 被几乎所有主流操作系统支持，有良好的可移植性。</li><li><strong>API 相对简单：</strong> 概念清晰。</li></ul></li><li><p>缺点：</p><ul><li><p><strong>fd 数量限制：</strong> 单个进程所能监视的 fd 数量有上限（由 <code>FD_SETSIZE</code> 定义，通常为 1024）。这是 <code>fd_set</code> 位图的结构限制。</p></li><li><p>线性扫描瓶颈：</p><ul><li><strong>内核态：</strong> 每次调用，内核都必须线性扫描 (O(n)) 所有传递给它的 fd（即使只有几个活跃）。</li><li><strong>用户态：</strong> <code>select</code> 返回后，用户程序也必须线性扫描所有自己关心的 fd 来确定哪些就绪（因为 <code>fd_set</code> 告诉你有就绪，但不告诉你是哪几个，除非遍历）。</li></ul></li><li><p><strong>重复数据拷贝：</strong> 每次调用 <code>select</code> 都需要将包含大量 fd 信息的 <code>fd_set</code> <strong>从用户空间拷贝到内核空间</strong>；返回时又要将修改后的 <code>fd_set</code> <strong>从内核空间拷贝回用户空间</strong>。这对 fd 集合很大时带来显著开销。</p></li><li><p><strong>仅支持条件触发 (LT)：</strong> <code>select</code> 只支持水平触发模式。</p></li></ul></li><li><p><strong>总结：</strong> 简单、跨平台，但性能低下，只适用于连接数较少的场景。</p></li></ul><h3 id="poll" tabindex="-1"><a class="header-anchor" href="#poll"><span>poll</span></a></h3><ul><li><p>特点与原理：</p><ul><li><code>poll</code> 使用一个 <code>struct pollfd</code> 的<strong>数组</strong>来管理 fd。每个 <code>pollfd</code> 结构包含 fd 本身、用户关心的事件掩码 (<code>events</code>)、以及内核返回的已发生事件掩码 (<code>revents</code>)。</li><li>调用时，用户态将这个数组指针传递给内核。内核<strong>遍历</strong>数组中的所有 fd，检查它们的状态。</li><li><code>poll</code> 的行为同样会阻塞（或非阻塞），直到有 fd 就绪或超时。</li><li>当 <code>poll</code> 返回时，它会修改每个 <code>pollfd</code> 结构中的 <code>revents</code> 字段来标识该 fd 上发生了什么事件（可读、可写、错误等），同时返回就绪的 fd 总数。</li><li>用户程序需要<strong>遍历</strong>整个 <code>pollfd</code> 数组，检查每个元素的 <code>revents</code> 字段，找出就绪的 fd 进行处理。</li></ul></li><li><p>优点:</p><ul><li><strong>突破 fd 数量限制：</strong> 使用数组传递 fd，不再有类似 <code>select</code> 的硬编码 <code>FD_SETSIZE</code> 限制。fd 数量的理论上限仅受系统资源（如进程能打开的最大文件数）约束。</li><li><strong>事件区分更精细：</strong> <code>pollfd</code> 中的 <code>events</code> 和 <code>revents</code> 允许指定和区分更多类型的事件（如普通数据、带外数据、错误、连接挂断等），比 <code>select</code> 的三种简单集合更灵活。</li></ul></li><li><p>缺点：</p><ul><li><p>线性扫描瓶颈依然存在:</p><ul><li><strong>内核态：</strong> 仍然需要线性扫描所有传入的 fd (O(n))。</li><li><strong>用户态：</strong> 仍然需要线性扫描整个数组 (<code>pollfd</code>) 以找到就绪的 fd (<code>revents</code> != 0)。</li></ul></li><li><p><strong>重复数据拷贝：</strong> 每次调用 <code>poll</code> 都需要将包含大量 <code>pollfd</code> 结构的数组<strong>从用户空间拷贝到内核空间</strong>；返回时也要将修改后的 <code>revents</code><strong>从内核空间拷贝回用户空间</strong>。</p></li><li><p><strong>仅支持条件触发 (LT)：</strong> 和 <code>select</code> 一样。</p></li></ul></li><li><p><strong>总结：</strong> 解决了 <code>select</code> 的 fd 数量限制，提供了更精细的事件描述，但性能瓶颈（内核和用户态的双重线性扫描、数据拷贝）与 <code>select</code> 本质相同，仍不适用于大规模高并发。</p></li></ul><hr><h3 id="epoll" tabindex="-1"><a class="header-anchor" href="#epoll"><span>epoll</span></a></h3><ul><li><p>特点与原理：</p><p>是 Linux 特有的高效 I/O 多路复用机制。它的核心设计思想是：</p><p>避免每次调用时的无差别轮询扫描和大量数据拷贝，直接跟踪真正活跃的 fd。</p><ul><li><p>三个阶段：</p><ol><li><strong><code>epoll_create()</code>：</strong> 创建一个 epoll 实例（一个句柄 <code>epfd</code>），该实例在内核对应一个<strong>数据结构</strong>（通常包含一个红黑树和一个就绪链表）。</li></ol></li></ul><ol start="2"><li><strong><code>epoll_ctl()</code>：</strong> 向 epoll 实例（<code>epfd</code>）<strong>注册/修改/删除</strong> 需要监听的 fd。这个操作只需要在你关注的事件集合<strong>变化时</strong>才调用（例如新连接建立时添加）。调用时提供 <code>epfd</code>, <code>op</code>（操作类型）, <code>fd</code>, 和 <code>struct epoll_event</code>（包含用户关心的事件和关联数据）。</li><li><strong><code>epoll_wait()</code>：</strong> <strong>等待事件发生</strong>。调用时，它<strong>阻塞</strong>（或限时）直到至少有一个之前注册的 fd 上发生事件，或者超时。当它返回时，它只填充用户提供的 <code>epoll_event</code> 数组，其中<strong>只包含实际就绪的事件信息（fd 和具体事件）</strong>。用户程序只需遍历这个填充好的数组（里面全是就绪事件）即可处理，无需扫描所有被监视的 fd。</li></ol><ul><li><p>高效的核心机制：</p><ul><li><strong>内核数据结构：</strong> 内核使用一个<strong>红黑树</strong>来高效管理所有注册的 fd（<code>epoll_ctl</code> 插入/删除 O(log n)）。更重要的是，使用一个<strong>就绪链表（队列）</strong> 来存放被触发的事件。当某个 fd 上的事件发生时（例如收到数据），内核会通过注册的回调函数（callback）迅速地将一个表示该事件的 <code>epitem</code> 结构放入就绪链表。这是 <code>epoll</code> <strong>事件驱动</strong>特性的关键，避免了轮询扫描。</li></ul></li><li><p><strong>内存映射 (<code>mmap</code>)：</strong> <code>epoll</code> 使用 <code>mmap</code> 在<strong>内核空间和用户空间共享一块内存</strong>。当 <code>epoll_wait</code> 返回时，内核可以直接将就绪事件的信息填入这块共享内存区域 (<code>epoll_event</code> 数组)，用户程序也能直接读取。这<strong>避免了 <code>select/poll</code> 那种数据在用户-内核间来回拷贝</strong>的开销。</p></li></ul></li><li><p>触发模式：</p><ul><li><strong>条件触发 (LT - Level Triggered)：</strong> 默认模式。只要 fd 处于就绪状态（如接收缓冲区有数据可读），每次调用 <code>epoll_wait</code> 都会报告它。类似于 <code>select/poll</code> 的行为。</li><li><strong>边缘触发 (ET - Edge Triggered)：</strong> 只有当 fd 的状态<strong>发生改变时</strong>（例如从无数据变为有数据，或者新数据到达），才会报告一次该 fd 上的事件。使用 ET 模式时，<strong>用户程序必须一次性处理完所有可用的数据</strong>（循环读取/写入直到出现 <code>EAGAIN</code> 错误），否则后续 <code>epoll_wait</code> 调用不会再通知你（除非又有新事件导致状态变化）。ET 模式可以进一步减少 <code>epoll_wait</code> 的调用次数，提高效率。</li></ul></li><li><p>优点:</p><ul><li><p>极致性能：</p><ul><li><strong>内核无扫描：</strong> 检查就绪事件的复杂度是 O(1)，因为它只看就绪链表，而不是扫描所有 fd。</li></ul></li></ul></li><li><p><strong>用户无扫描：</strong> <code>epoll_wait</code> 返回的数组中<strong>只包含活跃事件</strong>，用户只需处理这些事件即可 (O(就绪事件数) )。</p><ul><li><p><strong>无数据拷贝：</strong> 利用 <code>mmap</code> 共享内存，避免了用户-内核空间的大数据拷贝。</p></li><li><p><strong>无内置 fd 数量限制：</strong> 仅受系统全局资源限制。</p></li><li><p><strong>支持边缘触发 (ET)：</strong> 提供更高效的工作模式（需要正确使用）。</p></li></ul></li><li><p>缺点：</p><ul><li><strong>Linux 专属：</strong> 是 Linux 独有的特性，不具备 <code>select/poll</code> 的跨平台性。</li><li><strong>API 相对复杂：</strong> 需要理解三个函数 (<code>create</code>, <code>ctl</code>, <code>wait</code>) 和事件结构。ET 模式的使用有特殊要求。</li><li><strong>调试相对复杂：</strong> 内核回调机制使得追踪事件来源不像遍历那么简单。</li></ul></li></ul>',56))])}const f=o(g,[["render",p]]),u=JSON.parse('{"path":"/8gu/Java%E5%9F%BA%E7%A1%80.html","title":"Java基础","lang":"zh-CN","frontmatter":{"description":"Java基础 反射相关 反射机制指的是程序在运行时能够获取自身的信息。 反射操作的目标对象（实例）是从堆（Heap）中获得的，而类的元数据（如方法、字段、构造方法等结构信息）是从方法区（Method Area）或元空间（Metaspace） 中获得的。 为什么反射慢? 由于反射涉及动态解析的类型，因此不能执行某些Java虚拟机优化，如JIT优化。 在使...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础\\",\\"image\\":[\\"https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1705133708567-49955e01-446a-4fef-b441-4356180eac5c-289154.png\\",\\"https://cdn.xiaolincoding.com//picgo/1721807523151-41ad316a-6264-48e8-9704-5b362bc0083c.webp\\",\\"https://cdn.xiaolincoding.com//picgo/1721807523128-7b1419e7-e6ba-47e6-aba0-8b29423a8ce7.webp\\"],\\"dateModified\\":\\"2025-07-07T00:58:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/8gu/Java%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"Java基础"}],["meta",{"property":"og:description","content":"Java基础 反射相关 反射机制指的是程序在运行时能够获取自身的信息。 反射操作的目标对象（实例）是从堆（Heap）中获得的，而类的元数据（如方法、字段、构造方法等结构信息）是从方法区（Method Area）或元空间（Metaspace） 中获得的。 为什么反射慢? 由于反射涉及动态解析的类型，因此不能执行某些Java虚拟机优化，如JIT优化。 在使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1705133708567-49955e01-446a-4fef-b441-4356180eac5c-289154.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T00:58:01.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T00:58:01.000Z"}]]},"git":{"createdTime":1750248745000,"updatedTime":1751849881000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":4,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":21.91,"words":6574},"filePathRelative":"8gu/Java基础.md","autoDesc":true}');export{f as comp,u as data};
