import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as i,b as t,r as l,o as h}from"./app-CIDkKY86.js";const d={};function p(k,s){const a=l("Mermaid");return h(),n("div",null,[s[0]||(s[0]=i('<h1 id="基于-spring-aop-redis-的通用幂等组件文档" tabindex="-1"><a class="header-anchor" href="#基于-spring-aop-redis-的通用幂等组件文档"><span>基于 Spring AOP + Redis 的通用幂等组件文档</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在现代的分布式系统和微服务架构中，网络延迟、客户端重试等因素可能导致同一个请求被多次发送。如果接口不具备幂等性，这可能会引发严重问题，例如重复创建订单、重复扣款等。</p><p>本组件旨在提供一个<strong>通用、非侵入式</strong>的解决方案，以确保接口的幂等性。它利用 <strong>Spring AOP</strong> 进行切面拦截，并结合 <strong>Redis</strong> 作为外部存储来实现分布式锁，从而高效地防止重复请求。开发者只需在需要幂等保护的 Controller 方法上添加一个简单的注解即可。</p><h3 id="核心特性" tabindex="-1"><a class="header-anchor" href="#核心特性"><span>核心特性</span></a></h3><ul><li><strong>注解驱动</strong>: 通过 <code>@Idempotent</code> 注解即可启用，对业务代码无侵入。</li><li><strong>高度灵活</strong>: 使用 <strong>SpEL (Spring Expression Language)</strong> 动态生成幂等键 (Idempotent Key)，可以从请求头、请求体、URL参数等任意位置获取数据。</li><li><strong>高性能</strong>: 基于 Redis 的 <code>SETNX</code> 原子操作，性能高且能保证分布式环境下的正确性。</li><li><strong>可配置</strong>: 支持自定义幂等键的过期时间、重复请求的提示信息。</li><li><strong>统一异常处理</strong>: 通过全局异常处理器，将重复请求自动映射为 <code>HTTP 429 Too Many Requests</code> 响应，符合 RESTful 风格。</li></ul><h2 id="_2-架构与原理" tabindex="-1"><a class="header-anchor" href="#_2-架构与原理"><span>2. 架构与原理</span></a></h2><p>本组件的核心思想是：<strong>为每一次唯一的业务操作生成一个全局唯一的标识（幂等键），在业务逻辑执行前，先检查该标识是否存在。如果不存在，则记录该标识并执行业务；如果已存在，则直接拒绝本次请求。</strong></p><h3 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程"><span>工作流程</span></a></h3>',9)),t(a,{code:"eJyVVF1P01AYvt+vOD8AFkK8cRfERbkgqBD1D9TtiE26tradkTsd6spgHyYdUXDM4aSNho2J2kGW+Wd4T8+u/Aue9mhX1pFAL9r07fM+z/M+55zq+Fkeyxl8RxTWNCGXQOwS8oYi53OPsRa8qoJmiBlRFWQD3ZZEzB6CjqBzQEzX+9aNYxTZ0BRJwpqPIxUbzF/wwYnhlrI4pyoG40vrKs5w1tOCd7QJZnHUOIg1PMBZUU8EZe5jdmFhLJZCUH1Hf7rp1SXadUmvwJH3mQJSnjMzY+jMpHQK3RqXEDlxqP2Z2oeMMGKFC4ckTDxOk15ZJVuHxPxKdk7JSZ0eb3iWw41Mgqf2M12yX3uoLt6lLYcOhzCo/hlse1aTmDWezcjqXMoXBMRyOG7Qbh1Kn0bWK44VJDYVYyg1acWF6o7/wa/7V9A0O93Nbwv29tHKcggepzmJnolEk0JMANzvXIwNQKwhbW2TTZvdodIEe4vnE/LGhplYWu6E7yXS2JjiJ4qOCp33d6HU4nLJZDLsjCykrxXsp3Di+bm5/1NjSccoTA3aPfrjyzWyk0XpollNXHtqIOVJbOQUWsbrLDQ4eg8fHRYamG3o7J73z0bFMrTL/zb1VRMjpT0onkVgiy8yWDVERb7Ez4WT9MaB3ksYFKDfh/Zrr/aWHWBSrvs5BMWrxXhj/iZ6pCjoniCvs6zYn0Y3dJ6qnE38BYrh6q8="}),s[1]||(s[1]=i(`<ol><li><strong>客户端</strong> 发送一个请求到被 <code>@Idempotent</code> 注解标记的 Controller 方法。</li><li><strong><code>IdempotentAspect</code> 切面</strong> 在方法执行前进行拦截。</li><li>切面根据 <code>@Idempotent</code> 注解中定义的 <code>key()</code> 属性（一个SpEL表达式），从当前请求的上下文（如方法参数、请求头）中解析出具体的幂等键字符串。</li><li>切面尝试使用 Redis 的 <code>SET...NX</code> (SET if Not eXists) 命令将这个幂等键写入 Redis，并设置一个指定的过期时间。这是一个<strong>原子操作</strong>。</li><li><strong>如果设置成功</strong>：说明这是第一次请求。切面会继续执行原始的 Controller 方法。业务逻辑处理完毕后，正常返回。</li><li><strong>如果设置失败</strong>：说明在过期时间内，该幂等键已存在于 Redis 中，判定为重复请求。切面会立即抛出 <code>IdempotentException</code> 异常，阻止业务方法的执行。</li><li><strong><code>GlobalExceptionHandler</code></strong> 会捕获到 <code>IdempotentException</code>，并向客户端返回一个 <code>HTTP 429</code> 状态码和自定义的错误信息。</li></ol><h2 id="_3-快速开始" tabindex="-1"><a class="header-anchor" href="#_3-快速开始"><span>3. 快速开始</span></a></h2><h3 id="步骤-1-添加-maven-依赖" tabindex="-1"><a class="header-anchor" href="#步骤-1-添加-maven-依赖"><span>步骤 1: 添加 Maven 依赖</span></a></h3><p>在您的 <code>pom.xml</code> 文件中，确保包含以下依赖项：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- Web, AOP, Redis 是核心依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-aop&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- SpEL表达式解析需要 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-validation&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- Lombok 用于简化代码 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.projectlombok&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;lombok&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;true&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤-2-配置文件扫描" tabindex="-1"><a class="header-anchor" href="#步骤-2-配置文件扫描"><span>步骤 2: 配置文件扫描</span></a></h3><p>确保您的 Spring Boot 主启动类能够扫描到本组件的所有类（<code>com.example.idempotent.*</code>）。通常，如果它们在主启动类的子包下，会自动扫描。</p><h3 id="步骤-3-配置-redis" tabindex="-1"><a class="header-anchor" href="#步骤-3-配置-redis"><span>步骤 3: 配置 Redis</span></a></h3><p>在 <code>application.properties</code> 或 <code>application.yml</code> 中配置 Redis 连接信息。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Redis 配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.redis.host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">localhost</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.redis.port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">6379</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># spring.redis.password=</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># spring.redis.database=0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用指南" tabindex="-1"><a class="header-anchor" href="#_4-使用指南"><span>4. 使用指南</span></a></h2><p>使用本组件非常简单，只需在需要幂等保护的 Controller 方法上添加 <code>@Idempotent</code> 注解并配置其属性。</p><h3 id="idempotent-注解属性详解" tabindex="-1"><a class="header-anchor" href="#idempotent-注解属性详解"><span><code>@Idempotent</code> 注解属性详解</span></a></h3><table><thead><tr><th>属性</th><th>类型</th><th>描述</th><th>默认值</th><th>是否必填</th></tr></thead><tbody><tr><td><code>key</code></td><td><code>String</code></td><td><strong>核心属性</strong>。用于生成幂等键的SpEL表达式。</td><td>无</td><td><strong>是</strong></td></tr><tr><td><code>expireTime</code></td><td><code>long</code></td><td>幂等键在Redis中的存活时间。超过这个时间，同样的请求将被视为新请求。</td><td><code>1</code></td><td>否</td></tr><tr><td><code>timeUnit</code></td><td><code>TimeUnit</code></td><td><code>expireTime</code> 的时间单位。</td><td><code>TimeUnit.SECONDS</code></td><td>否</td></tr><tr><td><code>message</code></td><td><code>String</code></td><td>当发生重复请求时，返回给客户端的提示信息。</td><td>&quot;重复请求，请稍后再试&quot;</td><td>否</td></tr></tbody></table><h3 id="spel-表达式指南" tabindex="-1"><a class="header-anchor" href="#spel-表达式指南"><span>SpEL 表达式指南</span></a></h3><p>SpEL 表达式是实现动态幂等键的关键。在切面中，我们为表达式提供了以下可用变量：</p><ul><li><strong>方法参数名</strong>: 你可以直接通过 <code>#参数名</code> 来访问方法的参数。例如，如果方法签名是 <code>createOrder(@RequestBody OrderRequest request)</code>，你可以使用 <code>#request</code> 来访问整个 <code>OrderRequest</code> 对象。</li><li><strong><code>#args</code></strong>: 这是一个数组，包含了方法的所有参数，你可以通过索引访问，如 <code>#args[0]</code>。</li></ul><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h3><h4 id="示例-1-使用请求体中的字段作为幂等键" tabindex="-1"><a class="header-anchor" href="#示例-1-使用请求体中的字段作为幂等键"><span>示例 1: 使用请求体中的字段作为幂等键</span></a></h4><p>假设前端在创建订单时会生成一个唯一的 <code>orderId</code>。我们可以用它作为幂等键。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/create-order&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Idempotent</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;#request.orderId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> expireTime</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> timeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;订单正在创建中，请勿重复提交&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestBody</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ... 业务逻辑 ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;订单创建成功: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getOrderId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>key = &quot;#request.orderId&quot;</code></strong>: 表达式从名为 <code>request</code> 的参数（即 <code>OrderRequest</code> 对象）中获取 <code>orderId</code> 属性的值。</li><li><strong><code>expireTime = 10</code></strong>: 10秒内，所有 <code>orderId</code> 相同的请求都将被拦截。</li></ul><h4 id="示例-2-组合多个字段作为幂等键" tabindex="-1"><a class="header-anchor" href="#示例-2-组合多个字段作为幂等键"><span>示例 2: 组合多个字段作为幂等键</span></a></h4><p>当单个字段无法保证唯一性时，可以组合多个字段。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/update-order&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Idempotent</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;#request.userId + &#39;:&#39; + #request.orderId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> expireTime</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> updateOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestBody</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ... 业务逻辑 ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;订单更新成功&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>key = &quot;#request.userId + &#39;:&#39; + #request.orderId&quot;</code></strong>: 表达式将用户的ID和订单ID用冒号拼接起来，形成一个更唯一的键，例如 <code>&quot;1001:order123&quot;</code>。</li></ul><h4 id="示例-3-使用请求头中的字段作为幂等键" tabindex="-1"><a class="header-anchor" href="#示例-3-使用请求头中的字段作为幂等键"><span>示例 3: 使用请求头中的字段作为幂等键</span></a></h4><p>对于支付等敏感操作，通常建议客户端生成一个唯一的请求ID（如 <code>UUID</code>）并通过请求头传递。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/pay&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Idempotent</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;#requestId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;支付请求处理中，请勿重复操作&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pay</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestHeader</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;X-Request-ID&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> requestId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestBody</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ... 业务逻辑 ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;支付成功，请求ID: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> requestId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>@RequestHeader(&quot;X-Request-ID&quot;) String requestId</code></strong>: Spring MVC 将请求头 <code>X-Request-ID</code> 的值注入到 <code>requestId</code> 参数中。</li><li><strong><code>key = &quot;#requestId&quot;</code></strong>: SpEL表达式直接使用了方法参数 <code>requestId</code> 的值作为幂等键。</li></ul><h2 id="_5-组件代码解析" tabindex="-1"><a class="header-anchor" href="#_5-组件代码解析"><span>5. 组件代码解析</span></a></h2><ul><li><strong><code>Idempotent.java</code></strong>: 定义了 <code>@Idempotent</code> 注解及其属性，是整个组件的用户入口。</li><li><strong><code>IdempotentAspect.java</code></strong>: 核心逻辑实现。 <ul><li>使用 <code>@Around</code> 通知拦截所有标记了 <code>@Idempotent</code> 的方法。</li><li><code>parseSpelKey</code> 方法负责解析 SpEL 表达式，它创建了一个 <code>StandardEvaluationContext</code>，并将方法的参数注入其中，使得表达式可以访问这些参数。</li><li><code>stringRedisTemplate.opsForValue().setIfAbsent(...)</code> 是实现幂等性检查的关键，它是一个原子操作。</li></ul></li><li><strong><code>IdempotentException.java</code></strong>: 一个简单的自定义运行时异常，用于在检测到重复请求时中断程序流程。</li><li><strong><code>GlobalExceptionHandler.java</code></strong>: 使用 <code>@RestControllerAdvice</code> 定义的全局异常处理器。它专门捕获 <code>IdempotentException</code>，并构造一个标准的 <code>HTTP 429</code> 响应，实现了错误处理与业务逻辑的解耦。</li></ul>`,32))])}const g=e(d,[["render",p]]),c=JSON.parse('{"path":"/projects/easypass/%E5%B9%82%E7%AD%89%E7%BB%84%E4%BB%B6.html","title":"基于 Spring AOP + Redis 的通用幂等组件文档","lang":"zh-CN","frontmatter":{"description":"基于 Spring AOP + Redis 的通用幂等组件文档 1. 概述 在现代的分布式系统和微服务架构中，网络延迟、客户端重试等因素可能导致同一个请求被多次发送。如果接口不具备幂等性，这可能会引发严重问题，例如重复创建订单、重复扣款等。 本组件旨在提供一个通用、非侵入式的解决方案，以确保接口的幂等性。它利用 Spring AOP 进行切面拦截，并结...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基于 Spring AOP + Redis 的通用幂等组件文档\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-14T02:11:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/projects/easypass/%E5%B9%82%E7%AD%89%E7%BB%84%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"基于 Spring AOP + Redis 的通用幂等组件文档"}],["meta",{"property":"og:description","content":"基于 Spring AOP + Redis 的通用幂等组件文档 1. 概述 在现代的分布式系统和微服务架构中，网络延迟、客户端重试等因素可能导致同一个请求被多次发送。如果接口不具备幂等性，这可能会引发严重问题，例如重复创建订单、重复扣款等。 本组件旨在提供一个通用、非侵入式的解决方案，以确保接口的幂等性。它利用 Spring AOP 进行切面拦截，并结..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T02:11:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-14T02:11:18.000Z"}]]},"git":{"createdTime":1755137478000,"updatedTime":1755137478000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":1,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":6.37,"words":1911},"filePathRelative":"projects/easypass/幂等组件.md","autoDesc":true}');export{g as comp,c as data};
