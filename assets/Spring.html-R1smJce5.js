import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as i,o as n}from"./app-K9aAqEZ1.js";const a={};function l(d,t){return n(),s("div",null,t[0]||(t[0]=[i(`<h1 id="spring" tabindex="-1"><a class="header-anchor" href="#spring"><span>Spring</span></a></h1><h2 id="常用注解有哪些" tabindex="-1"><a class="header-anchor" href="#常用注解有哪些"><span>常用注解有哪些?</span></a></h2><table><thead><tr><th style="text-align:center;"><strong>类别</strong></th><th style="text-align:center;"><strong>注解</strong></th><th style="text-align:center;"><strong>说明</strong></th><th style="text-align:center;"><strong>典型应用场景</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>Spring核心</strong></td><td style="text-align:center;"><code>@Component</code></td><td style="text-align:center;">通用组件标记</td><td style="text-align:center;">工具类、通用组件</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@Controller</code></td><td style="text-align:center;">MVC控制器标记</td><td style="text-align:center;">Web请求处理层</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@Service</code></td><td style="text-align:center;">业务逻辑层标记</td><td style="text-align:center;">业务逻辑实现类</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@Autowired</code></td><td style="text-align:center;">自动依赖注入</td><td style="text-align:center;">注入Bean依赖</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@Qualifier</code></td><td style="text-align:center;">按名称限定注入</td><td style="text-align:center;">多实现类指定具体Bean</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@Value</code></td><td style="text-align:center;">注入配置值</td><td style="text-align:center;">读取application.properties值</td></tr><tr><td style="text-align:center;"><strong>Spring MVC</strong></td><td style="text-align:center;"><code>@RequestMapping</code></td><td style="text-align:center;">请求映射基础注解</td><td style="text-align:center;">REST控制器入口（旧版）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@GetMapping</code></td><td style="text-align:center;">专门处理GET请求</td><td style="text-align:center;">资源查询接口</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@PostMapping</code></td><td style="text-align:center;">专门处理POST请求</td><td style="text-align:center;">创建资源接口</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@PathVariable</code></td><td style="text-align:center;">获取URL路径参数</td><td style="text-align:center;">RESTful资源路径参数</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@RequestParam</code></td><td style="text-align:center;">获取请求参数</td><td style="text-align:center;">查询参数获取</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@RequestBody</code></td><td style="text-align:center;">绑定请求体数据</td><td style="text-align:center;">JSON/XML请求体解析</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@ResponseBody</code></td><td style="text-align:center;">响应体数据返回</td><td style="text-align:center;">返回JSON数据</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@RestControllerAdvice</code></td><td style="text-align:center;">定义全局异常处理器</td><td style="text-align:center;">接收处理异常</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@ExceptionHandler(Exception.class)</code></td><td style="text-align:center;">定义异常处理器逻辑</td><td style="text-align:center;">处理异常</td></tr><tr><td style="text-align:center;"><strong>Spring事务</strong></td><td style="text-align:center;"><code>@Transactional</code></td><td style="text-align:center;">声明式事务管理</td><td style="text-align:center;">数据库操作事务管理</td></tr><tr><td style="text-align:center;"><strong>配置相关</strong></td><td style="text-align:center;"><code>@Configuration</code></td><td style="text-align:center;">声明配置类</td><td style="text-align:center;">Spring配置类定义</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@Bean</code></td><td style="text-align:center;">声明Bean定义</td><td style="text-align:center;">第三方库Bean注册</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@ConfigurationProperties</code></td><td style="text-align:center;">批量属性绑定</td><td style="text-align:center;">配置前缀批量注入</td></tr><tr><td style="text-align:center;"><strong>切面编程</strong></td><td style="text-align:center;"><code>@Aspect</code></td><td style="text-align:center;">声明切面类</td><td style="text-align:center;">AOP切面实现类</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>@Before</code>/<code>@After</code></td><td style="text-align:center;">通知类型标记</td><td style="text-align:center;">前置/后置增强逻辑</td></tr></tbody></table><h2 id="filter和-interceptor" tabindex="-1"><a class="header-anchor" href="#filter和-interceptor"><span>Filter和 Interceptor</span></a></h2><table><thead><tr><th style="text-align:center;"><strong>维度</strong></th><th style="text-align:center;"><strong>Filter（过滤器）</strong></th><th style="text-align:center;"><strong>Interceptor（拦截器）</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>规范来源</strong></td><td style="text-align:center;">Servlet规范（J2EE标准）</td><td style="text-align:center;">Spring MVC框架</td></tr><tr><td style="text-align:center;"><strong>作用范围</strong></td><td style="text-align:center;">所有Web请求（包括静态资源）</td><td style="text-align:center;">仅Spring管理的Controller请求</td></tr><tr><td style="text-align:center;"><strong>生命周期管理</strong></td><td style="text-align:center;">Web容器（如Tomcat）</td><td style="text-align:center;">Spring IoC容器</td></tr><tr><td style="text-align:center;"><strong>Spring依赖</strong></td><td style="text-align:center;">无法使用Spring Bean</td><td style="text-align:center;">可直接注入Spring Bean</td></tr><tr><td style="text-align:center;"><strong>执行粒度</strong></td><td style="text-align:center;">请求/响应层面</td><td style="text-align:center;">Controller方法层面</td></tr><tr><td style="text-align:center;"><strong>控制能力</strong></td><td style="text-align:center;">只能中断请求（<code>response.sendError</code>）</td><td style="text-align:center;">可中断或修改Controller处理流程</td></tr></tbody></table><h2 id="事务失效的场景" tabindex="-1"><a class="header-anchor" href="#事务失效的场景"><span>事务失效的场景</span></a></h2><figure><img src="https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/cd5de7a66d2a919e9210b222a7dce169.png" alt="cd5de7a66d2a919e9210b222a7dce169" tabindex="0" loading="lazy"><figcaption>cd5de7a66d2a919e9210b222a7dce169</figcaption></figure><h2 id="bean的初始化过程" tabindex="-1"><a class="header-anchor" href="#bean的初始化过程"><span>Bean的初始化过程</span></a></h2><figure><img src="https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1699966914771-319aeb73-ee91-46f8-b32a-cba0e57bcc74-169298.png" alt="1699966914771-319aeb73-ee91-46f8-b32a-cba0e57bcc74.png" tabindex="0" loading="lazy"><figcaption>1699966914771-319aeb73-ee91-46f8-b32a-cba0e57bcc74.png</figcaption></figure><h2 id="autowired和resource的不同" tabindex="-1"><a class="header-anchor" href="#autowired和resource的不同"><span>Autowired和Resource的不同？</span></a></h2><h3 id="byname和bytype匹配顺序不同" tabindex="-1"><a class="header-anchor" href="#byname和bytype匹配顺序不同"><span>byName和byType匹配顺序不同</span></a></h3><ol><li>Autowired在获取bean的时候，先是byType的方式，再是byName的方式。意思就是先在Spring容器中找以Bean为类型的Bean实例，如果找不到或者找到多个bean，则会通过fieldName来找。举个例子：</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;beanOne&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BeanOne</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;beanTwo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BeanTwo</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 此时会报错，先byType找到两个bean：beanOne和beanTwo</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 然后通过byName（bean）仍然没办法匹配</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 先byType找到两个bean，然后通过byName确认最后要注入的bean</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> beanOne</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 先byType找到两个bean，然后通过byName确认最后要注入的bean</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Qualifier</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;beanOne&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Resource在获取bean的时候，和Autowired恰好相反，先是byName方式，然后再是byType方式。当然，我们也可以通过注解中的参数显示指定通过哪种方式。同样举个例子：</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;beanOne&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BeanOne</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;beanTwo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BeanTwo</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 此时会报错，先byName，发现没有找到bean</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 然后通过byType找到了两个Bean：beanOne和beanTwo，仍然没办法匹配</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 先byName直接找到了beanOne，然后注入</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> beanOne</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 显示通过byType注入，能注入成功</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> BeanOne</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Bean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作用域不同" tabindex="-1"><a class="header-anchor" href="#作用域不同"><span>作用域不同</span></a></h3><ol><li>Autowired可以作用在构造器，字段，setter方法上</li><li>Resource 只可以使用在field，setter方法上</li></ol><h3 id="支持方不同" tabindex="-1"><a class="header-anchor" href="#支持方不同"><span>支持方不同</span></a></h3><ol><li>Autowired是Spring提供的自动注入注解，只有Spring容器会支持，如果做容器迁移，是需要修改代码的</li><li>Resource是JDK官方提供的自动注入注解（JSR-250）。它等于说是一个标准或者约定，所有的IOC容器都会支持这个注解。假如系统容器从Spring迁移到其他IOC容器中，是不需要修改代码的。</li></ol><h3 id="默认要求不同" tabindex="-1"><a class="header-anchor" href="#默认要求不同"><span>默认要求不同</span></a></h3><p>@Autowired注解默认要求要注入的Bean必须存在，如果找不到匹配的Bean会抛出异常。</p><p>@Resource注解默认允许注入的Bean可以缺失，如果找不到匹配的Bean会使用默认值null。</p>`,22)]))}const p=e(a,[["render",l]]),c=JSON.parse('{"path":"/8gu/Spring.html","title":"Spring","lang":"zh-CN","frontmatter":{"description":"Spring 常用注解有哪些? Filter和 Interceptor 事务失效的场景 cd5de7a66d2a919e9210b222a7dce169cd5de7a66d2a919e9210b222a7dce169 Bean的初始化过程 1699966914771-319aeb73-ee91-46f8-b32a-cba0e57bcc74.png169...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring\\",\\"image\\":[\\"https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/cd5de7a66d2a919e9210b222a7dce169.png\\",\\"https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1699966914771-319aeb73-ee91-46f8-b32a-cba0e57bcc74-169298.png\\"],\\"dateModified\\":\\"2025-08-25T02:38:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/8gu/Spring.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"Spring"}],["meta",{"property":"og:description","content":"Spring 常用注解有哪些? Filter和 Interceptor 事务失效的场景 cd5de7a66d2a919e9210b222a7dce169cd5de7a66d2a919e9210b222a7dce169 Bean的初始化过程 1699966914771-319aeb73-ee91-46f8-b32a-cba0e57bcc74.png169..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/cd5de7a66d2a919e9210b222a7dce169.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-25T02:38:44.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-25T02:38:44.000Z"}]]},"git":{"createdTime":1750248745000,"updatedTime":1756089524000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":4,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":3.44,"words":1033},"filePathRelative":"8gu/Spring.md","autoDesc":true}');export{p as comp,c as data};
