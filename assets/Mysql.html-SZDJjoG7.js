import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as l}from"./app-C5tnU83h.js";const r={};function s(i,t){return l(),e("div",null,t[0]||(t[0]=[n('<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h1><h2 id="什么是doublewrite" tabindex="-1"><a class="header-anchor" href="#什么是doublewrite"><span>什么是DoubleWrite</span></a></h2><ol><li><strong>​解决什么问题？​</strong>​ <ul><li>InnoDB的数据操作单元是“页”（默认为16KB）。</li><li>操作系统（OS）和磁盘硬件（如HDD/SSD）的写操作通常以更小的“块”（如4KB）为单位进行。</li><li>当InnoDB将修改后的脏页<strong>刷回</strong>磁盘（如<code>.ibd</code>数据文件）时，如果<strong>系统崩溃或断电发生在写这16KB页的中间过程</strong>（例如只写了前4KB或前8KB），就会导致该页<strong>部分数据更新成功，部分未更新</strong>，造成<strong>页撕裂/部分写</strong>。这种页在逻辑上是损坏的，无法通过redo log（重做日志）恢复，因为redo log的前提是磁盘上的原始页是完整的。</li></ul></li><li><strong>如何工作？</strong><ul><li><strong>两步写入：</strong> 在将脏页写入其最终数据文件位置之前，InnoDB会<strong>先将脏页的副本</strong>写入一个专门的、连续分配的磁盘区域，叫做<strong>doublewrite buffer（双写缓冲区）</strong>。这个缓冲区通常位于系统表空间 (<code>ibdata1</code>) 中。</li><li><strong>顺序写入：</strong> 多个脏页的副本会被连续地、顺序地写入到doublewrite buffer区域。</li><li><strong>刷回实际位置：</strong> 只有在doublewrite buffer成功写完后，InnoDB才会将这些脏页实际写入（可能是随机写入）到它们各自在表空间数据文件 (<code>*.ibd</code>) 中的最终位置。</li></ul></li><li><strong>如何保障数据？</strong><ul><li>如果在第二步（写入实际位置）<strong>之前</strong>发生崩溃：doublewrite buffer里的副本是完整的（因为是原子写入较小的块或由存储保证），最终位置的数据页未更新或仍是旧的完整页。重启恢复时，InnoDB用doublewrite buffer里的完整副本来覆盖最终位置的数据页。</li><li>如果在第二步（写入实际位置）<strong>期间</strong>发生崩溃（部分写）：最终位置的数据页是损坏的，但doublewrite buffer里的副本是完整的。重启恢复时，InnoDB发现最终位置数据页损坏，于是用doublewrite buffer里的完整副本来修复它。</li></ul></li></ol><p><strong>简单说：doublewrite是先写一份完整的“备份”到一个安全区域，再写正式位置。如果写正式位置时出错了，就用安全区的“备份”来修复。它牺牲了一点写性能（两次写），换取了数据页物理完整性的关键保障，使得数据库在崩溃后能安全恢复。</strong> 对于使用保证原子写入（如大多数现代SSD的16K原子写入）的系统，可以关闭doublewrite以提升性能，但通常默认启用以保证最大可靠性。</p><h2 id="什么是索引下推" tabindex="-1"><a class="header-anchor" href="#什么是索引下推"><span>什么是索引下推</span></a></h2><ol><li>核心原理（一句话概括）：</li></ol><blockquote><p><strong>将 <code>WHERE</code> 子句中与索引列相关的部分过滤条件下推给存储引擎（如InnoDB），在扫描索引过程中提前过滤无效数据，避免将所有索引记录都返回给MySQL服务器层再过滤。</strong></p></blockquote><ol start="2"><li>具体工作流程对比：</li></ol><ul><li><strong>未使用索引下推（传统方式）：</strong></li></ul><ol><li><strong>存储引擎</strong>：根据索引定位到满足<strong>最左匹配原则的条件</strong>的记录。</li><li><strong>存储引擎→服务器层</strong>：将所有满足最左条件的记录对应的<strong>主键（或行ID）返回</strong>。</li><li><strong>服务器层</strong>：根据主键回表查询完整行数据 → 再应用 <code>WHERE</code> 子句<strong>剩余的过滤条件</strong>进行二次过滤。</li><li><strong>问题</strong>：如果索引初步筛选的结果集很大，但实际匹配的记录很少，会产生大量无效回表操作。</li></ol><ul><li><strong>使用索引下推（ICP）：</strong></li></ul><ol><li><p><strong>存储引擎</strong>：根据索引定位到满足<strong>最左匹配条件</strong>的记录。</p></li><li><p><strong>存储引擎内部过滤</strong>：直接在索引结构中检查 <strong><code>WHERE</code> 子句剩余的其他索引列条件</strong>（即使不满足最左匹配）。</p></li><li><p><strong>存储引擎→服务器层</strong>：只返回<strong>同时满足所有索引列条件</strong>的记录的主键。</p></li><li><p><strong>服务器层</strong>：仅对少量主键回表查询完整数据 → 执行最终过滤（如非索引列条件）。</p></li></ol><h2 id="binlog的格式有哪几种" tabindex="-1"><a class="header-anchor" href="#binlog的格式有哪几种"><span>Binlog的格式有哪几种?</span></a></h2><h3 id="statement-基于语句的复制-sbr" tabindex="-1"><a class="header-anchor" href="#statement-基于语句的复制-sbr"><span>STATEMENT (基于语句的复制 - SBR)</span></a></h3><ul><li><strong>记录内容：</strong> 记录的是实际执行的 <strong>SQL 语句本身</strong>（如 <code>UPDATE users SET name=&#39;Alice&#39; WHERE id=1;</code>）。</li><li>优点： <ul><li><strong>日志文件小：</strong> 因为只记录 SQL 语句，对于影响大量行的操作（如 <code>UPDATE ... WHERE ...</code> 匹配很多行），日志量远小于 ROW 模式。</li><li><strong>可读性强：</strong> 直接查看 binlog 文件或使用 <code>mysqlbinlog</code> 工具可以清晰地看到执行过的 SQL，便于人工审计和理解。</li><li><strong>历史悠久：</strong> 是最早的 binlog 格式，兼容性好。</li></ul></li><li>缺点： <ul><li><strong>主从不一致风险 (最主要缺点)：</strong> 某些 SQL 语句的执行结果可能依赖于上下文（如使用了 <code>NOW()</code>, <code>RAND()</code>, <code>USER()</code>, <code>UUID()</code>, 存储过程/函数、触发器、使用了不同索引等），导致在主库和从库上执行相同的 SQL 语句可能产生不同的结果，造成数据不一致。</li><li><strong>锁竞争可能更严重：</strong> 某些需要在从库上重放的语句（如 <code>UPDATE ... WHERE ...</code> 没有使用索引）可能在从库上造成全表扫描和锁表。</li></ul></li><li><strong>适用场景：</strong> 对数据一致性要求不是极其严格，且 SQL 模式简单（避免使用不确定函数、存储过程等）的场景；或者需要节省磁盘空间和网络带宽的场景（需谨慎评估不一致风险）。</li></ul><h3 id="row-基于行的复制-rbr" tabindex="-1"><a class="header-anchor" href="#row-基于行的复制-rbr"><span>ROW (基于行的复制 - RBR)</span></a></h3><ul><li><strong>记录内容：</strong> 记录的是<strong>每一行数据在修改前和修改后的内容</strong>（或仅修改后的内容）。对于 <code>UPDATE</code>，记录被修改行的主键（或唯一标识）以及所有列的新值（或仅被修改列的新值）；对于 <code>INSERT</code>，记录新行的所有列值；对于 <code>DELETE</code>，记录被删除行的主键（或唯一标识）和所有列值。</li><li>优点： <ul><li><strong>数据一致性高 (最主要优点)：</strong> 由于记录的是实际行的变化，而不是 SQL 语句，因此复制过程与 SQL 语句的执行上下文无关，能最大程度保证主从数据的一致性。解决了 <code>STATEMENT</code> 模式下不确定函数等问题。</li><li><strong>减少锁竞争：</strong> 在从库应用更改时，通常是基于行 ID 操作，可以减少锁的粒度（行锁），降低锁竞争。</li><li><strong>更安全的复制：</strong> 对存储过程、触发器、不确定函数等更友好。</li></ul></li><li>缺点： <ul><li><strong>日志文件大：</strong> 对于影响大量行的操作（如批量更新、删除），每条被修改的行都会产生一条记录，日志量会非常大，占用更多磁盘空间和网络带宽（尤其是在主从同步时）。</li><li><strong>可读性差：</strong> 使用 <code>mysqlbinlog</code> 查看时，看到的是行的二进制数据或 Base64 编码（除非使用 <code>-v</code> 或 <code>--verbose</code> 选项解析），不如 SQL 语句直观。</li><li><strong>生成日志慢：</strong> 写入每行变更通常比记录一条 SQL 语句开销更大。</li></ul></li><li><strong>适用场景：</strong> <strong>推荐默认使用</strong>，尤其是在对数据一致性要求极高的场景（如金融交易）、使用了不确定函数、存储过程、触发器，或者主从表结构不完全一致（但需注意列映射）的情况。MySQL 5.7.7 及以后版本的默认 binlog 格式就是 <code>ROW</code>。</li></ul><h3 id="mixed-混合模式复制" tabindex="-1"><a class="header-anchor" href="#mixed-混合模式复制"><span>MIXED (混合模式复制)</span></a></h3><ul><li><p>记录内容：</p><p>结合了 <code>STATEMENT</code> 和 <code>ROW</code> 两种模式。</p><p>MySQL 会根据执行的 SQL 语句动态决定使用哪种格式记录 binlog。</p><ul><li>对于<strong>安全</strong>的、可以确定在主从库上执行结果一致的语句（如不包含不确定函数的简单 CRUD），使用 <code>STATEMENT</code> 格式记录（节省空间）。</li><li>对于<strong>不安全</strong>的、可能导致主从不一致的语句（如包含 <code>NOW()</code>, <code>UUID()</code>, 用户自定义函数 UDF 等），则自动切换到 <code>ROW</code> 格式记录（保证一致性）。</li></ul></li><li><p>优点：</p><ul><li><strong>兼顾空间和一致性：</strong> 试图在 <code>STATEMENT</code> 的空间效率和 <code>ROW</code> 的数据一致性之间取得平衡。</li><li><strong>灵活性：</strong> 自动选择最优（或最安全）的记录方式。</li></ul></li><li><p>缺点：</p><ul><li><strong>规则复杂：</strong> 需要理解 MySQL 判断“安全”和“不安全”的内部规则。</li><li><strong>仍有小概率不一致风险：</strong> 虽然减少了 <code>STATEMENT</code> 的风险，但理论上如果 MySQL 错误地将一个“不安全”的语句判断为“安全”并用 <code>STATEMENT</code> 记录，仍可能导致不一致（不过这种情况较少）。</li><li><strong>日志大小不确定：</strong> 日志大小取决于实际执行的语句类型，不如单一模式可预测。</li></ul></li><li><p><strong>适用场景：</strong> 希望在一定程度上平衡日志大小和数据一致性风险的场景。在 MySQL 5.7.7 之前是默认格式。</p></li></ul><h2 id="sql语句的执行过程" tabindex="-1"><a class="header-anchor" href="#sql语句的执行过程"><span>SQL语句的执行过程</span></a></h2><figure><img src="https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1676276921091-c44ad9b7-f173-4099-9bed-39486d5dbd07-357586.png" alt="1676276921091-c44ad9b7-f173-4099-9bed-39486d5dbd07.png" tabindex="0" loading="lazy"><figcaption>1676276921091-c44ad9b7-f173-4099-9bed-39486d5dbd07.png</figcaption></figure><p>①使用<strong>连接器</strong>，通过客户端/服务器通信协议与 MySQL 建立连接。并查询是否有权限</p><p>②Mysql8.0之前<strong>检查是否开启缓存</strong>，开启了 Query Cache 且命中完全相同的 SQL 语句，则将查询结果直接返回给客户端；</p><p>③由<strong>解析器(分析器)</strong> 进行语法分析和语义分析，并生成解析树。如查询是select、表名users、条件是age=&#39;18&#39; and name=&#39;Hollis&#39;，<strong>预处理器</strong>则会根据 MySQL 规则进一步检查解析树是否合法。比如检查要查询的数据表或数据列是否存在等。</p><p>④由<strong>优化器</strong>生成执行计划。根据索引看看是否可以优化</p><p>⑤<strong>执行器</strong>来执行SQL语句，这里具体的执行会操作MySQL的存储引擎来执行 SQL 语句，根据存储引擎类型，得到查询结果。若开启了 Query Cache，则缓存，否则直接返回。</p><h2 id="不可重复读怎么解决幻读问题-它解决不了哪些幻读" tabindex="-1"><a class="header-anchor" href="#不可重复读怎么解决幻读问题-它解决不了哪些幻读"><span>不可重复读怎么解决幻读问题?它解决不了哪些幻读？</span></a></h2><p><strong>MySQL的InnoDB引擎利用间隙锁和临键锁，在其可重复读隔离级别下有效地阻止了其他事务向当前事务查询范围插入新行，从而防止了幻读的发生。</strong></p><p>MySQL的可重复读隔离级别通过MVCC和Next-Key Lock<strong>解决了大部分幻读场景</strong>，但两类操作仍可能突破防线：</p><ol><li>事务内混用快照读和当前读时，因数据可见性不一致导致逻辑幻读。</li><li>在表末尾插入数据时，因间隙锁无法覆盖无限区间而产生物理幻读。</li></ol><h2 id="修改一条记录什么情况下会锁表-什么情况下会锁行" tabindex="-1"><a class="header-anchor" href="#修改一条记录什么情况下会锁表-什么情况下会锁行"><span>修改一条记录什么情况下会锁表？什么情况下会锁行？</span></a></h2><table><thead><tr><th style="text-align:left;"><strong>情况</strong></th><th style="text-align:left;"><strong>锁表还是锁行？</strong></th><th style="text-align:left;"><strong>关键决定因素</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>WHERE 无法利用索引</strong></td><td style="text-align:left;">几乎总是锁表</td><td style="text-align:left;">数据库无法精确定位目标行，只能进行全表扫描</td></tr><tr><td style="text-align:left;"><strong>显式表锁操作</strong></td><td style="text-align:left;">锁表</td><td style="text-align:left;">显式执行了 <code>LOCK TABLES</code> 等命令</td></tr><tr><td style="text-align:left;"><strong>DDL 操作（ALTER等）</strong></td><td style="text-align:left;">锁表</td><td style="text-align:left;">修改表结构需要独占整个表</td></tr><tr><td style="text-align:left;"><strong>大量修改导致锁升级</strong></td><td style="text-align:left;">锁表</td><td style="text-align:left;">修改行数过多，超出阈值</td></tr><tr><td style="text-align:left;"><strong>没有 WHERE 条件</strong></td><td style="text-align:left;">锁表</td><td style="text-align:left;">操作涉及表中所有行</td></tr><tr><td style="text-align:left;"><strong>WHERE 能利用索引</strong></td><td style="text-align:left;"><strong>锁行</strong> (包括索引记录和可能的间隙)</td><td style="text-align:left;">数据库能通过索引精确定位一个或多个目标行</td></tr><tr><td style="text-align:left;"><strong>主键/唯一键冲突的插入</strong></td><td style="text-align:left;"><strong>锁行</strong> (锁冲突的具体索引记录)</td><td style="text-align:left;">能精确定位到已存在的键值</td></tr><tr><td style="text-align:left;"><strong>意向锁 (IS, IX)</strong></td><td style="text-align:left;"><strong>不是锁表操作！</strong> (协调锁的辅助机制，通常与其他行锁或表锁共存)</td><td style="text-align:left;">表明事务的意图（稍后要在某些行加锁）。虽然作用在表级别，但本身非常轻量且兼容，不影响大部分并发操作</td></tr></tbody></table>',32)]))}const a=o(r,[["render",s]]),c=JSON.parse('{"path":"/8gu/Mysql.html","title":"MySQL","lang":"zh-CN","frontmatter":{"description":"MySQL 什么是DoubleWrite ​解决什么问题？​​ InnoDB的数据操作单元是“页”（默认为16KB）。 操作系统（OS）和磁盘硬件（如HDD/SSD）的写操作通常以更小的“块”（如4KB）为单位进行。 当InnoDB将修改后的脏页刷回磁盘（如.ibd数据文件）时，如果系统崩溃或断电发生在写这16KB页的中间过程（例如只写了前4KB或前8...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL\\",\\"image\\":[\\"https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1676276921091-c44ad9b7-f173-4099-9bed-39486d5dbd07-357586.png\\"],\\"dateModified\\":\\"2025-09-08T03:15:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/8gu/Mysql.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"MySQL"}],["meta",{"property":"og:description","content":"MySQL 什么是DoubleWrite ​解决什么问题？​​ InnoDB的数据操作单元是“页”（默认为16KB）。 操作系统（OS）和磁盘硬件（如HDD/SSD）的写操作通常以更小的“块”（如4KB）为单位进行。 当InnoDB将修改后的脏页刷回磁盘（如.ibd数据文件）时，如果系统崩溃或断电发生在写这16KB页的中间过程（例如只写了前4KB或前8..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1676276921091-c44ad9b7-f173-4099-9bed-39486d5dbd07-357586.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-08T03:15:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-08T03:15:06.000Z"}]]},"git":{"createdTime":1750248745000,"updatedTime":1757301306000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":7,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":9.7,"words":2910},"filePathRelative":"8gu/Mysql.md","autoDesc":true}');export{a as comp,c as data};
