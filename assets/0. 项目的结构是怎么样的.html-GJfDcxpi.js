import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,e as n,b as e,a as t,r as d,o as r}from"./app-CIDkKY86.js";const p={};function c(o,a){const s=d("Mermaid");return r(),l("div",null,[a[0]||(a[0]=n("h1",{id:"项目结构文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#项目结构文档"},[n("span",null,"项目结构文档")])],-1)),a[1]||(a[1]=n("h2",{id:"总体架构设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总体架构设计"},[n("span",null,"总体架构设计")])],-1)),e(s,{code:"eJxd0M1OwkAQB/A7T9GjHngFE6FAwY944LbhQCMiCaEG4WDEg0RUDBWUelBJDQiBqGltPDTYGF/G2a5vIZ1J1HQP7Ux+/2xmp1jN7+1KWTkiLc4qA2vEz13/2Ra2y51mTopGV6TY0mahVjvglxNoTcBpLmM4hhY/BL0rLEtMH7nZO0KJB9JQstmthiSz4A/jE793Crez3L+AXFdVrSElGBahiIy3J5lwbd9woDP/bukkCRKsk1inFmO3oTUT1ljYx5RKoSgMuk1+8yo+Xrg+IlFQ0owPdLgY8vZUDDskaZQM870+Nwc0EEkGZY1BX4d3Q3wacG+S4Ge/rtIeuWHz6yv/zfO9B5TgrLNUWVPz5bhW2SkV69V8raRVaLP0CgzRS0K9EurTv/0GE2dPYN19zdt/m6MpMVOobEd+AEZltFQ="}),a[2]||(a[2]=t(`<h2 id="核心模块结构" tabindex="-1"><a class="header-anchor" href="#核心模块结构"><span>核心模块结构</span></a></h2><h3 id="_1-核心配置模块" tabindex="-1"><a class="header-anchor" href="#_1-核心配置模块"><span>1. 核心配置模块</span></a></h3><table><thead><tr><th>类名</th><th>功能描述</th></tr></thead><tbody><tr><td>GlobalConfiguration</td><td>全局配置中心，管理所有核心配置</td></tr><tr><td>RedisConfig</td><td>Redis配置及模板初始化</td></tr><tr><td>HTTPTypeEnum</td><td>HTTP请求类型枚举</td></tr></tbody></table><h3 id="_2-网络通信层" tabindex="-1"><a class="header-anchor" href="#_2-网络通信层"><span>2. 网络通信层</span></a></h3><table><thead><tr><th>类名</th><th>功能描述</th></tr></thead><tbody><tr><td>SocketServerBootStrap</td><td>Netty服务启动器</td></tr><tr><td>ServerHandlerInitializer</td><td>Netty管道初始化</td></tr><tr><td>BaseHandler</td><td>处理器基类</td></tr></tbody></table><h3 id="_3-请求处理链" tabindex="-1"><a class="header-anchor" href="#_3-请求处理链"><span>3. 请求处理链</span></a></h3><table><thead><tr><th>处理器</th><th>功能描述</th></tr></thead><tbody><tr><td>AuthorizationHandler</td><td>JWT认证与权限校验</td></tr><tr><td>PreExecutorHandler</td><td>前置处理器执行器</td></tr><tr><td>ExecutorHandler</td><td>服务执行分发器</td></tr><tr><td>PostExecutorHandler</td><td>后置处理器执行器</td></tr><tr><td>ResultHandler</td><td>结果封装处理器</td></tr></tbody></table><h3 id="_4-协议支持层" tabindex="-1"><a class="header-anchor" href="#_4-协议支持层"><span>4. 协议支持层</span></a></h3><table><thead><tr><th>模块</th><th>功能描述</th></tr></thead><tbody><tr><td>HTTPConnection</td><td>HTTP协议连接实现</td></tr><tr><td>DubboConnection</td><td>Dubbo协议连接实现</td></tr><tr><td>HTTPExecutor</td><td>HTTP请求执行引擎</td></tr><tr><td>DubboExecutor</td><td>Dubbo泛化调用引擎</td></tr></tbody></table><h3 id="_5-服务管理" tabindex="-1"><a class="header-anchor" href="#_5-服务管理"><span>5. 服务管理</span></a></h3><table><thead><tr><th>类名</th><th>功能描述</th></tr></thead><tbody><tr><td>GatewayServer</td><td>网关服务管理及负载均衡</td></tr><tr><td>RedisMessageListener</td><td>Redis消息监听处理</td></tr><tr><td>InterfaceCacheUtil</td><td>接口配置缓存管理</td></tr></tbody></table><h3 id="_6-工具类模块" tabindex="-1"><a class="header-anchor" href="#_6-工具类模块"><span>6. 工具类模块</span></a></h3><table><thead><tr><th>工具类</th><th>功能描述</th></tr></thead><tbody><tr><td>JwtUtils</td><td>JWT令牌生成与验证</td></tr><tr><td>RequestParameterUtil</td><td>请求参数解析工具</td></tr><tr><td>RequestResultUtil</td><td>响应结果封装工具</td></tr></tbody></table><h3 id="_7-数据模型" tabindex="-1"><a class="header-anchor" href="#_7-数据模型"><span>7. 数据模型</span></a></h3><table><thead><tr><th>模型类</th><th>功能描述</th></tr></thead><tbody><tr><td>Result</td><td>统一响应结果封装</td></tr><tr><td>HttpStatement</td><td>HTTP请求声明对象</td></tr><tr><td>GroupRegisterReqVO</td><td>注册请求参数VO</td></tr><tr><td>GroupDetailRegisterRespVO</td><td>注册响应参数VO</td></tr></tbody></table><h2 id="包结构详解" tabindex="-1"><a class="header-anchor" href="#包结构详解"><span>包结构详解</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>top.codelong.apigatewaycore</span></span>
<span class="line"><span>├── common                     // 公共模块</span></span>
<span class="line"><span>│   ├── result                 // 统一结果封装</span></span>
<span class="line"><span>│   │   └── Result.java        // 统一响应格式</span></span>
<span class="line"><span>│   ├── vo                     // 值对象</span></span>
<span class="line"><span>│   │   ├── GroupDetailRegisterRespVO.java</span></span>
<span class="line"><span>│   │   └── GroupRegisterReqVO.java</span></span>
<span class="line"><span>│   ├── GatewayServer.java     // 网关服务管理</span></span>
<span class="line"><span>│   └── HttpStatement.java     // HTTP请求声明</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── config                     // 配置模块</span></span>
<span class="line"><span>│   ├── listener               // 监听器</span></span>
<span class="line"><span>│   │   └── RedisMessageListener.java</span></span>
<span class="line"><span>│   ├── GlobalConfiguration.java // 全局配置</span></span>
<span class="line"><span>│   └── RedisConfig.java       // Redis配置</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── connection                 // 连接管理</span></span>
<span class="line"><span>│   ├── BaseConnection.java    // 连接接口</span></span>
<span class="line"><span>│   ├── DubboConnection.java  // Dubbo连接</span></span>
<span class="line"><span>│   └── HTTPConnection.java   // HTTP连接</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── enums                      // 枚举类</span></span>
<span class="line"><span>│   └── HTTPTypeEnum.java      // HTTP请求类型枚举</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── executors                  // 执行引擎</span></span>
<span class="line"><span>│   ├── BaseExecutor.java      // 执行器接口</span></span>
<span class="line"><span>│   ├── DubboExecutor.java     // Dubbo执行器</span></span>
<span class="line"><span>│   └── HTTPExecutor.java      // HTTP执行器</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── socket                     // 网络通信</span></span>
<span class="line"><span>│   ├── handlers              // 处理器</span></span>
<span class="line"><span>│   │   ├── AuthorizationHandler.java</span></span>
<span class="line"><span>│   │   ├── ExecutorHandler.java</span></span>
<span class="line"><span>│   │   ├── PostExecutorHandler.java</span></span>
<span class="line"><span>│   │   ├── PreExecutorHandler.java</span></span>
<span class="line"><span>│   │   └── ResultHandler.java</span></span>
<span class="line"><span>│   ├── custom                // 自定义处理器</span></span>
<span class="line"><span>│   │   ├── post             // 后置处理器</span></span>
<span class="line"><span>│   │   │   ├── CustomPostHandler.java</span></span>
<span class="line"><span>│   │   │   └── TestPostHandler.java</span></span>
<span class="line"><span>│   │   └── pre              // 前置处理器</span></span>
<span class="line"><span>│   │       ├── CustomPreHandler.java</span></span>
<span class="line"><span>│   │       └── TestPreHandler.java</span></span>
<span class="line"><span>│   ├── BaseHandler.java       // 处理器基类</span></span>
<span class="line"><span>│   ├── ServerHandlerInitializer.java</span></span>
<span class="line"><span>│   └── SocketServerBootStrap.java</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── utils                      // 工具类</span></span>
<span class="line"><span>│   ├── InterfaceCacheUtil.java</span></span>
<span class="line"><span>│   ├── JwtUtils.java</span></span>
<span class="line"><span>│   ├── RequestParameterUtil.java</span></span>
<span class="line"><span>│   └── RequestResultUtil.java</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└── ApiGatewayCoreApplication.java // 启动类</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核心流程处理链" tabindex="-1"><a class="header-anchor" href="#核心流程处理链"><span>核心流程处理链</span></a></h2>`,18)),e(s,{code:"eJx1js9KwzAAh+97ihz1IN57GJSusFNbyl4gq0ELtZ1tCnrb/F9dtbCedAyGA/XSzZOgyJ4mafYWJikOoVsOOXzfjy+J0EmMfAe1XHgYwuMG4KcHQ+w6bg/6GGgARkDzXOTjmjOEMxDGZzWlCqXG+KgN/QMPhbWBJQZWiPRT5MQ4qA90Mfiz2yqmrAQR3pqxxcJGUezh/xF5aXvNpqGAdqdjsfkn/TiX1OBUVUBFWDFj84HkKucW55Ks+k9seSO5xbmuAJKk5U9BZpdldk2KIb3NpNUru+on9P6dpI+sKHbEg/utuNsNdtcbUwE0eWXTIR2n5G7KFhdl/iatya3N+9nDpr5d2fJ7RCdjshiwl6s11/hvlzl5npBRSr7yxi8Nlb9F"}),a[3]||(a[3]=t('<h2 id="关键设计特点" tabindex="-1"><a class="header-anchor" href="#关键设计特点"><span>关键设计特点</span></a></h2><ol><li><strong>模块化设计</strong>： <ul><li>清晰划分网络层、协议层、业务层</li><li>各模块通过接口解耦</li></ul></li><li><strong>可扩展性</strong>： <ul><li>自定义前置/后置处理器接口</li><li>支持多种协议扩展（HTTP/Dubbo）</li><li>插件式设计便于功能扩展</li></ul></li><li><strong>高性能架构</strong>： <ul><li>基于Netty NIO模型</li><li>连接池复用技术</li><li>多级缓存策略</li></ul></li><li><strong>安全机制</strong>： <ul><li>JWT令牌认证</li><li>接口级权限控制</li><li>安全密钥管理</li></ul></li><li><strong>健壮性保障</strong>： <ul><li>异常统一处理</li><li>熔断降级机制</li><li>心跳检测与服务发现</li></ul></li></ol><h2 id="启动流程" tabindex="-1"><a class="header-anchor" href="#启动流程"><span>启动流程</span></a></h2>',3)),e(s,{code:"eJxLL0osyFAIceFSAALH6KcT1j/tWvF015TnU1bEKujq2ik4RT/tmPt0effTnmlPW1c83djwsrX3+d51sWANTmAlztHPNq942tbzfO/Ep62bn83pfdq1ECLvDJZ3QRjhERIS8GL/vGd9S59tXABR4wJW4wq12i+1pKQSYsTTmSsgKlzBKtyQHLKk5fmENqD8y8n7IErcwErco5/uaQAqeT574tMJa56vXv+0fzFE3h0s7xENsnjKtqfrFj3r2A6Uf7F++7ONTbFcAKinfws="}),a[4]||(a[4]=n("p",null,"该架构设计充分考虑了高性能网关的核心需求，通过分层设计和模块化解耦，实现了灵活可扩展的网关系统。各模块职责明确，协同工作完成请求处理全流程。",-1))])}const u=i(p,[["render",c]]),b=JSON.parse('{"path":"/projects/gateway/%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1/0.%20%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%93%E6%9E%84%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84.html","title":"项目结构文档","lang":"zh-CN","frontmatter":{"description":"项目结构文档 总体架构设计 核心模块结构 1. 核心配置模块 2. 网络通信层 3. 请求处理链 4. 协议支持层 5. 服务管理 6. 工具类模块 7. 数据模型 包结构详解 核心流程处理链 关键设计特点 模块化设计： 清晰划分网络层、协议层、业务层 各模块通过接口解耦 可扩展性： 自定义前置/后置处理器接口 支持多种协议扩展（HTTP/Dubbo）...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目结构文档\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-29T15:05:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/projects/gateway/%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1/0.%20%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%93%E6%9E%84%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"项目结构文档"}],["meta",{"property":"og:description","content":"项目结构文档 总体架构设计 核心模块结构 1. 核心配置模块 2. 网络通信层 3. 请求处理链 4. 协议支持层 5. 服务管理 6. 工具类模块 7. 数据模型 包结构详解 核心流程处理链 关键设计特点 模块化设计： 清晰划分网络层、协议层、业务层 各模块通过接口解耦 可扩展性： 自定义前置/后置处理器接口 支持多种协议扩展（HTTP/Dubbo）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-29T15:05:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-29T15:05:32.000Z"}]]},"git":{"createdTime":1751209532000,"updatedTime":1751209532000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":1,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":3.32,"words":995},"filePathRelative":"projects/gateway/项目文档/核心服务/0. 项目的结构是怎么样的.md","autoDesc":true}');export{u as comp,b as data};
