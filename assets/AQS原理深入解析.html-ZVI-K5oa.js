import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as d,o as t}from"./app-LG9Yomh2.js";const r={};function n(a,e){return t(),c("div",null,e[0]||(e[0]=[d('<h1 id="java-abstractqueuedsynchronizer-深度解析-并发控制的基石" tabindex="-1"><a class="header-anchor" href="#java-abstractqueuedsynchronizer-深度解析-并发控制的基石"><span>Java AbstractQueuedSynchronizer 深度解析：并发控制的基石</span></a></h1><h4 id="第-1-部分-abstractqueuedsynchronizer-aqs-导论" tabindex="-1"><a class="header-anchor" href="#第-1-部分-abstractqueuedsynchronizer-aqs-导论"><span><strong>第 1 部分：AbstractQueuedSynchronizer (AQS) 导论</strong></span></a></h4><ul><li><p><strong>AQS 在 <code>java.util.concurrent</code> (JUC) 框架中的角色与重要性</strong></p><p>在 Java 并发编程的宏伟蓝图之中，<code>AbstractQueuedSynchronizer</code>（简称 AQS）扮演着无可替代的基石角色。它并非一个直接面向最终用户的工具类，而是 <code>java.util.concurrent</code> (JUC) 包中绝大多数同步器（Synchronizer）的底层实现框架 。可以将其理解为一个专为并发工具开发者设计的“同步器构建套件”。</p><p>AQS 由并发编程领域的大师 Doug Lea 在 Java 规范请求 JSR 166 中提出并实现，其核心目标是为锁（Locks）、信号量（Semaphores）、屏障（Barriers）等多种同步机制提供一个通用的、高效的、可伸缩的实现基础 。在 AQS 出现之前，开发者若想构建一个新的同步器，可能需要从更原始的并发原语（如</p><p><code>synchronized</code> 或 <code>wait/notify</code>）从零开始，这不仅过程复杂、极易出错，而且难以保证性能和可伸缩性。AQS 的诞生，正是为了解决这一难题。</p><p>AQS 的核心价值主张在于，它封装并处理了并发编程中最复杂且最容易出错的环节——包括原子化的状态管理、线程的排队、阻塞与唤醒等。这使得并发工具的开发者可以将精力集中于定义其同步器特定的同步逻辑（Policy），而无需关心底层的队列管理、线程调度等繁琐的机制（Mechanism）。</p></li><li><p><strong>核心设计哲学：基于状态同步的可重用框架</strong></p><p>AQS 的设计哲学根植于一个简洁而强大的理念：几乎所有同步器的行为，都可以抽象为对一个共享“状态”（State）的获取与释放操作。这个状态由一个单一的、被原子性管理的整型变量 <code>state</code> 表示 。</p><p>这个 <code>state</code> 变量的含义完全由 AQS 的子类来定义，从而赋予了框架极大的灵活性。例如，在一个锁的实现中，<code>state</code> 可以表示锁是否被持有（0 代表未锁定，1 代表锁定）；在一个信号量中，<code>state</code> 可以表示当前可用的“许可”数量 。AQS 的核心任务，就是提供一套健壮的机制，来安全、高效地管理基于这个</p><p><code>state</code> 的线程访问规则。</p></li><li><p><strong>关键能力概览：独占模式、共享模式、条件队列与可配置公平性</strong></p><p>AQS 框架提供了丰富的功能，以支持各种复杂的同步场景，其核心能力可概括为以下几点：</p><ul><li><strong>双模式支持</strong>：AQS 支持两种基本的操作模式，且两种模式的线程可以共享同一个等待队列。 <ul><li><strong>独占模式 (Exclusive Mode)</strong>：在任何时刻，只允许一个线程持有同步状态。这是实现互斥锁（如 <code>ReentrantLock</code>）的基础 。</li><li><strong>共享模式 (Shared Mode)</strong>：允许多个线程同时获取同步状态。这是实现读写锁中的读锁（<code>ReadWriteLock.readLock()</code>）、信号量（<code>Semaphore</code>）等并发工具的基础 。</li></ul></li><li><strong>条件队列 (Condition Queues)</strong>：通过其内部类 <code>ConditionObject</code>，AQS 提供了强大的线程协调机制。它允许线程在获取锁之后，因特定业务条件未满足而挂起，并等待其他线程发出“信号”来唤醒。这比简单的等待锁释放提供了更精细的控制粒度 。</li><li><strong>可配置的公平性策略</strong>：AQS 允许其子类在实现时选择公平（Fair）或非公平（Non-fair）的获取策略。公平策略保证等待时间最长的线程将优先获得资源，而非公平策略则允许“插队”，通常能带来更高的吞吐量。这种设计将性能与公平性之间的权衡交给了开发者 。</li></ul><p>AQS 的设计精髓在于其清晰地贯彻了软件工程中的一个经典原则：<strong>机制与策略分离 (Separation of Mechanism and Policy)</strong>。这里的“机制”是指 AQS 内部提供的、通用的、不随具体应用场景变化的底层设施，包括线程排队、等待状态管理、原子化状态更新等。这些是 AQS 已经完美实现的部分。而“策略”则是指特定同步器所定义的、独特的同步规则，例如 <code>state</code> 变量的具体含义是什么？在何种条件下可以获取或释放它？这部分逻辑则由 AQS 的子类通过重写特定方法（如 <code>tryAcquire</code>）来定义。</p><p>正是这种机制与策略的分离，赋予了 AQS 无与伦比的强大功能和灵活性。它不仅仅是模板方法模式的一个应用实例，更是该模式背后设计思想的深刻体现。这一设计决策使得 <code>java.util.concurrent</code> 包从诞生之初就具备了高度的可扩展性，它赋能库开发者乃至专家级应用开发者，能够基于一个稳定、高效的内核，创造出满足特定需求的新型同步工具，而无需重复“造轮子”去解决复杂的并发队列管理问题——这正是 Doug Lea 设计 AQS 的初衷之一 。</p></li></ul><hr><h4 id="第-2-部分-aqs-的核心架构" tabindex="-1"><a class="header-anchor" href="#第-2-部分-aqs-的核心架构"><span><strong>第 2 部分：AQS 的核心架构</strong></span></a></h4><p>AQS 的强大功能构建于一个设计精巧的内部架构之上，该架构主要由三部分组成：一个表示同步状态的 <code>volatile</code> 变量、一套基于 CAS 的原子操作，以及一个高效的线程等待队列。</p><ul><li><p><strong>同步状态 <code>state</code>：作为控制基石的 <code>volatile int</code></strong></p><p>AQS 架构的核心是 <code>private volatile int state</code> 这个成员变量 。它是一切同步逻辑的中心。</p><ul><li><p><strong><code>volatile</code> 关键字的作用</strong>：使用 <code>volatile</code> 修饰 <code>state</code> 变量至关重要。它确保了对 <code>state</code> 变量的任何修改都能立即对所有线程可见。根据 Java 内存模型（JMM）的 <code>volatile</code> 变量规则，对一个 <code>volatile</code> 变量的写操作先行发生于（happens-before）后续对这个变量的读操作。这为基于 AQS 的同步器提供了最基本的内存一致性保障 。</p></li><li><p><strong><code>state</code> 的多重语义</strong>：<code>state</code> 的具体含义由 AQS 的子类来定义，这体现了框架的灵活性。</p><ul><li>在 <code>ReentrantLock</code> 中，<code>state</code> 表示当前持有锁的线程的“重入次数”。<code>state</code> 为 0 时表示锁未被持有；每当线程获取锁，<code>state</code> 加 1 。</li><li>在 <code>Semaphore</code> 中，<code>state</code> 表示当前可用的“许可”数量 。</li><li>在 <code>CountDownLatch</code> 中，<code>state</code> 表示需要倒数的计数器值 。</li></ul></li><li><p><strong>受控的访问接口</strong>：为了保证对 <code>state</code> 操作的正确性，AQS 提供了三个 <code>protected final</code> 方法作为唯一的访问途径：<code>getState()</code>、<code>setState()</code> 和 <code>compareAndSetState()</code> 。</p><p><code>final</code> 关键字禁止子类重写这些方法，从而保证了 AQS 框架对状态访问方式的绝对控制。</p></li></ul></li><li><p><strong>基于 CAS 的原子状态转换</strong></p><p>在多线程环境下，对共享状态 <code>state</code> 的修改必须是原子操作，否则就会产生竞态条件。AQS 并未使用重量级的 <code>synchronized</code> 锁来保护 <code>state</code>，而是采用了一种更高效的乐观锁机制——CAS（Compare-And-Swap）。</p><ul><li><strong>CAS 操作原理</strong>：CAS 是一种由硬件直接支持的原子指令。它接受三个参数：内存地址 V、预期值 A 和新值 B。只有当内存地址 V 的当前值等于预期值 A 时，处理器才会原子性地将该地址的值更新为新值 B。否则，它什么也不做。这个“比较并交换”的过程是一个不可分割的原子操作 。</li><li><strong><code>compareAndSetState</code> 的应用</strong>：AQS 的 <code>protected final boolean compareAndSetState(int expect, int update)</code> 方法正是对底层 CAS 指令的封装。它使得线程可以尝试以非阻塞的方式原子性地更新 <code>state</code> 。 <ul><li>一个典型的例子是 <code>ReentrantLock</code> 的非公平锁在尝试获取锁时的操作：<code>compareAndSetState(0, 1)</code>。这行代码的意图是：“如果当前 <code>state</code> 的值是 0（锁未被持有），那么就尝试把它原子性地更新为 1（表示我已持有锁）”。如果此操作成功，当前线程就成功获取了锁。如果失败，则意味着在它操作的瞬间，<code>state</code> 的值已经被其他线程改变了，当前线程获取锁失败，需要进入后续的排队逻辑 。</li></ul></li></ul></li><li><p><strong>CLH 队列：一个可伸缩的、非阻塞的 FIFO 等待队列</strong></p><p>当一个线程尝试获取同步状态失败后，AQS 不会使其盲目地自旋等待，而是会将其放入一个等待队列中挂起。这个队列是 AQS 实现可伸缩性的关键。</p><ul><li><strong>队列结构</strong>：该队列是 CLH (Craig, Landin, and Hagersten) 锁算法的一种变体实现，其本质是一个虚拟的、双向链表的 FIFO（先进先出）队列 。它的主要优点在于，节点的入队和出队操作是无锁的（lock-free），极大地减少了在高并发场景下管理等待队列的开销。</li><li><strong><code>Node</code> 节点结构</strong>：队列由 <code>Node</code> 类的实例链接而成，<code>Node</code> 是 AQS 的一个静态内部类，是队列的基本数据单元。其关键字段包括 ： <ul><li><code>thread</code>：封装了在此节点上等待的线程。</li><li><code>prev</code> 和 <code>next</code>：分别指向前驱和后继节点的指针，构成双向链表。</li><li><code>waitStatus</code>：一个整型值，表示节点当前的状态，这是控制线程阻塞和唤醒的核心。</li><li><code>SHARED</code> 和 <code>EXCLUSIVE</code>：<code>Node</code> 内部定义的两个静态常量，用于标记节点是在等待共享模式还是独占模式的资源。这使得两种模式的线程可以共存于同一个队列中。</li></ul></li><li><strong>哨兵 <code>head</code> 节点的作用</strong>：AQS 队列的头节点（<code>head</code>）是一个“哨兵节点”或“哑节点”（dummy node）。它不代表任何等待的线程，仅仅是一个占位符。这种设计的巧妙之处在于，它极大地简化了队列操作的逻辑。任何时候，第一个真正等待的线程节点的前驱节点（<code>prev</code>）总是指向这个非 <code>null</code> 的 <code>head</code> 节点，从而避免了在处理队列为空或只有一个元素等边界情况时需要编写复杂的条件判断 。</li><li><strong><code>waitStatus</code> 状态深度解析</strong>：<code>waitStatus</code> 是理解 AQS 线程协作机制的关键。它精确地描述了每个等待节点的需求和责任。</li></ul></li></ul><table><thead><tr><th><strong>表 1: AQS Node <code>waitStatus</code> 值及其语义</strong></th></tr></thead><tbody><tr><td><strong>状态</strong></td></tr><tr><td><code>CANCELLED</code></td></tr><tr><td><code>SIGNAL</code></td></tr><tr><td><code>CONDITION</code></td></tr><tr><td><code>PROPAGATE</code></td></tr><tr><td>0 (初始状态)</td></tr></tbody></table><p>导出到 Google 表格</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>一个需要澄清的重要概念是，尽管 AQS 的等待队列被称为“非阻塞队列”，但这指的是对队列本身的操作（如 `enq` 入队）是无锁的，通过 CAS 实现，避免了对队列头尾指针的锁定。然而，被放入队列中的线程本身，毫无疑问是**被阻塞**的。它们通过 `LockSupport.park()` 方法被挂起，交出 CPU 的控制权，进入休眠状态。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>这种设计体现了 AQS 的工程实用主义。它通过无锁的队列管理操作，最小化了维护等待队列的开销和竞争，这是提升可伸缩性的关键因素，与 Doug Lea 的设计目标完全一致 [1]。同时，它避免了让等待线程进行 CPU 密集型的忙等待（自旋），因为当锁被持有的时间稍长时，忙等待会极大地浪费系统资源。这种“无锁队列操作”与“有锁线程等待”相结合的混合模式，是 AQS 设计上的一大亮点。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="第-3-部分-模板方法模式-aqs-的扩展框架" tabindex="-1"><a class="header-anchor" href="#第-3-部分-模板方法模式-aqs-的扩展框架"><span><strong>第 3 部分：模板方法模式：AQS 的扩展框架</strong></span></a></h4><p>AQS 的设计是模板方法（Template Method）设计模式的典范之作。该模式的核心思想是：在一个父类中定义一个算法的骨架，而将一些可变步骤的实现延迟到子类中。这使得子类可以在不改变算法整体结构的情况下，重新定义该算法的某些特定步骤 。</p><ul><li><p><strong>AQS 作为模板方法模式的权威实现</strong></p><p>AQS 完美地诠释了模板方法模式。AQS 本身作为抽象父类，提供了一系列 <code>public final</code> 的方法，如 <code>acquire</code>、<code>release</code> 等。这些方法定义了资源获取和释放的通用流程和算法骨架（即“模板”）。而获取和释放资源的具体逻辑——如何判断资源是否可被获取，如何更新状态——则被抽象为一系列 <code>protected</code> 的方法，如 <code>tryAcquire</code>、<code>tryRelease</code> 等。这些方法在 AQS 中或者抛出 <code>UnsupportedOperationException</code>，或者只有一个简单的默认实现，它们是留给子类去实现的“原语操作” 。</p></li><li><p><strong>不变的算法骨架：<code>acquire</code>, <code>release</code>, <code>acquireShared</code>, <code>releaseShared</code></strong></p><p>这些由 AQS 提供的 <code>public final</code> 方法，构成了同步器不变的执行逻辑。开发者调用这些方法，AQS 会在内部遵循一个固定的流程。</p><ul><li><p><code>acquire(int arg)</code> 的逻辑骨架可以简化为：<code>if (!tryAcquire(arg)) { enqueue thread; block; }</code> 。这个流程是普适的：首先调用子类实现的</p><p><code>tryAcquire</code> 尝试获取资源。如果成功，方法返回；如果失败，则将当前线程封装成节点加入等待队列，并将其阻塞。</p></li><li><p><code>release(int arg)</code> 的逻辑骨架可以简化为：<code>if (tryRelease(arg)) { unblock successor; }</code> 。这个流程同样是普适的：首先调用子类实现的</p><p><code>tryRelease</code> 尝试释放资源。如果释放成功（并且子类的实现表明有线程需要被唤醒），AQS 就会负责唤醒等待队列中的下一个线程。</p></li><li><p>共享模式的对应方法 <code>acquireShared</code> 和 <code>releaseShared</code> 也遵循类似的、但为共享场景特化的算法骨架 。</p></li></ul></li><li><p><strong>可扩展的原语：重写 <code>tryAcquire</code>, <code>tryRelease</code>, <code>tryAcquireShared</code>, <code>tryReleaseShared</code></strong></p><p>这些 <code>protected</code> 方法是 AQS 留给子类开发者的“填空题”，是实现特定同步器语义的关键 。</p><ul><li><code>protected boolean tryAcquire(int arg)</code>：子类实现尝试以<strong>独占模式</strong>获取资源的逻辑。如果成功获取，必须返回 <code>true</code>；失败则返回 <code>false</code>。</li><li><code>protected boolean tryRelease(int arg)</code>：子类实现尝试以<strong>独占模式</strong>释放资源的逻辑。如果本次释放操作使得等待的线程有可能被唤醒，必须返回 <code>true</code>。</li><li><code>protected int tryAcquireShared(int arg)</code>：子类实现尝试以<strong>共享模式</strong>获取资源的逻辑。其返回值有特殊含义：负值表示获取失败；0 表示获取成功，但后续已无剩余资源；正值表示获取成功，且后续仍有剩余资源。</li><li><code>protected boolean tryReleaseShared(int arg)</code>：子类实现尝试以<strong>共享模式</strong>释放资源的逻辑。如果本次释放可能使得等待的线程能够成功获取资源，必须返回 <code>true</code>。</li><li><code>protected boolean isHeldExclusively()</code>：另一个重要的原语，主要由 <code>ConditionObject</code> 使用，用于判断当前线程是否独占地持有资源。</li></ul></li></ul><table><thead><tr><th><strong>表 2: AQS 模板方法在 JUC 中的实现</strong></th></tr></thead><tbody><tr><td><strong>同步器</strong></td></tr><tr><td><code>ReentrantLock</code></td></tr><tr><td><code>Semaphore</code></td></tr><tr><td><code>CountDownLatch</code></td></tr><tr><td><code>ReadWriteLock.ReadLock</code></td></tr><tr><td><code>ReadWriteLock.WriteLock</code></td></tr></tbody></table><p>导出到 Google 表格</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>将 `acquire`、`release` 等模板方法声明为 `final` 是一个至关重要的设计决策 [22]。这并非随意为之，而是为了强制维持算法骨架的完整性和正确性。如果子类能够重写 `acquire` 方法，它们就可能绕过 AQS 精心设计的队列管理和线程阻塞机制，这将彻底破坏 AQS 的核心契约，并极易导致实现的同步器行为不正确、不具备可伸缩性，甚至引入难以察觉的并发 bug。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>这一设计强制实现了严格的**关注点分离**。AQS 的作者 Doug Lea 已经为并发编程中最困难的部分（线程排队、阻塞、唤醒、内存可见性）提供了经过验证的、正确的、高效的实现。通过将模板方法设为 `final`，该框架迫使子类的开发者只需关注定义其特定同步器语义的状态转换逻辑。这是一种在提供强大能力的同时，也强制保障安全性的高明设计。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="第-4-部分-独占模式同步-reentrantlock-案例研究" tabindex="-1"><a class="header-anchor" href="#第-4-部分-独占模式同步-reentrantlock-案例研究"><span><strong>第 4 部分：独占模式同步：<code>ReentrantLock</code> 案例研究</strong></span></a></h4><p><code>ReentrantLock</code> 是 AQS 在独占模式下最经典的应用。通过深入分析其实现，我们可以清晰地看到 AQS 的架构是如何被具体应用的。</p><ul><li><p><strong>通过 <code>tryAcquire</code> 和 <code>tryRelease</code> 实现独占访问</strong></p><p><code>ReentrantLock</code> 内部定义了 <code>FairSync</code> 和 <code>NonfairSync</code> 两个静态内部类，它们都继承自 AQS，并实现了独占模式的核心方法 。</p><ul><li><code>tryAcquire(int acquires)</code> 的实现逻辑非常清晰：它首先检查同步状态 <code>state</code>。如果 <code>state</code> 为 0，表示锁是自由的，它会尝试使用 CAS 操作将 <code>state</code> 设置为 1，并将当前线程设置为独占所有者。如果 <code>state</code> 不为 0，它会检查当前持有锁的线程是否就是当前线程，如果是，则进入重入逻辑。否则，获取失败。</li></ul></li><li><p><strong>实现可重入性：将递归深度映射到 <code>state</code> 计数</strong></p><p>可重入性（Reentrancy）意味着一个已经持有锁的线程，可以再次成功获取该锁而不会被自己阻塞。AQS 的 <code>state</code> 变量为实现这一特性提供了天然的支持。</p><ul><li><p>当一个已经持有锁的线程再次调用 <code>lock()</code> 时，<code>tryAcquire</code> 方法会检测到调用者就是当前的锁所有者。此时，它不会阻塞，而是简单地将 <code>state</code> 计数器加 1 。这个</p><p><code>state</code> 值就代表了该线程对该锁的“重入深度”。</p></li><li><p>相应地，每次调用 <code>unlock()</code> 方法时，<code>state</code> 计数器会减 1。锁并不会在第一次调用 <code>unlock()</code> 时就释放，只有当 <code>state</code> 的值减到 0 时，表示线程已经退出了所有重入层级，锁才会被真正释放，并将所有者字段清空，从而允许其他线程获取该锁 。</p></li></ul></li><li><p><strong><code>acquireQueued</code> 流程：线程入队与 Park/Unpark 机制</strong></p><p>当一个线程调用 <code>lock()</code> 并且 <code>tryAcquire</code> 返回 <code>false</code> 时，AQS 精密的排队机制便开始启动。</p><ol><li><p><strong><code>addWaiter(Node.EXCLUSIVE)</code></strong>：首先，AQS 会将当前线程封装成一个 <code>Node</code> 对象，并标记为 <code>EXCLUSIVE</code>（独占）模式。然后，通过一个基于 CAS 的自旋操作，将这个新节点安全地添加到 CLH 等待队列的尾部 。</p></li><li><p><strong><code>acquireQueued(Node node, int arg)</code></strong>：节点入队后，便进入此方法，开始在一个循环中等待获取锁。在这个循环里，节点会检查它的前驱节点是否是头节点（<code>head</code>）。如果是，意味着它现在是队列中的第一个等待者，有资格去尝试获取锁。于是它会再次调用 <code>tryAcquire</code>。</p></li><li><p><strong><code>shouldParkAfterFailedAcquire</code> 和 <code>parkAndCheckInterrupt</code></strong>：如果节点发现它的前驱不是头节点，或者它是头节点但尝试获取锁再次失败，那么它就需要被阻塞以避免浪费 CPU。在阻塞之前，AQS 会执行一个关键操作：调用 <code>shouldParkAfterFailedAcquire</code>。此方法会找到该节点的前驱节点，并尝试将其 <code>waitStatus</code> 设置为 <code>SIGNAL</code>。这个 <code>SIGNAL</code> 状态就像一个“唤醒我”的请求。只有在前驱节点的状态成功设置为 <code>SIGNAL</code> 之后，当前线程才会在下一次循环中调用 <code>LockSupport.park(this)</code> 将自己挂起，进入休眠状态 。当锁被释放时，持有锁的线程会找到队列头部的后继节点（也就是这个休眠的线程），并调用</p><p><code>LockSupport.unpark()</code> 来唤醒它。</p></li></ol></li><li><p><strong>公平与非公平实现：<code>FairSync</code> 与 <code>NonfairSync</code> 的深度剖析</strong></p><p><code>ReentrantLock</code> 允许在构造时选择公平或非公平策略，这两种策略的核心区别就在于 <code>tryAcquire</code> 的实现上。</p><ul><li><strong><code>NonfairSync</code> (非公平锁)</strong>：其 <code>tryAcquire</code> 方法非常直接。当一个新线程调用 <code>lock()</code> 时，它会首先尝试一次 CAS 操作 <code>compareAndSetState(0, 1)</code>。如果恰好此时锁是自由的，这个新线程就能立刻获得锁，成功“插队”，而无视队列中可能已经等待了很久的其他线程。这种行为被称为“闯入”（Barging）。</li><li><strong><code>FairSync</code> (公平锁)</strong>：其 <code>tryAcquire</code> 方法在尝试获取锁之前，会增加一个额外的检查：<code>hasQueuedPredecessors()</code>。这个方法会判断等待队列中是否存在其他等待的线程。如果存在，<code>tryAcquire</code> 会直接返回 <code>false</code>，即使锁当前是自由的。这意味着新来的线程必须乖乖排队，只有队列的头部线程才有资格获取锁 。</li></ul><p>这种设计上的差异直接导致了性能上的权衡，这将在第 7 部分详细讨论。</p><p>在 <code>acquireQueued</code> 流程中，<code>shouldParkAfterFailedAcquire</code> 方法的设计展现了 AQS 的精妙之处。一个简单的实现可能会在线程获取锁失败后立即将其挂起。然而，AQS 的实现更为复杂和健壮。当一个线程 T2 决定要挂起时，它首先会找到其前驱节点 T1，并尝试将 T1 的 <code>waitStatus</code> 设置为 <code>SIGNAL</code>。只有在这次设置成功后的<strong>下一次</strong>循环中，T2 才会真正调用 <code>park()</code> 来挂起自己。</p><p>这种看似繁琐的两步操作，是为了解决一个致命的竞态条件：<strong>丢失的唤醒（Lost Wakeup）</strong>。想象一下，如果 T2 立即挂起，而它的前驱 T1 在 T2 挂起之前的一瞬间释放了锁并尝试调用 <code>unpark(T2)</code> 来唤醒它。由于此时 T2 还没有真正执行 <code>park()</code>，这个 <code>unpark</code> 调用就无效了，信号就此丢失。当 T2 随后执行 <code>park()</code> 时，它将永远地休眠下去。通过强制要求在 <code>park</code> 之前必须先成功设置前驱节点的 <code>SIGNAL</code> 状态，T2 就为 T1 留下了一个明确的“备忘录”。T1 在释放锁时，会检查其后继节点的 <code>waitStatus</code>。如果发现是 <code>SIGNAL</code>，它就知道自己有责任去唤醒后继者。这个机制确保了释放和唤醒操作之间的安全交接，从而彻底避免了丢失唤醒的问题，这是并发编程中一个常见且极其危险的陷阱。</p></li></ul><hr><h4 id="第-5-部分-共享模式同步-semaphore-与-countdownlatch-案例研究" tabindex="-1"><a class="header-anchor" href="#第-5-部分-共享模式同步-semaphore-与-countdownlatch-案例研究"><span><strong>第 5 部分：共享模式同步：<code>Semaphore</code> 与 <code>CountDownLatch</code> 案例研究</strong></span></a></h4><p>共享模式是 AQS 的另一大核心功能，它允许多个线程同时访问一个同步器。<code>Semaphore</code>（信号量）和 <code>CountDownLatch</code>（倒数门闩）是共享模式的两个典型应用。</p><ul><li><p><strong>通过 <code>tryAcquireShared</code> 和 <code>tryReleaseShared</code> 实现共享访问</strong></p><p>共享模式与独占模式的核心区别在于 <code>tryAcquireShared</code> 方法的返回值。它返回一个 <code>int</code> 类型的值，而非 <code>boolean</code>，这个返回值携带了更丰富的信息 ：</p><ul><li><strong>负值</strong>：表示获取失败，当前线程需要进入等待队列。</li><li><strong>零</strong>：表示获取成功，但该同步器上已无更多可用资源，后续的共享获取请求将会失败。</li><li><strong>正值</strong>：表示获取成功，并且该同步器上仍有剩余资源，后续的共享获取请求可能还会成功。</li></ul><p>这个整型返回值是实现高效共享模式的关键，它直接影响着 AQS 后续的唤醒策略。</p></li><li><p><strong>案例研究 1：<code>Semaphore</code> - 使用 <code>state</code> 管理许可池</strong></p><p><code>Semaphore</code> 用于控制对一组资源的并发访问数量。</p><ul><li><strong>初始化</strong>：创建一个 <code>Semaphore</code> 时，会指定一个“许可”数量，这个数量被直接设置为 AQS 的初始 <code>state</code> 值 。</li><li><strong><code>tryAcquireShared(int permits)</code></strong>：<code>Semaphore</code> 的 <code>acquire(int permits)</code> 方法最终会调用到 AQS 子类（如 <code>NonfairSync</code>）中的 <code>tryAcquireShared</code>。该方法在一个无限循环（自旋）中执行：首先读取当前的 <code>state</code>（可用许可数），计算出获取指定数量 <code>permits</code> 后的剩余值。如果剩余值为负（许可不足），则直接返回负值表示失败。否则，它会使用 CAS 操作尝试将 <code>state</code> 更新为这个剩余值。如果 CAS 成功，它会返回这个非负的剩余值，表示获取成功 。</li><li><strong><code>tryReleaseShared(int permits)</code></strong>：<code>Semaphore</code> 的 <code>release(int permits)</code> 方法则调用 <code>tryReleaseShared</code>。该方法同样在一个 CAS 自旋中，原子性地将释放的 <code>permits</code> 数量加回到 <code>state</code> 中 。</li></ul></li><li><p><strong>案例研究 2：<code>CountDownLatch</code> - 使用 <code>state</code> 实现一次性屏障</strong></p><p><code>CountDownLatch</code> 是一种非常有用的一次性（one-shot）屏障，它允许一个或多个线程等待，直到其他一组线程完成操作。</p><ul><li><strong>初始化</strong>：<code>CountDownLatch</code> 在构造时会指定一个计数值，这个值就是 AQS 的初始 <code>state</code> 。</li><li><strong><code>await()</code></strong>：等待线程调用 <code>await()</code> 方法，该方法内部会调用 AQS 的 <code>acquireSharedInterruptibly</code>。<code>CountDownLatch</code> 内部 <code>Sync</code> 类实现的 <code>tryAcquireShared</code> 逻辑极其简单：检查 <code>getState()</code> 是否为 0。如果是，返回 1（表示获取成功，门闩已打开）；如果不是，返回 -1（表示获取失败，需要等待）。</li><li><strong><code>countDown()</code></strong>：执行操作的线程每完成一个任务就调用 <code>countDown()</code>，该方法内部调用 AQS 的 <code>releaseShared</code>。<code>CountDownLatch</code> 的 <code>tryReleaseShared</code> 逻辑是：在一个 CAS 循环中将 <code>state</code> 减 1。如果减 1 后的新值为 0，它就返回 <code>true</code>，这会触发 AQS 唤醒所有等待的线程。由于 <code>state</code> 只能减少，不能增加，所以 <code>CountDownLatch</code> 是一次性的，无法重置 。</li></ul></li><li><p><strong><code>doReleaseShared</code> 与 <code>setHeadAndPropagate</code> 机制：确保级联唤醒</strong></p><p>这是共享模式实现高性能的关键所在，也是其与独占模式在释放逻辑上的根本不同。</p><ul><li>当一个线程调用 <code>releaseShared</code> 并成功（<code>tryReleaseShared</code> 返回 <code>true</code>）后，AQS 会调用 <code>doReleaseShared</code> 方法。</li><li>与独占模式的 <code>release</code> 只唤醒一个后继节点不同，<code>doReleaseShared</code> 在唤醒队列头部的后继节点后，并不会立即停止。</li><li>它会检查是否还有剩余的共享资源（通过再次调用 <code>tryAcquireShared</code> 判断），或者检查被唤醒的节点的 <code>waitStatus</code> 是否需要传播。如果需要继续唤醒，它会通过 <code>setHeadAndPropagate</code> 方法，将新的头节点（即刚刚被唤醒的节点）的 <code>waitStatus</code> 设置为 <code>PROPAGATE</code>。</li><li>这个 <code>PROPAGATE</code> 状态是一个重要的信号。当这个新被唤醒的线程自己成功获取资源并成为新的头节点后，它会检查自己的 <code>waitStatus</code>。如果发现是 <code>PROPAGATE</code>，它就有责任继续唤醒它的后继节点，从而形成一个“级联唤醒”的效应。</li></ul><p><code>SIGNAL</code> 状态可以理解为一个直接的、一对一的唤醒契约：“我释放了资源，所以我负责唤醒你”。而 <code>PROPAGATE</code> 状态则是一个可传递的、一对多的唤醒信号，它的语义是：“一次共享释放发生了，并且可能还有更多资源可用，所以无论谁成为新的队列头，都有责任将唤醒的链条继续下去”。</p><p>这个精巧的机制对于最大化共享模式同步器的吞吐量至关重要。如果没有它，在一个拥有大量许可的 <code>Semaphore</code> 和众多等待线程的场景下，一次 <code>releaseShared</code> 可能只会唤醒一个线程。这个线程执行完后，又需要再次释放才能唤醒下一个，这会使并行的操作退化为串行。<code>PROPAGATE</code> 机制将唤醒过程本身变成了一个并发的、如波浪般传播的过程，这是一种更具可伸缩性和性能的卓越设计，完全符合 Doug Lea 的设计哲学 。</p></li></ul><hr><h4 id="第-6-部分-使用条件队列进行高级协调" tabindex="-1"><a class="header-anchor" href="#第-6-部分-使用条件队列进行高级协调"><span><strong>第 6 部分：使用条件队列进行高级协调</strong></span></a></h4><p>除了提供锁机制，AQS 还通过其内部类 <code>ConditionObject</code> 提供了 <code>Condition</code> 接口的实现，这是一种比 <code>Object</code> 的 <code>wait/notify</code> 机制更强大、更灵活的线程间通信方式。</p><ul><li><p><strong><code>ConditionObject</code> 内部类</strong></p><p><code>ConditionObject</code> 是 AQS 对 <code>java.util.concurrent.locks.Condition</code> 接口的实现 。它允许线程在满足某个前提条件（例如获取锁）后，因为某个业务条件（例如队列为空）尚未满足而暂停执行，并等待其他线程满足该业务条件后发来通知。这与等待锁本身被释放是两个完全不同的概念。</p></li><li><p><strong>双队列模型：AQS 同步队列与条件等待队列</strong></p><p>理解 <code>Condition</code> 的关键在于理解其背后的双队列模型。</p><ul><li><strong>同步队列 (Sync Queue)</strong>：即前面章节讨论的 AQS 核心的 CLH 等待队列。所有等待获取锁的线程都在这个队列中排队。</li><li><strong>条件队列 (Condition Wait Queue)</strong>：每个 <code>ConditionObject</code> 实例都维护着一个独立的、私有的等待队列。这个队列是一个简单的单向链表，用于存放调用了该 <code>Condition</code> 对象的 <code>await()</code> 方法而被挂起的线程。</li></ul><p>一个线程在任何时刻只能存在于这两个队列中的一个。</p></li><li><p><strong><code>await()</code> 的生命周期：释放锁、等待与重新获取</strong></p><p>当一个线程调用 <code>condition.await()</code> 方法时，它会经历一个严谨且复杂的过程 ：</p><ol><li><strong>前提检查</strong>：调用 <code>await()</code> 的线程必须已经持有与该 <code>Condition</code> 绑定的独占锁。</li><li><strong>入队并释放锁</strong>：<code>await()</code> 方法会原子性地执行两个操作：首先，将当前线程封装成一个节点（<code>waitStatus</code> 为 <code>CONDITION</code>）加入到条件队列的尾部；然后，它会<strong>完全释放</strong>当前线程持有的锁（通过调用 AQS 的 <code>release()</code> 方法，将 <code>state</code> 置为 0）。释放锁是至关重要的一步，因为它允许其他线程有机会获取锁，进而修改那个正在被等待的业务条件。</li><li><strong>挂起等待</strong>：释放锁之后，当前线程会调用 <code>LockSupport.park()</code> 将自己挂起，静静地在条件队列中等待信号。</li><li><strong>接收信号并转移</strong>：当其他线程调用了该 <code>Condition</code> 的 <code>signal()</code> 或 <code>signalAll()</code> 方法后，这个等待的节点会被从条件队列中移除，并被转移到 AQS 的<strong>同步队列</strong>的尾部。</li><li><strong>重新竞争锁</strong>：此时，被唤醒的线程和其他正在等待锁的线程一样，在同步队列中排队，重新竞争获取锁。</li><li><strong>返回</strong>：只有当该线程再次成功获取到锁之后，<code>await()</code> 方法才会返回。</li></ol></li><li><p><strong><code>signal()</code> 与 <code>signalAll()</code> 机制：将节点转移至同步队列</strong></p><p><code>signal()</code> 和 <code>signalAll()</code> 的作用不是直接唤醒线程，而是将其从“等待条件”的状态，转变为“等待锁”的状态。</p><ul><li><code>signal()</code>：此方法会从条件队列的头部取出一个（等待时间最长的）节点，并将其转移到 AQS 同步队列的尾部。被转移的线程并不会立即被 <code>unpark</code>，它只是获得了重新排队竞争锁的资格 。</li><li><code>signalAll()</code>：此方法会将条件队列中的<strong>所有</strong>节点，一次性地全部转移到 AQS 同步队列中 。</li></ul><p>“惊群效应”（Thundering Herd）问题是使用 <code>signalAll()</code> 时需要考虑的一个性能问题。当 <code>signalAll()</code> 被调用时，所有在条件队列中等待的线程都会被转移到同步队列中，并最终被一一唤醒。然而，通常只有一个线程能够成功获取锁并改变状态。其他被唤醒的线程在获取锁后，会发现它们等待的条件仍然不满足（或者已经被第一个幸运儿改变了），于是它们只好再次调用 <code>await()</code> 重新进入休眠状态。这个过程涉及大量的、非必要的上下文切换和锁竞争，效率低下。</p><p>因此，<code>signal()</code> 和 <code>signalAll()</code> 的选择是一个需要审慎考虑的权衡。如果任何一个等待的线程被唤醒后都能继续工作，那么使用 <code>signal()</code> 会更高效。如果多个线程被唤醒后都有可能继续工作，或者线程们在等待不同的子条件，那么使用 <code>signalAll()</code> 则是必须的，以保证正确性。AQS 提供了这两种工具，但开发者必须理解其背后的性能和正确性含义。AQS 的设计，通过将线程转移到同步队列而不是直接唤醒，在一定程度上序列化了锁的重新获取过程，缓解了惊群效应的冲击，但问题的根源仍然需要开发者在应用层面进行规避。</p></li></ul><hr><h4 id="第-7-部分-性能、权衡与设计理念" tabindex="-1"><a class="header-anchor" href="#第-7-部分-性能、权衡与设计理念"><span><strong>第 7 部分：性能、权衡与设计理念</strong></span></a></h4><p>AQS 不仅是一个功能强大的框架，更是一个在性能、公平性和灵活性之间做出精妙权衡的工程杰作。理解这些权衡是高效使用 AQS 的关键。</p><ul><li><p><strong>吞吐量 vs. 公平性：定量与定性分析</strong></p><p>AQS 提供的最直接的权衡之一就是在公平与非公平锁之间进行选择。</p><ul><li><strong>非公平锁的“闯入”优势</strong>：默认的非公平锁允许一个新到达的线程“闯入”并获取一个刚刚被释放的锁，即使等待队列中已经有其他线程等待了很长时间 。这种策略通常能带来更高的整体吞吐量。原因是，那个闯入的线程当前正在 CPU 上运行，获取锁无需进行线程上下文切换；而唤醒一个在队列中休眠的线程，则需要一次昂贵的上下文切换。</li><li><strong>公平锁的饥饿风险与应用场景</strong>：非公平策略的代价是可能导致“饥饿”（Starvation），即队列头部的线程可能被后续源源不断闯入的线程反复超越，导致长时间无法获得锁。公平锁通过 <code>hasQueuedPredecessors()</code> 检查，强制新来的线程排队，确保了严格的 FIFO 获取顺序，从而杜绝了饥饿现象 。但这牺牲了性能，因为它增加了上下文切换的概率。</li><li><strong>结论</strong>：AQS 及其实现（如 <code>ReentrantLock</code>）默认采用非公平策略是有充分理由的：在绝大多数应用场景中，整体系统的高吞吐量比严格的线程获取顺序更重要 。公平锁是一个专用工具，适用于那些公平性是功能性需求（而不仅仅是期望）的场景。</li></ul></li></ul><table><thead><tr><th><strong>表 3: 公平与非公平锁定策略对比</strong></th></tr></thead><tbody><tr><td><strong>特性</strong></td></tr><tr><td><strong>吞吐量</strong></td></tr><tr><td><strong>获取顺序</strong></td></tr><tr><td><strong>饥饿问题</strong></td></tr><tr><td><strong>典型用例</strong></td></tr></tbody></table><p>导出到 Google 表格</p><ul><li><p><strong>性能剖析：<code>ReentrantLock</code> vs. <code>synchronized</code> 在不同 JVM 版本下的表现</strong></p><ul><li><p><strong>历史背景</strong>：在 Java 5 时代，<code>ReentrantLock</code> 的性能显著优于 <code>synchronized</code> 。</p></li><li><p><strong>现代 JVM 的优化</strong>：从 Java 6 开始，JVM 对 <code>synchronized</code> 关键字进行了大量的底层优化，引入了偏向锁（Biased Locking）、轻量级锁（Lightweight Locking）、锁消除（Lock Elision）和自适应自旋（Adaptive Spinning）等技术。这些优化使得 <code>synchronized</code> 的性能得到了巨大提升，在低竞争场景下，其性能甚至可能反超 <code>ReentrantLock</code> 。</p></li><li><p><strong>高竞争场景</strong>：在线程竞争激烈的情况下，<code>ReentrantLock</code> 通常仍能保持性能优势。这得益于其更精密的、基于 AQS 的队列管理机制，相比 JVM 内部的监视器锁（monitor）实现，其可伸缩性更好 。</p></li><li><p><strong>结论</strong>：现代 Java 开发中，选择 <code>ReentrantLock</code> 还是 <code>synchronized</code>，不应再单纯地基于性能臆断，因为性能表现高度依赖于具体的应用场景和竞争程度 。更合理的决策依据是</p><p><strong>功能需求</strong>：当你需要 <code>ReentrantLock</code> 提供的 <code>synchronized</code> 所不具备的高级功能时（如可中断的锁等待、带超时的锁等待、公平性选择、或与多个 <code>Condition</code> 对象协同工作），就应该选择 <code>ReentrantLock</code>。在仅需基本互斥同步的简单场景下，<code>synchronized</code> 关键字由于其语法简洁、不易出错的特点，通常是更佳的选择 。</p></li></ul></li><li><p><strong>Doug Lea 的设计理念：可伸缩性、效率与灵活性</strong></p><p>通过研读 Doug Lea 的经典论文《The java.util.concurrent Synchronizer Framework》，可以更深刻地理解 AQS 背后的设计哲学 。</p><ul><li><strong>首要目标：可伸缩性 (Scalability)</strong>。AQS 的设计旨在即使在高竞争环境下也能保持高效。同步开销应与等待线程的数量无关，保持为一个常数。这主要通过基于 CAS 的无锁队列操作和避免让等待线程自旋来实现。</li><li><strong>资源平衡</strong>。设计在 CPU 时间、内存总线流量和线程调度开销之间寻求一种务实的平衡。它是一个工程上的解决方案，而非纯理论模型 。</li><li><strong>包容公平性</strong>。框架被明确设计为不强制推行任何一种公平策略。它通过提供 <code>hasQueuedPredecessors()</code> 等钩子方法，允许开发者自行实现公平同步器，并清晰地认识到这背后是吞吐量与公平性之间的权衡 。</li><li><strong>灵活性与可重用性</strong>。最终目标是创建一个小巧而强大的框架，能够作为绝大多数同步器的实现基础，从而促进代码重用和整个并发库的一致性 。</li></ul></li></ul><hr><h4 id="第-8-部分-结论-aqs-的不朽遗产" tabindex="-1"><a class="header-anchor" href="#第-8-部分-结论-aqs-的不朽遗产"><span><strong>第 8 部分：结论：AQS 的不朽遗产</strong></span></a></h4><ul><li><p><strong>AQS 对 Java 并发编程的贡献总结</strong></p><p><code>AbstractQueuedSynchronizer</code> 无疑是 Java 并发库中最卓越的工程杰作之一。它为构建各种同步原语提供了一个健壮、可伸缩且极其灵活的基础框架。其核心贡献可以总结为：</p><ul><li>通过<strong>机制与策略分离</strong>的设计原则，极大地简化了新型同步器的开发。</li><li>通过<strong>基于 CAS 的原子状态管理</strong>，提供了高效、无锁的状态更新机制。</li><li>通过<strong>精巧的 CLH 变体等待队列</strong>，实现了可伸缩的线程排队和调度。</li></ul><p>AQS 的出现，不仅催生了 <code>java.util.concurrent</code> 包中一系列高质量的并发工具，更重要的是，它为整个 Java 社区提供了一种思考和构建并发控制组件的标准化范式。</p></li><li><p><strong>实现自定义同步器的常见陷阱与最佳实践</strong></p><p>尽管 AQS 强大，但构建自定义同步器是一项专家级的任务，充满了陷阱。</p><ul><li><strong>陷阱 1：错误的 <code>tryRelease</code> 逻辑</strong>。一个常见的错误是 <code>tryRelease</code> 的返回值不符合契约。如果错误地返回 <code>true</code>，可能导致不必要的线程唤醒，降低性能；如果错误地返回 <code>false</code>，则可能导致等待的线程永远无法被唤醒，造成“线程卡死”。</li><li><strong>陷阱 2：破坏 <code>Condition</code> 契约</strong>。调用 <code>await()</code> 的线程必须持有锁，调用 <code>signal()</code> 的线程也必须持有锁。违反此规定将抛出 <code>IllegalMonitorStateException</code> 。</li><li><strong>陷阱 3：忘记 <code>finally</code> 代码块</strong>。与 <code>synchronized</code> 不同，使用 <code>ReentrantLock</code> 等基于 AQS 的锁时，必须将 <code>unlock()</code> 调用放在 <code>finally</code> 块中。这是为了确保即使在 <code>try</code> 块中发生异常，锁也一定会被释放，从而避免死锁 。这是一个极易被忽视但后果严重的错误。</li><li><strong>最佳实践</strong>：<strong>优先使用 JUC 提供的标准同步器</strong>。在绝大多数情况下，<code>ReentrantLock</code>、<code>Semaphore</code>、<code>CountDownLatch</code>、<code>ReadWriteLock</code> 等已经能够满足需求。只有在遇到标准库无法解决的、独特的、且被充分理解的并发问题时，才应考虑构建自定义同步器。这是一条需要高度审慎和专业知识的道路 。</li></ul></li></ul><p><code>AbstractQueuedSynchronizer</code> 的设计和实现，集中体现了现代并发编程的智慧，它将复杂的底层细节完美封装，同时向上层暴露了清晰、强大且灵活的扩展点。对于任何希望深入理解 Java 并发机制的开发者而言，AQS 都是一座必须翻越且值得探索的高峰。</p>',40)]))}const l=o(r,[["render",n]]),p=JSON.parse('{"path":"/8gu/AQS%E5%8E%9F%E7%90%86%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90.html","title":"Java AbstractQueuedSynchronizer 深度解析：并发控制的基石","lang":"zh-CN","frontmatter":{"description":"Java AbstractQueuedSynchronizer 深度解析：并发控制的基石 第 1 部分：AbstractQueuedSynchronizer (AQS) 导论 AQS 在 java.util.concurrent (JUC) 框架中的角色与重要性 在 Java 并发编程的宏伟蓝图之中，AbstractQueuedSynchronizer...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java AbstractQueuedSynchronizer 深度解析：并发控制的基石\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-14T03:48:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/8gu/AQS%E5%8E%9F%E7%90%86%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"Java AbstractQueuedSynchronizer 深度解析：并发控制的基石"}],["meta",{"property":"og:description","content":"Java AbstractQueuedSynchronizer 深度解析：并发控制的基石 第 1 部分：AbstractQueuedSynchronizer (AQS) 导论 AQS 在 java.util.concurrent (JUC) 框架中的角色与重要性 在 Java 并发编程的宏伟蓝图之中，AbstractQueuedSynchronizer..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T03:48:22.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-14T03:48:22.000Z"}]]},"git":{"createdTime":1755143302000,"updatedTime":1755143302000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":1,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":32.66,"words":9797},"filePathRelative":"8gu/AQS原理深入解析.md","autoDesc":true}');export{l as comp,p as data};
