import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as e}from"./app-Cas6wl3X.js";const n={};function l(r,i){return e(),t("div",null,i[0]||(i[0]=[a(`<h1 id="不同jdk版本中字符串常量池的演进" tabindex="-1"><a class="header-anchor" href="#不同jdk版本中字符串常量池的演进"><span>不同JDK版本中字符串常量池的演进</span></a></h1><p>字符串常量池（String Constant Pool）是Java中一个非常重要的概念，它用于存储字符串字面量和通过<code>String.intern()</code>方法添加的字符串。其在内存中的位置随着JDK版本的更迭发生了几次关键变化，这些变化主要影响了内存管理和性能。</p><h3 id="jdk-6-及更早版本" tabindex="-1"><a class="header-anchor" href="#jdk-6-及更早版本"><span>JDK 6 及更早版本</span></a></h3><p>在JDK 6以及之前的版本中，字符串常量池位于 <strong>方法区（Method Area）</strong> 的一个特定部分，即 <strong>永久代（Permanent Generation, PermGen）</strong>。</p><ul><li><strong>位置</strong>: 永久代（PermGen）。</li><li><strong>特点</strong>: <ul><li>永久代是方法区的一种实现，它拥有<strong>固定大小</strong>的内存空间，可以通过JVM参数 <code>-XX:PermSize</code> 和 <code>-XX:MaxPermSize</code> 进行设置。</li><li>这块内存区域的垃圾回收（GC）条件非常苛刻，效率也较低。</li></ul></li><li><strong>主要问题</strong>: <ul><li>由于永久代大小固定，如果程序在运行时动态生成并<code>intern()</code>了大量字符串（例如，通过循环调用<code>String.intern()</code>），很容易将永久代填满，从而抛出 <code>java.lang.OutOfMemoryError: PermGen space</code> 异常，导致应用崩溃。这在需要处理大量动态字符串的场景中是一个常见的痛点。</li></ul></li></ul><h3 id="jdk-7" tabindex="-1"><a class="header-anchor" href="#jdk-7"><span>JDK 7</span></a></h3><p>JDK 7版本对字符串常量池的位置做出了一个里程碑式的改动：将其从永久代移动到了 <strong>Java堆（Java Heap）</strong> 中。</p><ul><li><strong>位置</strong>: Java堆（Heap）。</li><li><strong>特点</strong>: <ul><li>字符串常量池不再占用独立的永久代空间，而是和普通的Java对象一样，在堆内存中分配。</li><li>这意味着字符串常量池的大小受整个堆大小（通过 <code>-Xmx</code> 参数设置）的限制，空间更加灵活和宽裕。</li><li>堆中的字符串可以被常规的垃圾回收器（如Minor GC和Major GC）高效地管理和回收。</li></ul></li><li><strong>带来的好处</strong>: <ul><li>极大地降低了因字符串过多而导致 <code>PermGen space</code> 内存溢出的风险。</li><li><code>String.intern()</code> 方法的实现也发生了变化。如果一个字符串已经存在于堆中，<code>intern()</code>会直接返回堆中该对象的引用，而不会在永久代中再创建一个副本。</li></ul></li></ul><h4 id="代码示例分析-jdk-6-vs-jdk-7" tabindex="-1"><a class="header-anchor" href="#代码示例分析-jdk-6-vs-jdk-7"><span>代码示例分析 (JDK 6 vs JDK 7)</span></a></h4><p>考虑以下代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ja&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;va&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;java&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s3);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 在JDK 6和JDK 7+中结果不同</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s3);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 结果始终为true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>在 JDK 6 中</strong>: <ol><li><code>s1</code> 指向堆中一个新建的 &quot;java&quot; 字符串对象。</li><li><code>s1.intern()</code> 被调用时，JVM发现在字符串常量池（位于PermGen）中还没有 &quot;java&quot; 这个字符串。于是，它会在<strong>PermGen中创建一个新的 &quot;java&quot; 字符串</strong>，并让<code>s2</code>指向它。</li><li><code>s3</code> 指向的是常量池中的 &quot;java&quot; 字符串。</li><li>因此，<code>s1</code> 指向堆，而 <code>s3</code> 指向永久代，地址不同。<strong>结果为 <code>false</code></strong>。</li></ol></li><li><strong>在 JDK 7/8+ 中</strong>: <ol><li><code>s1</code> 同样指向堆中一个新建的 &quot;java&quot; 字符串对象。</li><li><code>s1.intern()</code> 被调用时，JVM发现字符串常量池（现在位于堆中）里没有 &quot;java&quot;。于是，它<strong>不会在堆中再创建一个新的 &quot;java&quot; 对象</strong>，而是会将 <code>s1</code> 的引用直接记录到常量池中，并返回这个引用。</li><li><code>s3</code> 在初始化时，会去常量池查找，此时会直接获取到上一步存入的 <code>s1</code> 的引用。</li><li>因此，<code>s1</code> 和 <code>s3</code> 指向的是堆中同一个对象。<strong>结果为 <code>true</code></strong>。</li></ol></li></ul><h3 id="jdk-8-及更高版本" tabindex="-1"><a class="header-anchor" href="#jdk-8-及更高版本"><span>JDK 8 及更高版本</span></a></h3><p>JDK 8移除了永久代（PermGen），取而代之的是 <strong>元空间（Metaspace）</strong>，它使用的是本地内存（Native Memory）。</p><ul><li><strong>位置</strong>: 字符串常量池**仍然在Java堆（Heap）**中。</li><li><strong>特点</strong>: <ul><li>JDK 8的主要变化是方法区的实现方式变了（元空间取代了永久代），但这并<strong>没有影响</strong>在JDK 7中已经迁移到堆里的字符串常量池。</li><li>所以，从JDK 7开始，字符串常量池的位置和行为基本保持一致，一直延续到最新的JDK版本。</li><li>元空间的引入主要是为了解决永久代大小固定、容易溢出的问题，它默认可以动态扩展，只受限于可用的本地内存。</li></ul></li></ul><h3 id="总结对比" tabindex="-1"><a class="header-anchor" href="#总结对比"><span>总结对比</span></a></h3><table><thead><tr><th>JDK 版本</th><th>字符串常量池位置</th><th>主要特点和影响</th></tr></thead><tbody><tr><td><strong>JDK 6 及更早</strong></td><td><strong>永久代 (PermGen)</strong></td><td>空间大小固定，GC效率低。大量使用<code>intern()</code>容易导致 <code>OutOfMemoryError: PermGen space</code>。</td></tr><tr><td><strong>JDK 7</strong></td><td><strong>Java 堆 (Heap)</strong></td><td>移至堆区，空间更灵活，受GC统一管理。大大降低了内存溢出的风险，<code>intern()</code>行为发生改变。</td></tr><tr><td><strong>JDK 8 及更高</strong></td><td><strong>Java 堆 (Heap)</strong></td><td>位置与JDK 7保持一致。永久代被元空间（Metaspace）取代，但字符串常量池仍在堆中，行为没有变化。</td></tr></tbody></table><p>总而言之，将字符串常量池从永久代迁移到堆区是Java内存管理方面的一项重要优化，它解决了长期困扰开发者的<code>PermGen space</code>问题，使得字符串的使用更加安全和高效</p>`,18)]))}const h=s(n,[["render",l]]),p=JSON.parse('{"path":"/8gu/%E4%B8%8D%E5%90%8CJDK%E7%89%88%E6%9C%AC%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E6%BC%94%E8%BF%9B.html","title":"不同JDK版本中字符串常量池的演进","lang":"zh-CN","frontmatter":{"description":"不同JDK版本中字符串常量池的演进 字符串常量池（String Constant Pool）是Java中一个非常重要的概念，它用于存储字符串字面量和通过String.intern()方法添加的字符串。其在内存中的位置随着JDK版本的更迭发生了几次关键变化，这些变化主要影响了内存管理和性能。 JDK 6 及更早版本 在JDK 6以及之前的版本中，字符串常...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"不同JDK版本中字符串常量池的演进\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-14T03:48:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/8gu/%E4%B8%8D%E5%90%8CJDK%E7%89%88%E6%9C%AC%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E6%BC%94%E8%BF%9B.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"不同JDK版本中字符串常量池的演进"}],["meta",{"property":"og:description","content":"不同JDK版本中字符串常量池的演进 字符串常量池（String Constant Pool）是Java中一个非常重要的概念，它用于存储字符串字面量和通过String.intern()方法添加的字符串。其在内存中的位置随着JDK版本的更迭发生了几次关键变化，这些变化主要影响了内存管理和性能。 JDK 6 及更早版本 在JDK 6以及之前的版本中，字符串常..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T03:48:22.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-14T03:48:22.000Z"}]]},"git":{"createdTime":1755143302000,"updatedTime":1755143302000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":1,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":4.16,"words":1247},"filePathRelative":"8gu/不同JDK版本中字符串常量池的演进.md","autoDesc":true}');export{h as comp,p as data};
