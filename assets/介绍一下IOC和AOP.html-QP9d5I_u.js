import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as e}from"./app-Bui1sgfn.js";const t={};function l(r,i){return e(),n("div",null,i[0]||(i[0]=[a(`<h1 id="spring-核心揭秘-ioc-与-aop" tabindex="-1"><a class="header-anchor" href="#spring-核心揭秘-ioc-与-aop"><span>Spring 核心揭秘：IoC 与 AOP</span></a></h1><p>Spring 框架之所以能够在 Java 开发中经久不衰，很大程度上归功于其两大核心思想：<strong>控制反转 (Inversion of Control, IoC)</strong> 和 <strong>面向切面编程 (Aspect-Oriented Programming, AOP)</strong>。理解了它们，就等于掌握了 Spring 的精髓。</p><h2 id="一、-ioc-控制反转-——-专业的事交给专业的人" tabindex="-1"><a class="header-anchor" href="#一、-ioc-控制反转-——-专业的事交给专业的人"><span>一、 IoC (控制反转) —— 专业的事交给专业的人</span></a></h2><p>IoC 不是一个具体的技术，而是一种<strong>设计思想</strong>。它彻底改变了我们组织代码和管理对象的方式。</p><h3 id="_1-控制-指的是什么" tabindex="-1"><a class="header-anchor" href="#_1-控制-指的是什么"><span>1. “控制”指的是什么？</span></a></h3><p>在传统的程序开发中，我们通常直接在代码中通过 <code>new</code> 关键字来创建对象。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 传统方式：自己创建依赖的对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDao</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userDao </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserDaoImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 主动创建依赖</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> findUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>UserService</code> <strong>主动控制</strong>了 <code>UserDaoImpl</code> 对象的创建。如果未来需要将 <code>UserDaoImpl</code> 更换为 <code>UserDaoMongoImpl</code>，就必须修改 <code>UserService</code> 的源代码。这种代码间的强耦合关系，使得系统难以维护和扩展。</p><h3 id="_2-如何-反转" tabindex="-1"><a class="header-anchor" href="#_2-如何-反转"><span>2. 如何“反转”？</span></a></h3><p><strong>控制反转</strong>的核心思想是：<strong>将创建和管理对象的“控制权”从我们的应用程序代码中移交出去，交给一个外部的“容器”(Container) 来负责。</strong></p><p>这个容器，在 Spring 中就是 <strong>IoC 容器</strong>。我们不再自己 <code>new</code> 对象，而是告诉容器我们需要什么，容器会主动把我们需要的东西“注入”进来。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Spring IoC 方式：由容器注入依赖</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDao</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 只声明依赖，不主动创建</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 通过构造函数或 setter 方法让容器注入</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserDao</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> userDao;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> findUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        userDao</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，<code>UserService</code> 不再关心 <code>UserDao</code> 的具体实现是什么，也不关心它如何被创建。它只负责使用。对象的创建和它们之间依赖关系的管理，都由 Spring IoC 容器完成了。<strong>控制权从应用代码反转到了 Spring 容器</strong>，这就是“控制反转”。</p><h3 id="_3-依赖注入-dependency-injection-di" tabindex="-1"><a class="header-anchor" href="#_3-依赖注入-dependency-injection-di"><span>3. 依赖注入 (Dependency Injection, DI)</span></a></h3><p>DI 是 IoC 思想最主流、最经典的实现方式。上面代码中，容器将 <code>userDao</code> 实例传递（注入）给 <code>userService</code> 的过程，就是<strong>依赖注入</strong>。</p><p>Spring 支持多种注入方式：</p><ul><li><strong>构造函数注入 (Constructor Injection)</strong>: 通过构造函数传入依赖，最推荐的方式，能保证对象在创建后就是完整可用的。</li><li><strong>Setter 注入 (Setter Injection)</strong>: 通过 <code>setXxx()</code> 方法注入依赖，灵活性更高。</li><li><strong>字段注入 (Field Injection)</strong>: 直接在字段上使用 <code>@Autowired</code> 注解，代码最简洁，但存在一些缺点（如不利于单元测试）。</li></ul><p><strong>总结：IoC 是一种思想，DI 是其具体实现。它们的目标是“解耦”，让组件之间的关系变得松散，从而使整个系统更加灵活、可维护、易于测试。</strong></p><h2 id="二、-aop-面向切面编程-——-给你的代码-加点料" tabindex="-1"><a class="header-anchor" href="#二、-aop-面向切面编程-——-给你的代码-加点料"><span>二、 AOP (面向切面编程) —— 给你的代码“加点料”</span></a></h2><p>如果说 IoC 是 Spring 的骨架，负责组装对象，那么 AOP 就是 Spring 的血肉，它允许我们在不修改源代码的情况下，为程序增加额外的功能。</p><h3 id="_1-什么是-切面" tabindex="-1"><a class="header-anchor" href="#_1-什么是-切面"><span>1. 什么是“切面”？</span></a></h3><p>在我们的业务逻辑中，常常会散布着一些与核心业务无关，但又必不可少的功能，比如：</p><ul><li>日志记录</li><li>事务管理</li><li>安全检查</li><li>性能监控</li></ul><p>这些功能像藤蔓一样缠绕在我们的核心业务代码中，导致代码臃肿、难以维护。这种散布在各处的通用功能被称为 <strong>横切关注点 (Cross-cutting Concerns)</strong>。</p><p><strong>AOP 的目标就是将这些“横切关注点”从业务逻辑中抽离出来，形成一个独立的模块，这个模块就叫“切面” (Aspect)。</strong></p><h3 id="_2-aop-核心概念" tabindex="-1"><a class="header-anchor" href="#_2-aop-核心概念"><span>2. AOP 核心概念</span></a></h3><p>理解 AOP 需要先了解几个关键术语：</p><ul><li><strong>Aspect (切面)</strong>: 对横切关注点的封装。它包含了要在哪里（Pointcut）以及做什么（Advice）的完整定义。例如，一个“日志切面”就封装了所有关于日志记录的逻辑。</li><li><strong>Join Point (连接点)</strong>: 程序执行过程中的一个特定位置，比如方法的调用、异常的抛出等。在 Spring AOP 中，连接点通常指的就是<strong>方法的执行</strong>。</li><li><strong>Advice (通知)</strong>: 切面在特定的连接点上执行的<strong>动作</strong>。通知有多种类型： <ul><li><code>@Before</code>: 在目标方法执行<strong>前</strong>运行。</li><li><code>@After</code>: 在目标方法执行<strong>后</strong>运行（无论成功还是失败）。</li><li><code>@AfterReturning</code>: 在目标方法<strong>成功返回后</strong>运行。</li><li><code>@AfterThrowing</code>: 在目标方法<strong>抛出异常后</strong>运行。</li><li><code>@Around</code>: <strong>环绕</strong>目标方法执行，功能最强大，可以控制方法是否执行，修改返回值等。</li></ul></li><li><strong>Pointcut (切点)</strong>: 一个<strong>表达式</strong>，用于筛选匹配的连接点。它精确地定义了 Advice 应该作用于哪些方法的调用上。</li><li><strong>Target (目标对象)</strong>: 被一个或多个切面所“通知”的对象。</li><li><strong>Proxy (代理)</strong>: AOP 的核心机制。Spring AOP 会为目标对象创建一个<strong>代理对象</strong>。当外部调用目标方法时，实际上是调用了这个代理对象的方法，代理对象会在调用原始方法前后，执行切面中定义的 Advice。</li></ul><p><strong>简单来说，AOP 就是在说：“嘿，Spring！请用我这个‘切面’(Aspect)，在符合‘切点’(Pointcut) 描述的所有地方，执行我指定的‘通知’(Advice)。”</strong></p><h3 id="_3-aop-的工作原理" tabindex="-1"><a class="header-anchor" href="#_3-aop-的工作原理"><span>3. AOP 的工作原理</span></a></h3><p>Spring AOP 默认使用两种动态代理技术来实现：</p><ol><li><strong>JDK 动态代理</strong>: 如果目标对象实现了接口，Spring 会使用 JDK 自带的动态代理来创建代理对象。</li><li><strong>CGLIB 代理</strong>: 如果目标对象没有实现接口，Spring 会使用 CGLIB 库，通过继承目标类的方式来创建代理对象。</li></ol><p>无论哪种方式，最终效果都是在不侵入原始代码的情况下，将通用功能（如日志、事务）织入到业务流程中。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><strong>IoC</strong> 关注的是<strong>对象之间的关系</strong>，通过解耦让系统结构更清晰。</li><li><strong>AOP</strong> 关注的是<strong>分离业务逻辑和横切关注点</strong>，让代码职责更单一。</li></ul><p>IoC 是基础，它负责创建和管理包括切面和目标对象在内的所有 Bean。AOP 在此基础上，通过动态代理技术，将切面的功能动态地应用到目标 Bean 上。两者相辅相成，共同构成了 Spring 框架强大而灵活的技术内核。</p>`,36)]))}const h=s(t,[["render",l]]),d=JSON.parse('{"path":"/8gu/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8BIOC%E5%92%8CAOP.html","title":"Spring 核心揭秘：IoC 与 AOP","lang":"zh-CN","frontmatter":{"description":"Spring 核心揭秘：IoC 与 AOP Spring 框架之所以能够在 Java 开发中经久不衰，很大程度上归功于其两大核心思想：控制反转 (Inversion of Control, IoC) 和 面向切面编程 (Aspect-Oriented Programming, AOP)。理解了它们，就等于掌握了 Spring 的精髓。 一、 IoC (...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 核心揭秘：IoC 与 AOP\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-14T03:48:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/8gu/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8BIOC%E5%92%8CAOP.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"Spring 核心揭秘：IoC 与 AOP"}],["meta",{"property":"og:description","content":"Spring 核心揭秘：IoC 与 AOP Spring 框架之所以能够在 Java 开发中经久不衰，很大程度上归功于其两大核心思想：控制反转 (Inversion of Control, IoC) 和 面向切面编程 (Aspect-Oriented Programming, AOP)。理解了它们，就等于掌握了 Spring 的精髓。 一、 IoC (..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T03:48:22.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-14T03:48:22.000Z"}]]},"git":{"createdTime":1755143302000,"updatedTime":1755143302000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":1,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":5.37,"words":1610},"filePathRelative":"8gu/介绍一下IOC和AOP.md","autoDesc":true}');export{h as comp,d as data};
