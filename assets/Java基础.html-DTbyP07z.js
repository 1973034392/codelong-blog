import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,e as n,d as i,b as r,w as l,r as o,o as h}from"./app-_nGuzTCB.js";const c={};function d(g,a){const s=o("font");return h(),p("div",null,[a[5]||(a[5]=e(`<h1 id="java基础" tabindex="-1"><a class="header-anchor" href="#java基础"><span>Java基础</span></a></h1><h2 id="反射相关" tabindex="-1"><a class="header-anchor" href="#反射相关"><span>反射相关</span></a></h2><p>反射机制指的是程序在<strong>运行时</strong>能够获取自身的信息。</p><p>反射操作的<strong>目标对象</strong>（实例）是从<strong>堆（Heap）<strong>中获得的，而类的</strong>元数据</strong>（如方法、字段、构造方法等结构信息）是从<strong>方法区（Method Area）或元空间（Metaspace）</strong> 中获得的。</p><p><strong>为什么反射慢?</strong></p><ul><li>由于反射涉及动态解析的类型，<strong>因此不能执行某些Java虚拟机优化</strong>，如JIT优化。</li><li>在使用反射时，参数需要包装（<strong>boxing</strong>)成Object[] 类型，但是真正方法执行的时候，又需要再拆包（<strong>unboxing</strong>)成真正的类型，这些动作不仅消耗时间，而且过程中也会产生很多对象，对象一多就容易导致GC，GC也会导致应用变慢。</li><li>反射调用方法时会从方法数组中遍历查找，并且会检查可见性。这些动作都是耗时的。</li></ul><h2 id="a-a-b-与-a-b-的区别" tabindex="-1"><a class="header-anchor" href="#a-a-b-与-a-b-的区别"><span>a=a+b 与 a+=b 的区别</span></a></h2><p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // error : cannot convert from int to byte</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // ok</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// (因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="finalize是什么" tabindex="-1"><a class="header-anchor" href="#finalize是什么"><span>finalize是什么</span></a></h2><p>Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的，但是什么时候调用 finalize 没有保证。</p><h2 id="为什么不能用bigdecimal的equals方法做等值比较" tabindex="-1"><a class="header-anchor" href="#为什么不能用bigdecimal的equals方法做等值比较"><span>为什么不能用BigDecimal的equals方法做等值比较？</span></a></h2><p>因为BigDecimal的equals方法和compareTo并不一样，equals方法会比较两部分内容，分别是值（value）和标度（scale），而对于0.1和0.10这两个数字，他们的值虽然一样，但是精度是不一样的，所以在使用equals比较的时候会返回false。</p><h2 id="string、stringbuilder和stringbuffer" tabindex="-1"><a class="header-anchor" href="#string、stringbuilder和stringbuffer"><span>String、StringBuilder和StringBuffer</span></a></h2><p><strong>Java中的+对字符串的拼接，其实现原理是使用StringBuilder.append。</strong></p><p>StringBuilder<strong>线程不安全</strong> StringBuffer<strong>线程安全</strong></p><h2 id="jdk动态代理和cglib动态代理的区别" tabindex="-1"><a class="header-anchor" href="#jdk动态代理和cglib动态代理的区别"><span>JDK动态代理和Cglib动态代理的区别</span></a></h2><p>JDK 动态代理是基于接口的，所以要求代理类一定是有定义接口的。</p><p>CGLIB 基于 ASM 字节码生成工具，它是通过继承的方式生成目标类的子类来实现代理类，所以 要注意 final 方法。</p><blockquote><p>它们之间的性能随着 JDK 版本的不同而不同</p><ul><li>jdk6 下，在运行次数较少的情况下，jdk动态代理与 cglib 差距不明显，甚至更快一 些；而当调用次数增加之后， cglib 表现稍微更快一些</li><li>jdk7 下，情况发生了逆转！在运行次数较少（1,000,000）的情况下，jdk动态代理比 cglib 快了差不多30%；而当调用次数增加之后(50,000,000)， 动态代理比 cglib 快了 接近1倍</li><li>jdk8 表现和 jdk7 基本一致</li></ul></blockquote><h2 id="finally中代码一定会执行吗" tabindex="-1"><a class="header-anchor" href="#finally中代码一定会执行吗"><span>finally中代码一定会执行吗？</span></a></h2><p>如果没有符合这两个条件的话，finally中的代码就无法被执行，如发生以下情况，都会导致finally不会执行：</p><p>1、System.exit()方法被执行</p><p>2、Runtime.getRuntime().halt()方法被执行</p><p>3、try或者catch中有死循环</p><p>4、操作系统强制杀掉了JVM进程，如执行了kill -9</p><p>5、其他原因导致的虚拟机崩溃了</p><p>6、虚拟机所运行的环境挂了，如计算机电源断了</p><p>7、如果一个finally是由守护线程执行的，那么是不保证一定能执行的，如果这时候JVM要退出，JVM会检查其他非守护线程，如果都执行完了，那么就直接退出了。这时候finally可能就没办法执行完。</p><h2 id="什么是aio、bio和nio" tabindex="-1"><a class="header-anchor" href="#什么是aio、bio和nio"><span>什么是AIO、BIO和NIO？</span></a></h2><p>BIO （Blocking I/O）：<strong>同步阻塞I/O</strong>，是JDK1.4之前的传统IO模型。 线程发起IO请求后，一直阻塞，直到缓冲区数据就绪后，再进入下一步操作。</p>`,31)),n("p",null,[a[1]||(a[1]=i("NIO （")),r(s,{style:{color:"rgb(37, 41, 51)"}},{default:l(()=>a[0]||(a[0]=[i("Non-Blocking")])),_:1}),a[2]||(a[2]=i(" I/O）：")),a[3]||(a[3]=n("strong",null,"同步非阻塞IO",-1)),a[4]||(a[4]=i("，线程发起IO请求后，不需要阻塞，立即返回。用户线程不原地等待IO缓冲区，可以先做一些其他操作，只需要定时轮询检查IO缓冲区数据是否就绪即可。"))]),a[6]||(a[6]=e('<p>AIO （ Asynchronous I/O）：<strong>异步非阻塞I/O模型</strong>。线程发起IO请求后，不需要阻塞，立即返回，也不需要定时轮询检查结果，异步IO操作之后会回调通知调用方。</p><figure><img src="https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1705133708567-49955e01-446a-4fef-b441-4356180eac5c-289154.png" alt="1705133708567-49955e01-446a-4fef-b441-4356180eac5c.png" tabindex="0" loading="lazy"><figcaption>1705133708567-49955e01-446a-4fef-b441-4356180eac5c.png</figcaption></figure><h2 id="copyonwritearraylist是如何实现线程安全的" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist是如何实现线程安全的"><span>CopyonWriteArraylist是如何实现线程安全的</span></a></h2><p>CopyOnWriteArrayList底层也是通过一个数组保存数据，使用volatile关键字修饰数组，保证当前线程对数组对象重新赋值后，其他线程可以及时感知到。</p><p>在写入操作时，加了一把互斥锁ReentrantLock以保证线程安全。</p><p>看到源码可以知道写入新元素时，首先会先将原来的数组拷贝一份并且让原来数组的长度+1后就得到了一个新数组，新数组里的元素和旧数组的元素一样并且长度比旧数组多一个长度，然后将新加入的元素放置都在新数组最后一个位置后，用新数组的地址替换掉老数组的地址就能得到最新的数据了。</p><p>在我们执行替换地址操作之前，读取的是老数组的数据，数据是有效数据；执行替换地址操作之后，读取的是新数组的数据，同样也是有效数据，而且使用该方式能比读写都加锁要更加的效率。</p><p>现在我们来看读操作，读是没有加锁的，所以读是一直都能读</p><h2 id="hashmap的大小为什么是2的n次方" tabindex="-1"><a class="header-anchor" href="#hashmap的大小为什么是2的n次方"><span>HashMap的大小为什么是2的n次方？</span></a></h2><p>在 JDK1.7 中，HashMap 整个扩容过程就是分别取出数组元素，一般该元素是最后一个放入链表中的元素，然后遍历以该元素为头的单向链表元素，依据每个被遍历元素的 hash 值计算其在新数组中的下标，然后进行交换。这样的扩容方式会将原来哈希冲突的单向链表尾部变成扩容后单向链表的头部。</p><p>而在 JDK 1.8 中，HashMap 对扩容操作做了优化。由于扩容数组的长度是 2 倍关系，所以对于假设初始 tableSize = 4 要扩容到 8 来说就是 0100 到 1000 的变化（左移一位就是 2 倍），在扩容中只用判断原来的 hash 值和左移动的一位（newtable 的值）按位与操作是 0 或 1 就行，0 的话索引不变，1 的话索引变成原索引加上扩容前数组。</p><p>之所以能通过这种“与运算“来重新分配索引，是因为 hash 值本来就是随机的，而 hash 按位与上 newTable 得到的 0（扩容前的索引位置）和 1（扩容前索引位置加上扩容前数组长度的数值索引处）就是随机的，所以扩容的过程就能把之前哈希冲突的元素再随机分布到不同的索引中去。</p><h2 id="concurrenthashmap怎么实现的" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap怎么实现的"><span>ConcurrentHashMap怎么实现的？</span></a></h2><blockquote><p>JDK 1.7 ConcurrentHashMap</p></blockquote><p>在 JDK 1.7 中它使用的是数组加链表的形式实现的，而数组又分为：大数组 Segment 和小数组 HashEntry。 Segment 是一种可重入锁（ReentrantLock），在 ConcurrentHashMap 里扮演锁的角色；HashEntry 则用于存储键值对数据。一个 ConcurrentHashMap 里包含一个 Segment 数组，一个 Segment 里包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素。</p><figure><img src="https://cdn.xiaolincoding.com//picgo/1721807523151-41ad316a-6264-48e8-9704-5b362bc0083c.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>JDK 1.7 ConcurrentHashMap 分段锁技术将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。</p><blockquote><p>JDK 1.8 ConcurrentHashMap</p></blockquote><p>在 JDK 1.7 中，ConcurrentHashMap 虽然是线程安全的，但因为它的底层实现是数组 + 链表的形式，所以在数据比较多的情况下访问是很慢的，因为要遍历整个链表，而 JDK 1.8 则使用了数组 + 链表/红黑树的方式优化了 ConcurrentHashMap 的实现，具体实现结构如下：</p><figure><img src="https://cdn.xiaolincoding.com//picgo/1721807523128-7b1419e7-e6ba-47e6-aba0-8b29423a8ce7.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>JDK 1.8 ConcurrentHashMap JDK 1.8 ConcurrentHashMap 主要通过 volatile + CAS 或者 synchronized 来实现的线程安全的。添加元素时首先会判断容器是否为空：</p><ul><li>如果为空则使用 volatile 加 CAS 来初始化</li><li>如果容器不为空，则根据存储的元素计算该位置是否为空。 <ul><li>如果根据存储的元素计算结果为空，则利用 CAS 设置该节点；</li><li>如果根据存储的元素计算结果不为空，则使用 synchronized ，然后，遍历桶中的数据，并替换或新增节点到桶中，最后再判断是否需要转为红黑树，这样就能保证并发访问时的线程安全了。</li></ul></li></ul><p>如果把上面的执行用一句话归纳的话，就相当于是ConcurrentHashMap通过对头结点加锁来保证线程安全的，锁的粒度相比 Segment 来说更小了，发生冲突和加锁的频率降低了，并发操作的性能就提高了。</p><p>而且 JDK 1.8 使用的是红黑树优化了之前的固定链表，那么当数据量比较大的时候，查询性能也得到了很大的提升，从之前的 O(n) 优化到了 O(logn) 的时间复杂度。</p>',24))])}const u=t(c,[["render",d]]),f=JSON.parse('{"path":"/8gu/Java%E5%9F%BA%E7%A1%80.html","title":"Java基础","lang":"zh-CN","frontmatter":{"description":"Java基础 反射相关 反射机制指的是程序在运行时能够获取自身的信息。 反射操作的目标对象（实例）是从堆（Heap）中获得的，而类的元数据（如方法、字段、构造方法等结构信息）是从方法区（Method Area）或元空间（Metaspace） 中获得的。 为什么反射慢? 由于反射涉及动态解析的类型，因此不能执行某些Java虚拟机优化，如JIT优化。 在使...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础\\",\\"image\\":[\\"https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1705133708567-49955e01-446a-4fef-b441-4356180eac5c-289154.png\\",\\"https://cdn.xiaolincoding.com//picgo/1721807523151-41ad316a-6264-48e8-9704-5b362bc0083c.webp\\",\\"https://cdn.xiaolincoding.com//picgo/1721807523128-7b1419e7-e6ba-47e6-aba0-8b29423a8ce7.webp\\"],\\"dateModified\\":\\"2025-06-19T10:29:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/8gu/Java%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"Java基础"}],["meta",{"property":"og:description","content":"Java基础 反射相关 反射机制指的是程序在运行时能够获取自身的信息。 反射操作的目标对象（实例）是从堆（Heap）中获得的，而类的元数据（如方法、字段、构造方法等结构信息）是从方法区（Method Area）或元空间（Metaspace） 中获得的。 为什么反射慢? 由于反射涉及动态解析的类型，因此不能执行某些Java虚拟机优化，如JIT优化。 在使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pub-8f51c562924b4b9f89b40704dbb3bc16.r2.dev/PicGo/1705133708567-49955e01-446a-4fef-b441-4356180eac5c-289154.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T10:29:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T10:29:07.000Z"}]]},"git":{"createdTime":1750248745000,"updatedTime":1750328947000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":2,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":8.28,"words":2483},"filePathRelative":"8gu/Java基础.md","autoDesc":true}');export{u as comp,f as data};
