import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as l,b as n,e as i,d as h,r as e,o as p}from"./app-C5tnU83h.js";const r={};function d(g,s){const a=e("Mermaid");return p(),t("div",null,[s[0]||(s[0]=l('<h1 id="节目服务详解" tabindex="-1"><a class="header-anchor" href="#节目服务详解"><span>节目服务详解</span></a></h1><p>这篇文档将带您深入easypass票务系统的技术心脏，全面剖析其从数据准备到高并发交易处理的全链路设计。我们将通过丰富的代码示例和详尽的逻辑阐述，揭示系统如何在保证数据准确性的同时，应对海量用户请求的挑战。</p><h2 id="第一部分-万丈高楼平地起-——-系统初始化与数据准备" tabindex="-1"><a class="header-anchor" href="#第一部分-万丈高楼平地起-——-系统初始化与数据准备"><span>第一部分：万丈高楼平地起 —— 系统初始化与数据准备</span></a></h2><p>一个高性能、高可用的系统，其根基在于启动时高效而稳健的数据准备。easypass系统通过一个专用的初始化组件 <code>easypass-service-initialize</code>，以精确控制的顺序，为后续的所有业务流程铺平道路。</p><h4 id="mermaid图-系统初始化流程" tabindex="-1"><a class="header-anchor" href="#mermaid图-系统初始化流程"><span>Mermaid图：系统初始化流程</span></a></h4>',5)),n(a,{code:"eJxLL0osyFAIceFSAALH6Ke7pjyfsuLphPVPu1bEKujq2ik4aRjqKQQU5QMV5jonlqSm5xdVeuZllrgkliTaJBXZPd8z+enaGS+6mp7PXve0o+35xt2a1mDDnMDanTWM4NqDM/LLQzJzU4NS81LLE3NAup/N3vJs2oZne6Y8bd/1bPq2l9O3QHU7g3W7aBjDdbvmJBaXZCYXpyYWJWeguGDLoqd7pkJc8Gzqhme966BmuIDNcNUwgZvhlJOfn+uWmVOSWgQyAaT75aKW581rn+5ofjmr7cX+9me7lzyduQJqgCvYALfopx1zny7vftoz7em6nmcdE2KtuQBLlYXs"}),s[1]||(s[1]=l(`<p>这个初始化过程宛如一场精心编排的四幕剧：</p><ol><li><strong>缓存节目分类 (ProgramCategoryInitData)</strong>: 奠定基础数据。</li><li><strong>更新演出时间 (ProgramShowTimeRenewal)</strong>: 保证数据鲜活。</li><li><strong>索引节目数据 (ProgramElasticsearchInitData)</strong>: 构建高速查询引擎。</li><li><strong>预热布隆过滤器 (ProgramBloomFilterInit)</strong>: 建立高效的防线。</li></ol><h3 id="_1-1-缓存节目分类信息-从源头提升效率" tabindex="-1"><a class="header-anchor" href="#_1-1-缓存节目分类信息-从源头提升效率"><span>1.1 缓存节目分类信息：从源头提升效率</span></a></h3><p>节目分类是系统中频繁使用但极少变动的基础数据，将其在系统启动时直接加载到Redis中，是提升后续所有查询效率的第一步。</p><ul><li><p><strong>实现逻辑</strong>: 该任务由 <code>ProgramCategoryInitData</code> 类负责，它继承了 <code>AbstractApplicationPostConstructHandler</code> 并设定了最高的执行优先级 (<code>executeOrder()</code> 返回1)。其核心逻辑在 <code>programCategoryRedisDataInit</code> 方法中：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ServiceLock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">lockType</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> LockType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> PROGRAM_CATEGORY_LOCK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#all&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ProgramCategory</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> programCategoryRedisDataInit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ProgramCategory</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> programCategoryMap </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 从数据库中查询所有分类</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    QueryWrapper</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ProgramCategory</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lambdaQueryWrapper </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Wrappers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emptyWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ProgramCategory</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> programCategoryList </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> programCategoryMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">selectList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lambdaQueryWrapper);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CollectionUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isNotEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(programCategoryList)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 将查询结果转换为Map，key为分类ID，value为分类对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        programCategoryMap </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> programCategoryList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">collect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                Collectors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(p </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()), p </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p, (v1, v2) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v2));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用HSET命令一次性将整个Map存入Redis的Hash结构中</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        redisCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">putHash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RedisKeyBuild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createRedisKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RedisKeyManage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PROGRAM_CATEGORY_HASH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),programCategoryMap);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> programCategoryMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>设计解读</strong>:</p><ul><li><strong>异步与锁</strong>: 整个过程在独立的业务线程池中<strong>异步执行</strong>，完全不阻塞应用主线程的启动。同时，<code>@ServiceLock</code> 注解确保了在分布式环境下，只有一个实例会执行此初始化操作，避免了并发写入缓存引发的数据错乱。</li><li><strong>数据结构</strong>: 选用Redis的 <code>HASH</code> 数据结构是明智之举。它将所有分类信息聚合在一个大键（<code>easypass-d_easypass_program_category_hash</code>）下，查询单个分类时，可以使用 <code>HGET</code> 命令，时间复杂度为O(1)，效率极高。</li></ul></li></ul><h3 id="_1-2-更新节目演出时间-确保演示环境的持续可用" tabindex="-1"><a class="header-anchor" href="#_1-2-更新节目演出时间-确保演示环境的持续可用"><span>1.2 更新节目演出时间：确保演示环境的持续可用</span></a></h3><p>为了让学习和演示该项目的开发者不必担心数据过期问题，系统设计了一个自动“续命”的机制。</p><ul><li><p><strong>实现逻辑</strong>: <code>ProgramShowTimeRenewal</code> 负责此任务。它会查询所有演出时间早于明日的记录，并对其进行更新。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Transactional</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Set</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> renewal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Set</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> programIdSet </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 查询即将过期的演出时间</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    LambdaQueryWrapper</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ProgramShowTime</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> queryWrapper </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            Wrappers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lambdaQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProgramShowTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">le</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ProgramShowTime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">getShowTime, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DateUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addDay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DateUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ProgramShowTime</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> expiredShowTimes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> programShowTimeMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">selectList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(queryWrapper);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ProgramShowTime</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> showTime </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> expiredShowTimes) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        programIdSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">showTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProgramId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Date</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> newShowTime </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> DateUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addMonth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">showTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getShowTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 确保新的演出时间一定在当前时间之后</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">newShowTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">before</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DateUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            newShowTime </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> DateUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addMonth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(newShowTime, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // ... 更新数据库 ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> programIdSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>设计解读</strong>:</p><ul><li><strong>关键联动</strong>: 此步骤的核心价值在于<strong>数据同步的闭环</strong>。一旦检测到并更新了任何演出时间，它会返回受影响的 <code>programId</code> 集合。后续的逻辑会利用这个集合，精确地删除这些节目在Redis和Elasticsearch中的旧数据，从而触发在下一步中对这些节目进行强制性的重新索引和缓存，保证了数据的最终一致性。</li></ul></li></ul><h3 id="_1-3-索引节目数据至elasticsearch-构建复杂查询的基石" tabindex="-1"><a class="header-anchor" href="#_1-3-索引节目数据至elasticsearch-构建复杂查询的基石"><span>1.3 索引节目数据至Elasticsearch：构建复杂查询的基石</span></a></h3><p>主页、列表页和搜索页的查询条件复杂多变，无法有效利用数据库的分片键。为了避免“读扩散”导致的性能灾难，系统选择将一份聚合后的“宽表”数据索引到Elasticsearch中。</p><ul><li><p><strong>实现逻辑</strong>: <code>ProgramElasticsearchInitData</code> 负责构建这个搜索引擎。</p><ol><li><p><strong>创建索引与映射</strong>: 如果索引不存在，会先根据 <code>getEsMapping</code> 方法定义的结构创建索引。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">EsDocumentMappingDto</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getEsMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">EsDocumentMappingDto</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> EsDocumentMappingDto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProgramDocumentParamName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;long&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> EsDocumentMappingDto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProgramDocumentParamName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TITLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 支持分词搜索</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> EsDocumentMappingDto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProgramDocumentParamName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SHOW_DAY_TIME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;date&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 支持日期范围查询</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> EsDocumentMappingDto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProgramDocumentParamName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MIN_PRICE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;integer&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ... 其他字段</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数据聚合与索引</strong>: 遍历所有节目ID，对每一个节目，调用 <code>programService.getDetailFromDb(programId)</code> 来获取一个聚合了多方信息（如分类名、地区名、演出时间、价格范围等）的 <code>ProgramVo</code> 对象，然后将其转换为一个Map，并添加到ES中。</p></li></ol></li><li><p><strong>设计解读</strong>:</p><ul><li><strong>反范式设计</strong>: 这是典型的数据“反范式”设计。通过在索引时提前进行数据JOIN和聚合，将查询时的复杂计算前置到了数据写入阶段。虽然这会增加写入的复杂度和存储空间，但它极大地简化了查询逻辑，并带来了数量级的性能提升，对于读多写少的场景是最佳实践。</li></ul></li></ul><h3 id="_1-4-初始化节目布隆过滤器-构建高效的-不存在-证明" tabindex="-1"><a class="header-anchor" href="#_1-4-初始化节目布隆过滤器-构建高效的-不存在-证明"><span>1.4 初始化节目布隆过滤器：构建高效的“不存在”证明</span></a></h3><p>为了防止恶意或意外的、对大量不存在节目的查询导致缓存穿透，直接打垮数据库，系统在启动时预热了一个布隆过滤器。</p><ul><li><p><strong>实现逻辑</strong>: <code>ProgramBloomFilterInit</code> 的逻辑非常直接：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> executeInit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ConfigurableApplicationContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> context) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 查询所有有效的节目ID</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> allProgramIdList </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> programService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAllProgramIdList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CollectionUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(allProgramIdList)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 将每个ID添加到布隆过滤器中</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    allProgramIdList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(programId </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> bloomFilterHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(programId)));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>设计解读</strong>:</p><ul><li>布隆过滤器的特点是：它能100%确定一个元素“绝对不存在”，但只能“很可能存在”。这对于拦截无效请求来说已经足够。当一个请求查询的节目ID通过布隆过滤器判断为不存在时，系统可以直接返回“节目不存在”，无需再进行任何后续的缓存或数据库查询，极大地节省了资源。</li></ul></li></ul><h2 id="第二部分-节目发现与详情展示" tabindex="-1"><a class="header-anchor" href="#第二部分-节目发现与详情展示"><span>第二部分：节目发现与详情展示</span></a></h2><p>当数据准备就绪，我们来看看系统如何为用户提供流畅的浏览和搜索体验。</p><h3 id="_2-1-主页节目列表展示-优雅地应对-读扩散" tabindex="-1"><a class="header-anchor" href="#_2-1-主页节目列表展示-优雅地应对-读扩散"><span>2.1 主页节目列表展示：优雅地应对“读扩散”</span></a></h3><p>主页查询的复杂性在于其多维度的过滤条件。系统的应对策略是<strong>ES优先，数据库兜底</strong>。</p><h4 id="mermaid图-主页列表查询流程" tabindex="-1"><a class="header-anchor" href="#mermaid图-主页列表查询流程"><span>Mermaid图：主页列表查询流程</span></a></h4>`,19)),n(a,{code:"eJyVk11L40AUhu/7K+bShRUvF8rSmzawhWVXqOz9mAwaiJ3uzKywdypWqthasFXQqqQi1g8ai+JHFfwzzkz8F04yLSVNq5ibkOR533POeyYU/f2H8ibK2HCOwIUEUFcBEmabdgHmGUg7NlI3SAFvN0XpTl54MWaa4ECbxnlGsOMgEuCicspLt7yzMg7PIbJomyhkG2W+4b7DGjTAjJw4OvG9pmi5/GA3xmYgg7OQasf6lSi3eXc7RhkOpOqBIkjM+RCtNuRNkz/VxXYlEeJ65slUKjZYEkz/zs2AqXm8gKYcmzIwwasXkCCYtb4GZZQuDRmaw+R/1qJfQruYy8C5l0ESUOQgk/1Qtj+V64TFcETb4wZCg36oMajCI9MmAfcehLf1cn8u1WpKa7LzmM3oTGdwAXzzN1bkfjs0iQgno4X95xrfP9SwDnqo7ogBgxa/914GLf/BqVAEnaGVaHN51g0/j8ygv+gksGZzY0IIrl+YIYAX1XkcKMT6qe9u8mLLv/NkraOHV1ssNni3LnYehFsaGPRlowbSffKjrnSXYlFEqw9LXxtLfK0sLl1dnRev/eWa77bk46p/XOTtTVG/GTKLZaDPaL+NnrJakXur45JGjvo1RkT9uUpj3fNW4g2GXcxB"}),s[2]||(s[2]=l(`<ul><li><p><strong>数据库兜底方案的实现</strong>: 当ES不可用时，系统会执行 <code>dbSelectHomeList</code> 方法。为了在一次交互中获取所有分类的数据，它巧妙地利用了MyBatis的动态SQL功能。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;selectHomeList&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;programListDto.parentProgramCategoryIds != null and ...&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">foreach</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;programListDto.parentProgramCategoryIds&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;parentProgramCategoryId&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> separator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39; union all &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            select * from (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                select ... from d_program dp</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                where dp.parent_program_category_id = #{parentProgramCategoryId,jdbcType=BIGINT}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                limit 7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ) as tmp</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>代码解读</strong>: <code>&lt;foreach&gt;</code> 标签会遍历传入的父分类ID列表，对每个ID生成一个独立的 <code>SELECT ... LIMIT 7</code> 子查询，并用 <code>union all</code> 将它们连接起来。这样，一个看似复杂的查询需求就被动态地转换成了一个单一的SQL语句，虽然会触发全路由查询，但作为兜底方案，它保证了功能的可用性。</li></ul></li></ul><h3 id="_2-3-智能节目搜索-释放elasticsearch的全部潜能" tabindex="-1"><a class="header-anchor" href="#_2-3-智能节目搜索-释放elasticsearch的全部潜能"><span>2.3 智能节目搜索：释放Elasticsearch的全部潜能</span></a></h3><p>搜索功能需要分词和多条件组合，这正是ES的用武之地。由于逻辑嵌套复杂，系统直接使用了原生的 <code>QueryBuilders</code> 来精细构建查询。</p><ul><li><p><strong>查询构建实现</strong>: 在 <code>ProgramEs</code> 服务的 <code>search</code> 方法中，查询构建过程如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建最外层的 BoolQueryBuilder</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BoolQueryBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> boolQuery </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> QueryBuilders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">boolQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添加精确匹配的过滤条件 (filter)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nonNull</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAreaId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    boolQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">must</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">QueryBuilders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">termQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProgramDocumentParamName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">AREA_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAreaId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nonNull</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getStartDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    boolQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">must</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">QueryBuilders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rangeQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProgramDocumentParamName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SHOW_DAY_TIME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getStartDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getEndDateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 构建内层的、用于文本搜索的布尔查询</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">StringUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isNotEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    BoolQueryBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> innerBoolQuery </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> QueryBuilders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">boolQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 使用 &quot;should&quot; 实现 OR 逻辑</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    innerBoolQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">should</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">QueryBuilders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">matchQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProgramDocumentParamName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TITLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    innerBoolQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">should</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">QueryBuilders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">matchQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProgramDocumentParamName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ACTOR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    innerBoolQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">minimumShouldMatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 确保至少一个should条件匹配</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 将内层查询作为外层查询的 &quot;must&quot; 条件</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    boolQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">must</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(innerBoolQuery);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>设计解读</strong>:</p><ul><li>通过 <code>boolQuery</code> 的 <code>must</code> (AND) 和 <code>should</code> (OR) 组合，可以灵活地构建出任意复杂的逻辑。<code>matchQuery</code> 会对查询词和文档内容进行分词，实现智能匹配，而 <code>termQuery</code> 和 <code>rangeQuery</code> 则用于精确的过滤。这种代码化的查询构建方式，不仅比拼接JSON字符串更安全、更易于维护，也让复杂的搜索逻辑一目了然。</li></ul></li></ul><h3 id="_2-4-高性能节目详情页-多重优化下的极致体验" tabindex="-1"><a class="header-anchor" href="#_2-4-高性能节目详情页-多重优化下的极致体验"><span>2.4 高性能节目详情页：多重优化下的极致体验</span></a></h3><p>详情页的快速加载至关重要。系统在此处应用了“缓存旁路+双重检测锁”的经典模式，并结合了异步预加载。</p><h4 id="mermaid图-节目详情页加载流程" tabindex="-1"><a class="header-anchor" href="#mermaid图-节目详情页加载流程"><span>Mermaid图：节目详情页加载流程</span></a></h4>`,7)),n(a,{code:"eJx1kstu00AUhvc8hdUVLPoCRQLRpPdbCIiN1QWoFbCAolasIqSkuTYkbaU6pCUR4IS0lsCXQtS4ttO+jM/M+C06npmmTqLOyuP5zjn/f855u/360zvpZfyBRM8zGbw0nH2dksh+Dw6+kfIubhjEPEXZ/Lo0OflEmk5h7wj0Y9/W0bEJh6f0G5paYnuLJvrwauvpl8cs0zSlJf7G4mZk391Pbm683+GZBwHrEd63q5GQmMxRKBXAzoJ3QEw3UDIiIMaYeAoKVfRXRe00+tnh0oSC+KiCyO/hQrMyjSVmC9UsVDXAOYqa969VlDFF0VnGz8nJRIxYWaxoQmHTgooDh1V8ZglyjpHzMnZzpJ0Ho4JqXfw9N2p7nmELMliFwVOoLN9hvRLUAqMW5aBYRsrVUBsWb72x287nN3yeE3B5QdSKkJf/TzIKdzfBuPDMsMgl0WRuFnkKFB1UvwjqXVHgDl0eQulUqLeh7tyhKwLFHQ2pbSjViaqNQatj+c5d2kPBbX7cGPPk7SK9E7RyUP5F+n3pIR0AKvWg9w+fuNCvPRo1t5YSttim+raDs3pQ1253NDxr4TrQd8Yn6PqHJaakQRFRwrbDYXd1ash3nDErz+8NNC+R/puroOOnUmkSYrSgWqPzGLW6wpIlZXReDBoFtJdGzT0+NkGucoBflqKX5eglyS4vZHKtQOMHaqaxW4ouH3ZPwGhRefhPOLsbq8XdNQ=="}),s[3]||(s[3]=l(`<ul><li><p><strong>双重检测锁的实现</strong>: <code>ProgramService</code> 中的 <code>getById</code> 方法是这一模式的完美体现。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ServiceLock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">lockType</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> LockType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> PROGRAM_LOCK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> keys</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#programId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ProgramVo</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getById</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> programId) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 第一次尝试从缓存获取</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> redisCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        RedisKeyBuild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createRedisKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RedisKeyManage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PROGRAM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, programId),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        ProgramVo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 若缓存不存在，则执行此Supplier函数式接口中的逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        () </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 这里已经处于分布式锁的保护之下</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 第二次检查缓存（双重检测）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // (注意：在实际的锁组件实现中，锁内的第二次检查是隐式或显式包含的)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 如果仍然没有，则创建</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createProgramVo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(programId);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        EXPIRE_TIME,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DAYS</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>代码解读</strong>: <code>redisCache.get</code> 方法的第三个参数是一个 <code>Supplier</code>。只有当缓存未命中时，这个 <code>Supplier</code> 才会被调用。而 <code>getById</code> 方法外的 <code>@ServiceLock</code> 注解确保了在调用 <code>Supplier</code> 之前，线程已经持有了分布式读锁。这优雅地实现了“加锁 -&gt; 查缓存 -&gt; 查数据库 -&gt; 写缓存 -&gt; 解锁”的完整流程。</li></ul></li><li><p><strong>异步预加载的实现</strong>: 为了让用户点击“购买”后的体验更丝滑，系统会提前加载数据。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> preloadTicketUserList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> highHeat){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(highHeat, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">BusinessStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">NO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 非热门节目不预热</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userId </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> BaseParameterHolder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(USER_ID);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">StringUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(userId)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 用户未登录不预热</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 异步执行，不阻塞当前详情页的返回</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    BusinessThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // ... RPC调用用户服务获取购票人列表 ...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // ... 将结果存入Redis ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;预热加载购票人列表失败&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, e);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>设计解读</strong>: 通过将这些非核心但影响后续体验的IO操作（如RPC调用）放入独立的线程池中<strong>异步执行</strong>，详情页接口可以迅速返回，用户几乎感觉不到延迟，而当他们进入下一步时，所需的数据很可能已经“悄悄地”准备好了。</li></ul></li></ul><h2 id="第三部分-高并发购票核心流程" tabindex="-1"><a class="header-anchor" href="#第三部分-高并发购票核心流程"><span>第三部分：高并发购票核心流程</span></a></h2><p>这是系统的“珠穆朗瑪峰”，我们将详细剖析从V1到V3的演进，看系统是如何一步步走向极致性能的。</p><h4 id="mermaid图-v1版本基础购票流程" tabindex="-1"><a class="header-anchor" href="#mermaid图-v1版本基础购票流程"><span>Mermaid图：V1版本基础购票流程</span></a></h4>`,4)),n(a,{code:"eJydVFFP2lAUfvdX3DdqMl3cI1nMMjDRjImBZcmelq7cbM2QslLMHgGdYCPgNjcdsKHOBeNUMBpEy8Kf6bktT/sLu/RWphYcrC9N0/Od7zvn++6N4TdxHBGwV+Rfyvz8CKJPlJcVURCjfERBnrCI6YuPITjaIZkz42fVUTMnSx2sXw5h2ScJr61qdau9ntQbOThPGYcrcJxytpbmo1JMVPBTPiyGeEWSO0BDW4K1THt/1awm4cverWRBLC+IAu7ATDVlFI/Mox3IfiKlLKjbDqQvzgcFWYxa09APc6lASgeOMkfnKz25wJxndMSCsMWMTU7enN6NBBnzdKoJLqRIo1bxzZqeMLJSMbdX0YMAjlL81FssxBXsE+dFBXFsiyRR0Vtfibr7H13tiSx/OKieR1nlTIg6BZllaCxCM08t69vaaZcbYSaSYyR6I2GcaJDZ0BsFuiyytU1tZP2c4LHeai1MO1EwW+lBZrSnutx5743bRf2gupYL4JAYY9xwUdF/ZQ21ThJJ+EA/P8Lh5i0tu6lyI7O2aKzvoXiUDojtag8vvMJeXuEDOCaF44ooRTimcFZSMJIWsPw3mG4EuTIcrlGfoVT73SzcfyHfnZwYpyZ+h3SeaUHc9MysJ/Dw2aj19944gtoyU00ncc36nwf9Pq/LqGhm+sTl83seuSjEO+W7g6YfB6eeMPYu500fumsxmh02Ujwln2skswZq+ZYtXIfSU2LvwrZF6vz2XnpzDduP3mytQ/EbO3yQPxvWVMi/byeSpJ4hySpkaqDVzVa5vVmm6UQcVaZf5Fhvs/6ObNRJaV/XNvtHp2dY/yXRymvn5FhXhbPeAvBh5doVwxYHu8fm6Q+rYKDowXKWHNjYAQJIpRTpgaVqiFbosgyVyOQO7GZZInvm0AoeDSHl6GayyzRo+pjAK+kbyh+iFiF9Ac0UNBoWGkdCI38A2dAFGQ=="}),s[4]||(s[4]=i("h3",{id:"_3-2-优化迭代一-细化锁粒度-createv2",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_3-2-优化迭代一-细化锁粒度-createv2"},[i("span",null,[h("3.2 优化迭代一：细化锁粒度 ("),i("code",null,"createV2"),h(")")])])],-1)),s[5]||(s[5]=i("p",null,[h("V1版本的 "),i("code",null,"programId"),h(" 锁粒度太粗。V2版本通过引入“本地锁+细粒度分布式锁”的二级锁机制，实现了性能的飞跃。")],-1)),s[6]||(s[6]=i("h4",{id:"mermaid图-v2版本锁优化流程",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#mermaid图-v2版本锁优化流程"},[i("span",null,"Mermaid图：V2版本锁优化流程")])],-1)),n(a,{code:"eJytVMtO20AU3ecrZmlUsekyCzbpBrVSKyp1P7JvgkXqScduJXYhIBrSpKHCrSoTpYRFkXg4sIqBKPxMZmyv+AVmbEIeDo8gZmHLmnPOPWfuHZvw5SsYKrzRcY7izykkVgFTS1f1AjYslMnrIF7YRMzd5+WOf9ROYD5QIrnvqQb0HVFXInRlL7TX2FkpgRYInJewDFaXQWJ545g1TgXc7+6wk79KBmezoBswl+AugaabJjGiCuVN5q2zbl3WeZK3j0C/6WpUMqiU/F03cPdZ7Tdv1FillYqocdz5hYXJTGmkUsAWfHqtaBaJnU1iptKETd7cDtodfla67lb9lstcJ2wUg/9rkXHHdzaE2xWwMkI+R+jqombOIN8+5+163zuc1JC17H+8vC3P1dl4C6tIKcT0RQ29QpP4ufgA8oQUhqKCK4jRxj2OxruZRjmw5JeSFw9BjQ9KrnHg/NQwwZXNdpt9ryhKL4FoBBUtlFvMbfZ7Px7yMUXsZ4fV/9zNVkQGQ3tezMHgPRBwAHlCtGEkpIyO8VBshoSjAuMhHxG5vQ6DyR7OtUEsQFTPLVuIZBMqacS3DoJWle957Gq97zni8oTFy6D3a+RoeXUrdidGLyxusov6bNHC7xVu9+6P9oJFkhMyVUAoxD+HQS/ZTo1d2KnUDdfVN9c="}),s[7]||(s[7]=l(`<ul><li><p><strong>本地锁缓存的实现</strong>: <code>LocalLockCache</code> 类利用Caffeine缓存来管理本地锁实例。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LocalLockCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Cache</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReentrantLock</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> localLockCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostConstruct</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> localLockCacheInit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        localLockCache </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Caffeine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expireAfterWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">HOURS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 锁对象在2小时后自动过期</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReentrantLock</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> lockKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">boolean</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fair</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // get方法是线程安全的，如果key不存在，则执行lambda创建新的锁实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> localLockCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(lockKey, key </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ReentrantLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fair));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>设计解读</strong>: <code>Caffeine</code> 的 <code>expireAfterWrite</code> 特性是此方案的点睛之笔。它能自动清理那些长时间未被访问的锁对象（例如演出已结束），从而有效防止了因锁对象持续累积而导致的JVM内存溢出问题。</li></ul></li></ul><h3 id="_3-3-优化迭代二-无锁化-终极方案-createv3" tabindex="-1"><a class="header-anchor" href="#_3-3-优化迭代二-无锁化-终极方案-createv3"><span>3.3 优化迭代二：“无锁化”终极方案 (<code>createV3</code>)</span></a></h3><p>V3版本是性能优化的极致。它移除了应用层的分布式锁，将包含校验和更新的整个事务逻辑封装到一个大型Lua脚本中，完全依赖Redis的原子性。</p><h4 id="mermaid图-v3版本-无锁化-lua流程" tabindex="-1"><a class="header-anchor" href="#mermaid图-v3版本-无锁化-lua流程"><span>Mermaid图：V3版本“无锁化”Lua流程</span></a></h4>`,4)),n(a,{code:"eJydVNtOGlEUfe9XnPikRqlWewlpTBO1L6XSSNKXpmmmw0mdVBk6gDVpTBRFAbmYgqkIqaCipC0XUyOI0n5MZx+Gp/5CN3OApoCXdB64nKy19pq19z4O+s5FbSKdkIQ3ijB3i+BjFxSnJEp2weYk47MSxS/BQSC3x7zF6td8B+aZIte5ZsVKFZMsvtXRZ+5q1qeWQizxDRKFWnQZjt1XMi1UmZdEWidrfnc1ntNyexDcYokg+FMdTJNLsIiKZNet9bBYWVup9OChtrqDFW/peO59cGys3aCRiAoVnPT5SK/VKffp4HZMVxrzHWmpAHk0Te3In1ygostJTdKc5CTwMUBa73oTxcb7Nr1M0ffdzTRwyG69s5FohZVqNEPsHDcuiDN0XJfRKdPUIc+6nJJsM9upgqe9fdiQU/UiCZ408y2xhE87yVbTGbZVYMGcXtImOymR56nyN1oj6e+HRAaboJa+QGgXsps8Xljz1FYykAsw7yaXY5GgWkkY+/sfvlZujw0bCNtfYrvpeonUvlqJ1X9s52HzEDwe7fT7ryW3DrxjINpGWi0F8ez3RaAaP2GhtPYzCvHPtWhMy+eryeUmdqQpquWL7Nhd3VmF8pFaCTZ0s9toVS1F8XPK/MpiNk1AxAulgJbC02xTZFQvyIlYFsJ5jPG6ynexsm8f1sP/vM5WobYebkLuGYh6HupSGLzJWuyAF2yC7xsIFNYa7ovn4E+Ct2Ayjz/p5vgBOtZtYdbg30VbOGm1vVXI7TROmkGA9xNSkcenX5jVt4R3jEvAwbF2kkYJHVB/Wr0evGw6OZN8EGUr/hsdGhoeHiAGg2GR9Ko/NuDQbSRQjmD8vIt8fi+f4a41WPIMx7CVO/PHYb08ITwVpMeIpZMLIrXXp/lKbRTnC9/0zPUgEoRyVGdSm/XSaFrp/nc0QwPE7lLEGcFBLbiJJsmBTl5gUi8Xr8mkTZWvtlXmC12/FDqVcZ+9cTgv8wXGBvDLslWoPZkr/HMmhIvXpdt5Hd5EQL/5OnrD427rzR/UEhW5"}),s[8]||(s[8]=l('<ul><li><strong>设计解读</strong>: <ul><li><strong>逻辑下沉</strong>: V3方案的本质是将原本分布在Java应用层和Redis中的逻辑（校验-&gt;加锁-&gt;更新），整体下沉到了Redis内部。</li><li><strong>性能优势</strong>: 这种做法的性能优势是压倒性的。在高并发场景下，99%的请求可能都因库存不足而失败。V3方案让这些失败请求在Redis层就被“闪电般”地拒绝，它们的数据包甚至不需要离开Redis服务器，极大地减轻了网络带宽和应用服务器的负担。只有那些通过了所有校验的“天选之子”请求，才会成功返回，并触发后续的数据库订单创建流程。</li></ul></li></ul><h2 id="第四部分-保障数据最终一致性" tabindex="-1"><a class="header-anchor" href="#第四部分-保障数据最终一致性"><span>第四部分：保障数据最终一致性</span></a></h2><p>在easypass这样以缓存为核心的系统中，与数据库的同步采用了<strong>最终一致性</strong>模型。</p><h4 id="mermaid图-数据最终一致性流程" tabindex="-1"><a class="header-anchor" href="#mermaid图-数据最终一致性流程"><span>Mermaid图：数据最终一致性流程</span></a></h4>',4)),n(a,{code:"eJx9Ud1KwlAAvvcpzmWB+gBeCJE3kmTlE5z0EANT26bgnRqSSctELUFpmEneOAeJ1FR6mZ2zedUrtJ2jbDJpFztw+L7vfD8CusmjTBJFOHjFw2sfsL4c5EUuyeVgRgRHaessAigA0p7qi66xauLqpwcW51OITyC+wCWRDTaVNyx1SF/C9YEHHEFpWDzPozyF4sXc/JHJvEbK03VXxrUXD+GMz9rm3Pr1itFTmP6BxTVn32apeuhhXqAUJ9gEY9nCk67XChThJRSoJumoRFKw1vJRGEseCIfd2UKbGkjtCddl3Hs11VuKdoMsDn3XAvdm5FnF2oe+koz6nJTKIRCLH5+AQBgk4rHIPqrTTgjgRnNdKrNuDnKshWjKDwQExWhK8INgMMhCn2ZFBLIFxO/I+V1dW26ojtEe69ojXlbIZMT8OcE9diw/rIcQMAaKqby7ItOfo29jd4favohrKunLv8sHNhS7pOxdvB1+s8e+6vQvzSntP+b9EN81jNGYDIZWqO3sW8Ben6wHOqrvDwPaXU0="}),s[9]||(s[9]=i("ul",null,[i("li",null,[i("strong",null,"设计解读"),h(": "),i("ul",null,[i("li",null,[i("strong",null,"解耦与削峰"),h(": 通过引入消息队列，支付成功后的缓存更新（需要快速响应给用户）与数据库更新（可以容忍一定延迟）被彻底解耦。这不仅提高了系统的可用性（即使数据库暂时抖动，也不影响支付确认），还能起到“削峰填谷”的作用，将瞬时的高并发支付成功更新请求，平滑地转化为对数据库的稳定写入流。这是一种在大型分布式系统中保障系统稳定性和可扩展性的经典架构模式。")])])])],-1))])}const y=k(r,[["render",d]]),o=JSON.parse('{"path":"/projects/easypass/%E8%8A%82%E7%9B%AE%E6%9C%8D%E5%8A%A1%E8%AF%A6%E8%A7%A3.html","title":"节目服务详解","lang":"zh-CN","frontmatter":{"description":"节目服务详解 这篇文档将带您深入easypass票务系统的技术心脏，全面剖析其从数据准备到高并发交易处理的全链路设计。我们将通过丰富的代码示例和详尽的逻辑阐述，揭示系统如何在保证数据准确性的同时，应对海量用户请求的挑战。 第一部分：万丈高楼平地起 —— 系统初始化与数据准备 一个高性能、高可用的系统，其根基在于启动时高效而稳健的数据准备。easypas...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"节目服务详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-14T02:11:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\",\\"url\\":\\"codelong.top\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/projects/easypass/%E8%8A%82%E7%9B%AE%E6%9C%8D%E5%8A%A1%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"CodeLong"}],["meta",{"property":"og:title","content":"节目服务详解"}],["meta",{"property":"og:description","content":"节目服务详解 这篇文档将带您深入easypass票务系统的技术心脏，全面剖析其从数据准备到高并发交易处理的全链路设计。我们将通过丰富的代码示例和详尽的逻辑阐述，揭示系统如何在保证数据准确性的同时，应对海量用户请求的挑战。 第一部分：万丈高楼平地起 —— 系统初始化与数据准备 一个高性能、高可用的系统，其根基在于启动时高效而稳健的数据准备。easypas..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T02:11:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-14T02:11:18.000Z"}]]},"git":{"createdTime":1755137478000,"updatedTime":1755137478000,"contributors":[{"name":"1973034392","username":"1973034392","email":"1973034392@qq.com","commits":1,"url":"https://github.com/1973034392"}]},"readingTime":{"minutes":15.86,"words":4758},"filePathRelative":"projects/easypass/节目服务详解.md","autoDesc":true}');export{y as comp,o as data};
